
SmartLampV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000190  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003338  08000190  08000190  00010190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  080034c8  080034c8  000134c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003610  08003610  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003610  08003610  00013610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003618  08003618  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003618  08003618  00013618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08003620  08003620  00013620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  20000070  08003698  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000414  08003698  00020414  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000142c4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026ab  00000000  00000000  00034364  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c543  00000000  00000000  00036a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000f50  00000000  00000000  00042f58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000ee0  00000000  00000000  00043ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000225c9  00000000  00000000  00044d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000cec9  00000000  00000000  00067351  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000ccd23  00000000  00000000  0007421a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00140f3d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a4c  00000000  00000000  00140fb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080034ac 	.word	0x080034ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080034ac 	.word	0x080034ac

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d4:	2400      	movs	r4, #0
 80004d6:	9405      	str	r4, [sp, #20]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d8:	4b19      	ldr	r3, [pc, #100]	; (8000540 <MX_GPIO_Init+0x70>)
 80004da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004dc:	f042 0204 	orr.w	r2, r2, #4
 80004e0:	64da      	str	r2, [r3, #76]	; 0x4c
 80004e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004e4:	f002 0204 	and.w	r2, r2, #4
 80004e8:	9201      	str	r2, [sp, #4]
 80004ea:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ee:	f042 0201 	orr.w	r2, r2, #1
 80004f2:	64da      	str	r2, [r3, #76]	; 0x4c
 80004f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f6:	f003 0301 	and.w	r3, r3, #1
 80004fa:	9302      	str	r3, [sp, #8]
 80004fc:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 80004fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000502:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000504:	2502      	movs	r5, #2
 8000506:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000508:	2303      	movs	r3, #3
 800050a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800050c:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800050e:	a903      	add	r1, sp, #12
 8000510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000514:	f000 ff2e 	bl	8001374 <HAL_GPIO_Init>

	// Enable output pins for debuging to see DMA Full and Half transfer interrupts
#if defined(LED4_PORT) && defined(LED5_PORT)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000518:	2301      	movs	r3, #1
 800051a:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800051e:	9506      	str	r5, [sp, #24]

	GPIO_InitStruct.Pin = LED4_PIN;
 8000520:	2310      	movs	r3, #16
 8000522:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(LED4_PORT, &GPIO_InitStruct);
 8000524:	a903      	add	r1, sp, #12
 8000526:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800052a:	f000 ff23 	bl	8001374 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED5_PIN;
 800052e:	2320      	movs	r3, #32
 8000530:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(LED5_PORT, &GPIO_InitStruct);
 8000532:	a903      	add	r1, sp, #12
 8000534:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000538:	f000 ff1c 	bl	8001374 <HAL_GPIO_Init>
#endif
}
 800053c:	b009      	add	sp, #36	; 0x24
 800053e:	bd30      	pop	{r4, r5, pc}
 8000540:	40021000 	.word	0x40021000

08000544 <MX_DMA_Init>:
{
 8000544:	b500      	push	{lr}
 8000546:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000548:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <MX_DMA_Init+0x30>)
 800054a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800054c:	f042 0201 	orr.w	r2, r2, #1
 8000550:	649a      	str	r2, [r3, #72]	; 0x48
 8000552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000554:	f003 0301 	and.w	r3, r3, #1
 8000558:	9301      	str	r3, [sp, #4]
 800055a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800055c:	2200      	movs	r2, #0
 800055e:	4611      	mov	r1, r2
 8000560:	200b      	movs	r0, #11
 8000562:	f000 fd7d 	bl	8001060 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000566:	200b      	movs	r0, #11
 8000568:	f000 fdae 	bl	80010c8 <HAL_NVIC_EnableIRQ>
}
 800056c:	b003      	add	sp, #12
 800056e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000572:	bf00      	nop
 8000574:	40021000 	.word	0x40021000

08000578 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000578:	b672      	cpsid	i
 800057a:	e7fe      	b.n	800057a <Error_Handler+0x2>

0800057c <MX_TIM2_Init>:
{
 800057c:	b510      	push	{r4, lr}
 800057e:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000580:	2300      	movs	r3, #0
 8000582:	930a      	str	r3, [sp, #40]	; 0x28
 8000584:	930b      	str	r3, [sp, #44]	; 0x2c
 8000586:	930c      	str	r3, [sp, #48]	; 0x30
 8000588:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800058a:	9307      	str	r3, [sp, #28]
 800058c:	9308      	str	r3, [sp, #32]
 800058e:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	9302      	str	r3, [sp, #8]
 8000596:	9303      	str	r3, [sp, #12]
 8000598:	9304      	str	r3, [sp, #16]
 800059a:	9305      	str	r3, [sp, #20]
 800059c:	9306      	str	r3, [sp, #24]
  htim2.Instance = TIM2;
 800059e:	4835      	ldr	r0, [pc, #212]	; (8000674 <MX_TIM2_Init+0xf8>)
 80005a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005a4:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 80005a6:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005a8:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 115; // this value should be 100 but apparently 115
 80005aa:	2273      	movs	r2, #115	; 0x73
 80005ac:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ae:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005b0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005b2:	f002 f853 	bl	800265c <HAL_TIM_Base_Init>
 80005b6:	bb70      	cbnz	r0, 8000616 <MX_TIM2_Init+0x9a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005b8:	a90e      	add	r1, sp, #56	; 0x38
 80005ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005be:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005c2:	482c      	ldr	r0, [pc, #176]	; (8000674 <MX_TIM2_Init+0xf8>)
 80005c4:	f002 f9ea 	bl	800299c <HAL_TIM_ConfigClockSource>
 80005c8:	bb38      	cbnz	r0, 800061a <MX_TIM2_Init+0x9e>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80005ca:	482a      	ldr	r0, [pc, #168]	; (8000674 <MX_TIM2_Init+0xf8>)
 80005cc:	f002 f8a4 	bl	8002718 <HAL_TIM_PWM_Init>
 80005d0:	bb28      	cbnz	r0, 800061e <MX_TIM2_Init+0xa2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005d2:	2300      	movs	r3, #0
 80005d4:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005d6:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005d8:	a907      	add	r1, sp, #28
 80005da:	4826      	ldr	r0, [pc, #152]	; (8000674 <MX_TIM2_Init+0xf8>)
 80005dc:	f002 fb9a 	bl	8002d14 <HAL_TIMEx_MasterConfigSynchronization>
 80005e0:	b9f8      	cbnz	r0, 8000622 <MX_TIM2_Init+0xa6>
	timer_period =  (SystemCoreClock / 800000) + 15; // 0,125us period (10 times lower the 1,25us period to have fixed math below)
 80005e2:	4b25      	ldr	r3, [pc, #148]	; (8000678 <MX_TIM2_Init+0xfc>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	0a1b      	lsrs	r3, r3, #8
 80005e8:	4a24      	ldr	r2, [pc, #144]	; (800067c <MX_TIM2_Init+0x100>)
 80005ea:	fba2 2303 	umull	r2, r3, r2, r3
 80005ee:	091b      	lsrs	r3, r3, #4
 80005f0:	330f      	adds	r3, #15
 80005f2:	4a23      	ldr	r2, [pc, #140]	; (8000680 <MX_TIM2_Init+0x104>)
 80005f4:	6013      	str	r3, [r2, #0]
	uint32_t logic_0 = (10 * timer_period) / 26; // originally 36
 80005f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80005fa:	005a      	lsls	r2, r3, #1
 80005fc:	4b21      	ldr	r3, [pc, #132]	; (8000684 <MX_TIM2_Init+0x108>)
 80005fe:	fba3 1302 	umull	r1, r3, r3, r2
 8000602:	08db      	lsrs	r3, r3, #3
	uint32_t logic_1 = (10 * timer_period) / 6; // originally 15
 8000604:	4920      	ldr	r1, [pc, #128]	; (8000688 <MX_TIM2_Init+0x10c>)
 8000606:	fba1 1202 	umull	r1, r2, r1, r2
 800060a:	0892      	lsrs	r2, r2, #2
	if(logic_0 > 255 || logic_1 > 255)
 800060c:	2bff      	cmp	r3, #255	; 0xff
 800060e:	d801      	bhi.n	8000614 <MX_TIM2_Init+0x98>
 8000610:	2aff      	cmp	r2, #255	; 0xff
 8000612:	d908      	bls.n	8000626 <MX_TIM2_Init+0xaa>
 8000614:	e7fe      	b.n	8000614 <MX_TIM2_Init+0x98>
    Error_Handler();
 8000616:	f7ff ffaf 	bl	8000578 <Error_Handler>
    Error_Handler();
 800061a:	f7ff ffad 	bl	8000578 <Error_Handler>
    Error_Handler();
 800061e:	f7ff ffab 	bl	8000578 <Error_Handler>
    Error_Handler();
 8000622:	f7ff ffa9 	bl	8000578 <Error_Handler>
	compare_pulse_logic_0 = logic_0;
 8000626:	b2db      	uxtb	r3, r3
 8000628:	4918      	ldr	r1, [pc, #96]	; (800068c <MX_TIM2_Init+0x110>)
 800062a:	700b      	strb	r3, [r1, #0]
	compare_pulse_logic_1 = logic_1;
 800062c:	4918      	ldr	r1, [pc, #96]	; (8000690 <MX_TIM2_Init+0x114>)
 800062e:	700a      	strb	r2, [r1, #0]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000630:	2260      	movs	r2, #96	; 0x60
 8000632:	9200      	str	r2, [sp, #0]
  sConfigOC.Pulse = compare_pulse_logic_0; // previously 0 via cubemx config
 8000634:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000636:	2300      	movs	r3, #0
 8000638:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800063a:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800063c:	2208      	movs	r2, #8
 800063e:	4669      	mov	r1, sp
 8000640:	480c      	ldr	r0, [pc, #48]	; (8000674 <MX_TIM2_Init+0xf8>)
 8000642:	f002 f90a 	bl	800285a <HAL_TIM_PWM_ConfigChannel>
 8000646:	b108      	cbz	r0, 800064c <MX_TIM2_Init+0xd0>
    Error_Handler();
 8000648:	f7ff ff96 	bl	8000578 <Error_Handler>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800064c:	4c09      	ldr	r4, [pc, #36]	; (8000674 <MX_TIM2_Init+0xf8>)
 800064e:	2108      	movs	r1, #8
 8000650:	4620      	mov	r0, r4
 8000652:	f002 fac1 	bl	8002bd8 <HAL_TIM_PWM_Start>
	(&htim2)->Instance->DCR = TIM_DMABASE_CCR3 | TIM_DMABURSTLENGTH_1TRANSFER;
 8000656:	6822      	ldr	r2, [r4, #0]
 8000658:	230f      	movs	r3, #15
 800065a:	6493      	str	r3, [r2, #72]	; 0x48
	(&htim2)->Instance->DIER |= (1 << 3) | (1 << 11); // 3 = CC3IE, 11 = CC3DE
 800065c:	68d3      	ldr	r3, [r2, #12]
 800065e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000662:	f043 0308 	orr.w	r3, r3, #8
 8000666:	60d3      	str	r3, [r2, #12]
  HAL_TIM_MspPostInit(&htim2);
 8000668:	4620      	mov	r0, r4
 800066a:	f000 f963 	bl	8000934 <HAL_TIM_MspPostInit>
}
 800066e:	b00e      	add	sp, #56	; 0x38
 8000670:	bd10      	pop	{r4, pc}
 8000672:	bf00      	nop
 8000674:	20000194 	.word	0x20000194
 8000678:	20000000 	.word	0x20000000
 800067c:	014f8b59 	.word	0x014f8b59
 8000680:	20000228 	.word	0x20000228
 8000684:	4ec4ec4f 	.word	0x4ec4ec4f
 8000688:	aaaaaaab 	.word	0xaaaaaaab
 800068c:	200000a4 	.word	0x200000a4
 8000690:	20000144 	.word	0x20000144

08000694 <MX_TIM1_Init>:
{
 8000694:	b510      	push	{r4, lr}
 8000696:	b096      	sub	sp, #88	; 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000698:	2400      	movs	r4, #0
 800069a:	9413      	str	r4, [sp, #76]	; 0x4c
 800069c:	9414      	str	r4, [sp, #80]	; 0x50
 800069e:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006a0:	940c      	str	r4, [sp, #48]	; 0x30
 80006a2:	940d      	str	r4, [sp, #52]	; 0x34
 80006a4:	940e      	str	r4, [sp, #56]	; 0x38
 80006a6:	940f      	str	r4, [sp, #60]	; 0x3c
 80006a8:	9410      	str	r4, [sp, #64]	; 0x40
 80006aa:	9411      	str	r4, [sp, #68]	; 0x44
 80006ac:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006ae:	222c      	movs	r2, #44	; 0x2c
 80006b0:	4621      	mov	r1, r4
 80006b2:	a801      	add	r0, sp, #4
 80006b4:	f002 fe4a 	bl	800334c <memset>
  htim1.Instance = TIM1;
 80006b8:	4828      	ldr	r0, [pc, #160]	; (800075c <MX_TIM1_Init+0xc8>)
 80006ba:	4b29      	ldr	r3, [pc, #164]	; (8000760 <MX_TIM1_Init+0xcc>)
 80006bc:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 65535;
 80006be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006c2:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c4:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 1221;
 80006c6:	f240 43c5 	movw	r3, #1221	; 0x4c5
 80006ca:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006cc:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80006ce:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d0:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80006d2:	f001 fff2 	bl	80026ba <HAL_TIM_OC_Init>
 80006d6:	2800      	cmp	r0, #0
 80006d8:	d137      	bne.n	800074a <MX_TIM1_Init+0xb6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006da:	2300      	movs	r3, #0
 80006dc:	9313      	str	r3, [sp, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006de:	9314      	str	r3, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e0:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006e2:	a913      	add	r1, sp, #76	; 0x4c
 80006e4:	481d      	ldr	r0, [pc, #116]	; (800075c <MX_TIM1_Init+0xc8>)
 80006e6:	f002 fb15 	bl	8002d14 <HAL_TIMEx_MasterConfigSynchronization>
 80006ea:	2800      	cmp	r0, #0
 80006ec:	d12f      	bne.n	800074e <MX_TIM1_Init+0xba>
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80006ee:	2330      	movs	r3, #48	; 0x30
 80006f0:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.Pulse = 250;
 80006f2:	23fa      	movs	r3, #250	; 0xfa
 80006f4:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006f6:	2300      	movs	r3, #0
 80006f8:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006fa:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006fc:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006fe:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000700:	220c      	movs	r2, #12
 8000702:	a90c      	add	r1, sp, #48	; 0x30
 8000704:	4815      	ldr	r0, [pc, #84]	; (800075c <MX_TIM1_Init+0xc8>)
 8000706:	f002 f873 	bl	80027f0 <HAL_TIM_OC_ConfigChannel>
 800070a:	bb10      	cbnz	r0, 8000752 <MX_TIM1_Init+0xbe>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800070c:	2300      	movs	r3, #0
 800070e:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000710:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000712:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000714:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000716:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000718:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800071c:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800071e:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000720:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000722:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000726:	9209      	str	r2, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000728:	930a      	str	r3, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800072a:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800072c:	a901      	add	r1, sp, #4
 800072e:	480b      	ldr	r0, [pc, #44]	; (800075c <MX_TIM1_Init+0xc8>)
 8000730:	f002 fb28 	bl	8002d84 <HAL_TIMEx_ConfigBreakDeadTime>
 8000734:	b978      	cbnz	r0, 8000756 <MX_TIM1_Init+0xc2>
  HAL_TIM_MspPostInit(&htim1);
 8000736:	4c09      	ldr	r4, [pc, #36]	; (800075c <MX_TIM1_Init+0xc8>)
 8000738:	4620      	mov	r0, r4
 800073a:	f000 f8fb 	bl	8000934 <HAL_TIM_MspPostInit>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 800073e:	210c      	movs	r1, #12
 8000740:	4620      	mov	r0, r4
 8000742:	f002 f9ab 	bl	8002a9c <HAL_TIM_OC_Start>
}
 8000746:	b016      	add	sp, #88	; 0x58
 8000748:	bd10      	pop	{r4, pc}
    Error_Handler();
 800074a:	f7ff ff15 	bl	8000578 <Error_Handler>
    Error_Handler();
 800074e:	f7ff ff13 	bl	8000578 <Error_Handler>
    Error_Handler();
 8000752:	f7ff ff11 	bl	8000578 <Error_Handler>
    Error_Handler();
 8000756:	f7ff ff0f 	bl	8000578 <Error_Handler>
 800075a:	bf00      	nop
 800075c:	20000148 	.word	0x20000148
 8000760:	40012c00 	.word	0x40012c00

08000764 <MX_USART1_UART_Init>:
{
 8000764:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8000766:	480b      	ldr	r0, [pc, #44]	; (8000794 <MX_USART1_UART_Init+0x30>)
 8000768:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <MX_USART1_UART_Init+0x34>)
 800076a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800076c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000770:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000772:	2300      	movs	r3, #0
 8000774:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000776:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000778:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800077a:	220c      	movs	r2, #12
 800077c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000782:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000784:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000786:	f002 fd5c 	bl	8003242 <HAL_UART_Init>
 800078a:	b900      	cbnz	r0, 800078e <MX_USART1_UART_Init+0x2a>
}
 800078c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800078e:	f7ff fef3 	bl	8000578 <Error_Handler>
 8000792:	bf00      	nop
 8000794:	200000a8 	.word	0x200000a8
 8000798:	40013800 	.word	0x40013800

0800079c <SystemClock_Config>:
{
 800079c:	b500      	push	{lr}
 800079e:	b0ad      	sub	sp, #180	; 0xb4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a0:	2224      	movs	r2, #36	; 0x24
 80007a2:	2100      	movs	r1, #0
 80007a4:	a81c      	add	r0, sp, #112	; 0x70
 80007a6:	f002 fdd1 	bl	800334c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007aa:	2100      	movs	r1, #0
 80007ac:	9116      	str	r1, [sp, #88]	; 0x58
 80007ae:	9117      	str	r1, [sp, #92]	; 0x5c
 80007b0:	9118      	str	r1, [sp, #96]	; 0x60
 80007b2:	9119      	str	r1, [sp, #100]	; 0x64
 80007b4:	911a      	str	r1, [sp, #104]	; 0x68
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b6:	2254      	movs	r2, #84	; 0x54
 80007b8:	a801      	add	r0, sp, #4
 80007ba:	f002 fdc7 	bl	800334c <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007be:	2302      	movs	r3, #2
 80007c0:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007c6:	921e      	str	r2, [sp, #120]	; 0x78
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c8:	2240      	movs	r2, #64	; 0x40
 80007ca:	921f      	str	r2, [sp, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007cc:	9325      	str	r3, [sp, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ce:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007d0:	2201      	movs	r2, #1
 80007d2:	9227      	str	r2, [sp, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 20;
 80007d4:	2214      	movs	r2, #20
 80007d6:	9228      	str	r2, [sp, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007d8:	2207      	movs	r2, #7
 80007da:	9229      	str	r2, [sp, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007dc:	932a      	str	r3, [sp, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80007de:	2304      	movs	r3, #4
 80007e0:	932b      	str	r3, [sp, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e2:	a81b      	add	r0, sp, #108	; 0x6c
 80007e4:	f000 ff78 	bl	80016d8 <HAL_RCC_OscConfig>
 80007e8:	b9e0      	cbnz	r0, 8000824 <SystemClock_Config+0x88>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ea:	230f      	movs	r3, #15
 80007ec:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ee:	2303      	movs	r3, #3
 80007f0:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007f6:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f8:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007fa:	2104      	movs	r1, #4
 80007fc:	a816      	add	r0, sp, #88	; 0x58
 80007fe:	f001 fab1 	bl	8001d64 <HAL_RCC_ClockConfig>
 8000802:	b988      	cbnz	r0, 8000828 <SystemClock_Config+0x8c>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000804:	2301      	movs	r3, #1
 8000806:	9301      	str	r3, [sp, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000808:	2300      	movs	r3, #0
 800080a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800080c:	a801      	add	r0, sp, #4
 800080e:	f001 fc35 	bl	800207c <HAL_RCCEx_PeriphCLKConfig>
 8000812:	b958      	cbnz	r0, 800082c <SystemClock_Config+0x90>
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000814:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000818:	f000 fe74 	bl	8001504 <HAL_PWREx_ControlVoltageScaling>
 800081c:	b940      	cbnz	r0, 8000830 <SystemClock_Config+0x94>
}
 800081e:	b02d      	add	sp, #180	; 0xb4
 8000820:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000824:	f7ff fea8 	bl	8000578 <Error_Handler>
    Error_Handler();
 8000828:	f7ff fea6 	bl	8000578 <Error_Handler>
    Error_Handler();
 800082c:	f7ff fea4 	bl	8000578 <Error_Handler>
    Error_Handler();
 8000830:	f7ff fea2 	bl	8000578 <Error_Handler>

08000834 <main>:
{
 8000834:	b508      	push	{r3, lr}
  HAL_Init();
 8000836:	f000 fbdf 	bl	8000ff8 <HAL_Init>
  SystemClock_Config();
 800083a:	f7ff ffaf 	bl	800079c <SystemClock_Config>
  MX_GPIO_Init();
 800083e:	f7ff fe47 	bl	80004d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000842:	f7ff fe7f 	bl	8000544 <MX_DMA_Init>
  MX_TIM2_Init();
 8000846:	f7ff fe99 	bl	800057c <MX_TIM2_Init>
  MX_TIM1_Init();
 800084a:	f7ff ff23 	bl	8000694 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800084e:	f7ff ff89 	bl	8000764 <MX_USART1_UART_Init>
  visInit();
 8000852:	f000 f99b 	bl	8000b8c <visInit>
	  visHandle();
 8000856:	f000 f9a9 	bl	8000bac <visHandle>
 800085a:	e7fc      	b.n	8000856 <main+0x22>

0800085c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800085c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085e:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <HAL_MspInit+0x2c>)
 8000860:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000862:	f042 0201 	orr.w	r2, r2, #1
 8000866:	661a      	str	r2, [r3, #96]	; 0x60
 8000868:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800086a:	f002 0201 	and.w	r2, r2, #1
 800086e:	9200      	str	r2, [sp, #0]
 8000870:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000874:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000878:	659a      	str	r2, [r3, #88]	; 0x58
 800087a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800087c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000884:	b002      	add	sp, #8
 8000886:	4770      	bx	lr
 8000888:	40021000 	.word	0x40021000

0800088c <HAL_TIM_OC_MspInit>:
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
  if(htim_oc->Instance==TIM1)
 800088c:	6802      	ldr	r2, [r0, #0]
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <HAL_TIM_OC_MspInit+0x28>)
 8000890:	429a      	cmp	r2, r3
 8000892:	d000      	beq.n	8000896 <HAL_TIM_OC_MspInit+0xa>
 8000894:	4770      	bx	lr
{
 8000896:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000898:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800089c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800089e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80008a2:	661a      	str	r2, [r3, #96]	; 0x60
 80008a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008aa:	9301      	str	r3, [sp, #4]
 80008ac:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80008ae:	b002      	add	sp, #8
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	40012c00 	.word	0x40012c00

080008b8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 80008b8:	6803      	ldr	r3, [r0, #0]
 80008ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008be:	d000      	beq.n	80008c2 <HAL_TIM_Base_MspInit+0xa>
 80008c0:	4770      	bx	lr
{
 80008c2:	b510      	push	{r4, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008c8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80008cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008ce:	f042 0201 	orr.w	r2, r2, #1
 80008d2:	659a      	str	r2, [r3, #88]	; 0x58
 80008d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	9301      	str	r3, [sp, #4]
 80008dc:	9b01      	ldr	r3, [sp, #4]

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 80008de:	4811      	ldr	r0, [pc, #68]	; (8000924 <HAL_TIM_Base_MspInit+0x6c>)
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <HAL_TIM_Base_MspInit+0x70>)
 80008e2:	6003      	str	r3, [r0, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_4;
 80008e4:	2304      	movs	r3, #4
 80008e6:	6043      	str	r3, [r0, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008e8:	2310      	movs	r3, #16
 80008ea:	6083      	str	r3, [r0, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60c3      	str	r3, [r0, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80008f0:	2280      	movs	r2, #128	; 0x80
 80008f2:	6102      	str	r2, [r0, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008f8:	6142      	str	r2, [r0, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008fa:	6183      	str	r3, [r0, #24]
    hdma_tim2_ch3.Init.Mode = DMA_CIRCULAR;
 80008fc:	2320      	movs	r3, #32
 80008fe:	61c3      	str	r3, [r0, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 8000900:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000904:	6203      	str	r3, [r0, #32]

    hdma_tim2_ch3.XferCpltCallback  = dma_transfer_complete_handler;
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <HAL_TIM_Base_MspInit+0x74>)
 8000908:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_tim2_ch3.XferHalfCpltCallback = dma_transfer_half_handler;
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <HAL_TIM_Base_MspInit+0x78>)
 800090c:	6303      	str	r3, [r0, #48]	; 0x30

    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 800090e:	f000 fc17 	bl	8001140 <HAL_DMA_Init>
 8000912:	b920      	cbnz	r0, 800091e <HAL_TIM_Base_MspInit+0x66>
    {
      Error_Handler();
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8000914:	4b03      	ldr	r3, [pc, #12]	; (8000924 <HAL_TIM_Base_MspInit+0x6c>)
 8000916:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000918:	629c      	str	r4, [r3, #40]	; 0x28
  }

}
 800091a:	b002      	add	sp, #8
 800091c:	bd10      	pop	{r4, pc}
      Error_Handler();
 800091e:	f7ff fe2b 	bl	8000578 <Error_Handler>
 8000922:	e7f7      	b.n	8000914 <HAL_TIM_Base_MspInit+0x5c>
 8000924:	200001e0 	.word	0x200001e0
 8000928:	40020008 	.word	0x40020008
 800092c:	08000f01 	.word	0x08000f01
 8000930:	08000eb5 	.word	0x08000eb5

08000934 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000934:	b500      	push	{lr}
 8000936:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	2300      	movs	r3, #0
 800093a:	9303      	str	r3, [sp, #12]
 800093c:	9304      	str	r3, [sp, #16]
 800093e:	9305      	str	r3, [sp, #20]
 8000940:	9306      	str	r3, [sp, #24]
 8000942:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM1)
 8000944:	6803      	ldr	r3, [r0, #0]
 8000946:	4a1b      	ldr	r2, [pc, #108]	; (80009b4 <HAL_TIM_MspPostInit+0x80>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d005      	beq.n	8000958 <HAL_TIM_MspPostInit+0x24>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM2)
 800094c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000950:	d019      	beq.n	8000986 <HAL_TIM_MspPostInit+0x52>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000952:	b009      	add	sp, #36	; 0x24
 8000954:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000958:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <HAL_TIM_MspPostInit+0x84>)
 800095a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800095c:	f042 0201 	orr.w	r2, r2, #1
 8000960:	64da      	str	r2, [r3, #76]	; 0x4c
 8000962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000964:	f003 0301 	and.w	r3, r3, #1
 8000968:	9301      	str	r3, [sp, #4]
 800096a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800096c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000970:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000976:	2301      	movs	r3, #1
 8000978:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	a903      	add	r1, sp, #12
 800097c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000980:	f000 fcf8 	bl	8001374 <HAL_GPIO_Init>
 8000984:	e7e5      	b.n	8000952 <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800098a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800098c:	f042 0201 	orr.w	r2, r2, #1
 8000990:	64da      	str	r2, [r3, #76]	; 0x4c
 8000992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	9302      	str	r3, [sp, #8]
 800099a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800099c:	2304      	movs	r3, #4
 800099e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	2302      	movs	r3, #2
 80009a2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80009a4:	2301      	movs	r3, #1
 80009a6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a8:	a903      	add	r1, sp, #12
 80009aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ae:	f000 fce1 	bl	8001374 <HAL_GPIO_Init>
}
 80009b2:	e7ce      	b.n	8000952 <HAL_TIM_MspPostInit+0x1e>
 80009b4:	40012c00 	.word	0x40012c00
 80009b8:	40021000 	.word	0x40021000

080009bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009bc:	b500      	push	{lr}
 80009be:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	2300      	movs	r3, #0
 80009c2:	9303      	str	r3, [sp, #12]
 80009c4:	9304      	str	r3, [sp, #16]
 80009c6:	9305      	str	r3, [sp, #20]
 80009c8:	9306      	str	r3, [sp, #24]
 80009ca:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 80009cc:	6802      	ldr	r2, [r0, #0]
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <HAL_UART_MspInit+0x64>)
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d002      	beq.n	80009da <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009d4:	b009      	add	sp, #36	; 0x24
 80009d6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 80009da:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80009de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80009e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80009e4:	661a      	str	r2, [r3, #96]	; 0x60
 80009e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80009e8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80009ec:	9201      	str	r2, [sp, #4]
 80009ee:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009f2:	f042 0201 	orr.w	r2, r2, #1
 80009f6:	64da      	str	r2, [r3, #76]	; 0x4c
 80009f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	9302      	str	r3, [sp, #8]
 8000a00:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a02:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a06:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a10:	2307      	movs	r3, #7
 8000a12:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a14:	a903      	add	r1, sp, #12
 8000a16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1a:	f000 fcab 	bl	8001374 <HAL_GPIO_Init>
}
 8000a1e:	e7d9      	b.n	80009d4 <HAL_UART_MspInit+0x18>
 8000a20:	40013800 	.word	0x40013800

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	e7fe      	b.n	8000a24 <NMI_Handler>

08000a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a26:	e7fe      	b.n	8000a26 <HardFault_Handler>

08000a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a28:	e7fe      	b.n	8000a28 <MemManage_Handler>

08000a2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2a:	e7fe      	b.n	8000a2a <BusFault_Handler>

08000a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a2c:	e7fe      	b.n	8000a2c <UsageFault_Handler>

08000a2e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a2e:	4770      	bx	lr

08000a30 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a30:	4770      	bx	lr

08000a32 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a32:	4770      	bx	lr

08000a34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a34:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a36:	f000 faef 	bl	8001018 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a3a:	bd08      	pop	{r3, pc}

08000a3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a3c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8000a3e:	4802      	ldr	r0, [pc, #8]	; (8000a48 <DMA1_Channel1_IRQHandler+0xc>)
 8000a40:	f000 fc35 	bl	80012ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a44:	bd08      	pop	{r3, pc}
 8000a46:	bf00      	nop
 8000a48:	200001e0 	.word	0x200001e0

08000a4c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8000a4c:	b508      	push	{r3, lr}
 8000a4e:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a50:	4a0b      	ldr	r2, [pc, #44]	; (8000a80 <_sbrk+0x34>)
 8000a52:	6812      	ldr	r2, [r2, #0]
 8000a54:	b142      	cbz	r2, 8000a68 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8000a56:	4a0a      	ldr	r2, [pc, #40]	; (8000a80 <_sbrk+0x34>)
 8000a58:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8000a5a:	4403      	add	r3, r0
 8000a5c:	466a      	mov	r2, sp
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d806      	bhi.n	8000a70 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8000a62:	4a07      	ldr	r2, [pc, #28]	; (8000a80 <_sbrk+0x34>)
 8000a64:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8000a66:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8000a68:	4a05      	ldr	r2, [pc, #20]	; (8000a80 <_sbrk+0x34>)
 8000a6a:	4906      	ldr	r1, [pc, #24]	; (8000a84 <_sbrk+0x38>)
 8000a6c:	6011      	str	r1, [r2, #0]
 8000a6e:	e7f2      	b.n	8000a56 <_sbrk+0xa>
		errno = ENOMEM;
 8000a70:	f002 fc42 	bl	80032f8 <__errno>
 8000a74:	230c      	movs	r3, #12
 8000a76:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000a78:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7c:	e7f3      	b.n	8000a66 <_sbrk+0x1a>
 8000a7e:	bf00      	nop
 8000a80:	2000008c 	.word	0x2000008c
 8000a84:	20000418 	.word	0x20000418

08000a88 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a88:	490f      	ldr	r1, [pc, #60]	; (8000ac8 <SystemInit+0x40>)
 8000a8a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000a8e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a96:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <SystemInit+0x44>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	f042 0201 	orr.w	r2, r2, #1
 8000a9e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8000aaa:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8000aae:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000ab0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ab4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000abc:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000abe:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ac0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ac4:	608b      	str	r3, [r1, #8]
#endif
}
 8000ac6:	4770      	bx	lr
 8000ac8:	e000ed00 	.word	0xe000ed00
 8000acc:	40021000 	.word	0x40021000

08000ad0 <visDots>:
	}
}


void visDots(uint8_t *frameBuffer, uint32_t frame_buffer_size, uint32_t random, uint32_t fadeOutFactor)
{
 8000ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ad4:	4604      	mov	r4, r0
 8000ad6:	4688      	mov	r8, r1
 8000ad8:	4617      	mov	r7, r2
 8000ada:	461e      	mov	r6, r3
	uint32_t i;

	for( i = 0; i < frame_buffer_size / 3; i++)
 8000adc:	2500      	movs	r5, #0
 8000ade:	e008      	b.n	8000af2 <visDots+0x22>


		if(frameBuffer[i*3 + 0] > fadeOutFactor)
			frameBuffer[i*3 + 0] -= frameBuffer[i*3 + 0]/fadeOutFactor;
		else
			frameBuffer[i*3 + 0] = 0;
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	54e2      	strb	r2, [r4, r3]
 8000ae4:	e023      	b.n	8000b2e <visDots+0x5e>

		if(frameBuffer[i*3 + 1] > fadeOutFactor)
			frameBuffer[i*3 + 1] -= frameBuffer[i*3 + 1]/fadeOutFactor;
		else
			frameBuffer[i*3 + 1] = 0;
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	5462      	strb	r2, [r4, r1]
 8000aea:	e028      	b.n	8000b3e <visDots+0x6e>

		if(frameBuffer[i*3 + 2] > fadeOutFactor)
			frameBuffer[i*3 + 2] -= frameBuffer[i*3 + 2]/fadeOutFactor;
		else
			frameBuffer[i*3 + 2] = 0;
 8000aec:	2200      	movs	r2, #0
 8000aee:	54e2      	strb	r2, [r4, r3]
	for( i = 0; i < frame_buffer_size / 3; i++)
 8000af0:	3501      	adds	r5, #1
 8000af2:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <visDots+0x84>)
 8000af4:	fba3 2308 	umull	r2, r3, r3, r8
 8000af8:	ebb5 0f53 	cmp.w	r5, r3, lsr #1
 8000afc:	d228      	bcs.n	8000b50 <visDots+0x80>
		if(rand() % random == 0)
 8000afe:	f002 fc2d 	bl	800335c <rand>
 8000b02:	fbb0 f3f7 	udiv	r3, r0, r7
 8000b06:	fb07 0013 	mls	r0, r7, r3, r0
 8000b0a:	b938      	cbnz	r0, 8000b1c <visDots+0x4c>
			frameBuffer[i*3 + 0] = 255;
 8000b0c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000b10:	22ff      	movs	r2, #255	; 0xff
 8000b12:	54e2      	strb	r2, [r4, r3]
			frameBuffer[i*3 + 1] = 255;
 8000b14:	1c59      	adds	r1, r3, #1
 8000b16:	5462      	strb	r2, [r4, r1]
			frameBuffer[i*3 + 2] = 255;
 8000b18:	3302      	adds	r3, #2
 8000b1a:	54e2      	strb	r2, [r4, r3]
		if(frameBuffer[i*3 + 0] > fadeOutFactor)
 8000b1c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000b20:	5ce2      	ldrb	r2, [r4, r3]
 8000b22:	42b2      	cmp	r2, r6
 8000b24:	d9dc      	bls.n	8000ae0 <visDots+0x10>
			frameBuffer[i*3 + 0] -= frameBuffer[i*3 + 0]/fadeOutFactor;
 8000b26:	fbb2 f1f6 	udiv	r1, r2, r6
 8000b2a:	1a52      	subs	r2, r2, r1
 8000b2c:	54e2      	strb	r2, [r4, r3]
		if(frameBuffer[i*3 + 1] > fadeOutFactor)
 8000b2e:	1c59      	adds	r1, r3, #1
 8000b30:	5c62      	ldrb	r2, [r4, r1]
 8000b32:	42b2      	cmp	r2, r6
 8000b34:	d9d7      	bls.n	8000ae6 <visDots+0x16>
			frameBuffer[i*3 + 1] -= frameBuffer[i*3 + 1]/fadeOutFactor;
 8000b36:	fbb2 f0f6 	udiv	r0, r2, r6
 8000b3a:	1a12      	subs	r2, r2, r0
 8000b3c:	5462      	strb	r2, [r4, r1]
		if(frameBuffer[i*3 + 2] > fadeOutFactor)
 8000b3e:	3302      	adds	r3, #2
 8000b40:	5ce2      	ldrb	r2, [r4, r3]
 8000b42:	42b2      	cmp	r2, r6
 8000b44:	d9d2      	bls.n	8000aec <visDots+0x1c>
			frameBuffer[i*3 + 2] -= frameBuffer[i*3 + 2]/fadeOutFactor;
 8000b46:	fbb2 f1f6 	udiv	r1, r2, r6
 8000b4a:	1a52      	subs	r2, r2, r1
 8000b4c:	54e2      	strb	r2, [r4, r3]
 8000b4e:	e7cf      	b.n	8000af0 <visDots+0x20>
	}
}
 8000b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b54:	aaaaaaab 	.word	0xaaaaaaab

08000b58 <visHandle2>:



void visHandle2()
{
 8000b58:	b508      	push	{r3, lr}
	static uint32_t timestamp;



	if(HAL_GetTick() - timestamp > 10)
 8000b5a:	f000 fa69 	bl	8001030 <HAL_GetTick>
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <visHandle2+0x2c>)
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	1ac0      	subs	r0, r0, r3
 8000b64:	280a      	cmp	r0, #10
 8000b66:	d800      	bhi.n	8000b6a <visHandle2+0x12>
				visDots(frameBuffer, sizeof(frameBuffer), 50, 40);
				break;

		}*/
	}
}
 8000b68:	bd08      	pop	{r3, pc}
		timestamp = HAL_GetTick();
 8000b6a:	f000 fa61 	bl	8001030 <HAL_GetTick>
 8000b6e:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <visHandle2+0x2c>)
 8000b70:	6058      	str	r0, [r3, #4]
		visDots(frameBuffer, sizeof(frameBuffer), 50, 40);
 8000b72:	2328      	movs	r3, #40	; 0x28
 8000b74:	2232      	movs	r2, #50	; 0x32
 8000b76:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8000b7a:	4803      	ldr	r0, [pc, #12]	; (8000b88 <visHandle2+0x30>)
 8000b7c:	f7ff ffa8 	bl	8000ad0 <visDots>
}
 8000b80:	e7f2      	b.n	8000b68 <visHandle2+0x10>
 8000b82:	bf00      	nop
 8000b84:	20000094 	.word	0x20000094
 8000b88:	2000022c 	.word	0x2000022c

08000b8c <visInit>:


void visInit()
{
 8000b8c:	b508      	push	{r3, lr}
	// Set output channel/pin, GPIO_PIN_0 = 0, for GPIO_PIN_5 = 5 - this has to correspond to WS2812B_PINS
	ws2812b.item[0].channel = 3;
 8000b8e:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <visInit+0x18>)
 8000b90:	2203      	movs	r2, #3
 8000b92:	731a      	strb	r2, [r3, #12]
	// Your RGB framebuffer
	ws2812b.item[0].frame_buffer_pointer = frameBuffer;
 8000b94:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <visInit+0x1c>)
 8000b96:	601a      	str	r2, [r3, #0]
	// RAW size of framebuffer
	ws2812b.item[0].frame_buffer_size = sizeof(frameBuffer);
 8000b98:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8000b9c:	605a      	str	r2, [r3, #4]
	// If you need more parallel LED strips, increase the WS2812_BUFFER_COUNT value
	//ws2812b.item[1].channel = 1;
	//ws2812b.item[1].frame_buffer_pointer = frameBuffer2;
	//ws2812b.item[1].frame_buffer_size = sizeof(frameBuffer2);

	ws2812b_init();
 8000b9e:	f000 f9f1 	bl	8000f84 <ws2812b_init>
}
 8000ba2:	bd08      	pop	{r3, pc}
 8000ba4:	20000128 	.word	0x20000128
 8000ba8:	2000022c 	.word	0x2000022c

08000bac <visHandle>:


void visHandle()
{
 8000bac:	b508      	push	{r3, lr}

	if(ws2812b.transfer_complete)
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <visHandle+0x1c>)
 8000bb0:	7c1b      	ldrb	r3, [r3, #16]
 8000bb2:	b903      	cbnz	r3, 8000bb6 <visHandle+0xa>

		// Signal that buffer is changed and transfer new data
		ws2812b.start_transfer = 1;
		ws2812b_handle();
	}
}
 8000bb4:	bd08      	pop	{r3, pc}
		visHandle2();
 8000bb6:	f7ff ffcf 	bl	8000b58 <visHandle2>
		ws2812b.start_transfer = 1;
 8000bba:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <visHandle+0x1c>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	745a      	strb	r2, [r3, #17]
		ws2812b_handle();
 8000bc0:	f000 f9e6 	bl	8000f90 <ws2812b_handle>
}
 8000bc4:	e7f6      	b.n	8000bb4 <visHandle+0x8>
 8000bc6:	bf00      	nop
 8000bc8:	20000128 	.word	0x20000128

08000bcc <ws2812b_set_pixel>:
}



static void ws2812b_set_pixel(uint8_t row, uint16_t column, uint8_t red, uint8_t green, uint8_t blue)
{
 8000bcc:	b470      	push	{r4, r5, r6}

	// Apply gamma
	red = gammaTable[red];
 8000bce:	4d75      	ldr	r5, [pc, #468]	; (8000da4 <ws2812b_set_pixel+0x1d8>)
 8000bd0:	5ca8      	ldrb	r0, [r5, r2]
	green = gammaTable[green];
 8000bd2:	5cec      	ldrb	r4, [r5, r3]
	blue = gammaTable[blue];
 8000bd4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8000bd8:	5cea      	ldrb	r2, [r5, r3]

	uint32_t calculated_column = (column * 24);
 8000bda:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000bde:	00cd      	lsls	r5, r1, #3
		dma_bit_buffer[(calculated_column+8+7)] = (((red)<<7) & 0x80) ? compare_pulse_logic_1 : compare_pulse_logic_0;
		dma_bit_buffer[(calculated_column+16+7)] = (((blue)<<7) & 0x80) ? compare_pulse_logic_1 : compare_pulse_logic_0;

#elif defined(SETPIX_3)

		uint8_t *bit_buffer_offset = &dma_bit_buffer[calculated_column];
 8000be0:	4b71      	ldr	r3, [pc, #452]	; (8000da8 <ws2812b_set_pixel+0x1dc>)
 8000be2:	442b      	add	r3, r5

		// write new data for pixel
		*bit_buffer_offset++ = (green & 0x80) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000be4:	f014 0f80 	tst.w	r4, #128	; 0x80
 8000be8:	f040 8094 	bne.w	8000d14 <ws2812b_set_pixel+0x148>
 8000bec:	496f      	ldr	r1, [pc, #444]	; (8000dac <ws2812b_set_pixel+0x1e0>)
 8000bee:	780e      	ldrb	r6, [r1, #0]
 8000bf0:	496d      	ldr	r1, [pc, #436]	; (8000da8 <ws2812b_set_pixel+0x1dc>)
 8000bf2:	554e      	strb	r6, [r1, r5]
		*bit_buffer_offset++ = (green & 0x40) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000bf4:	f014 0f40 	tst.w	r4, #64	; 0x40
 8000bf8:	f000 808f 	beq.w	8000d1a <ws2812b_set_pixel+0x14e>
 8000bfc:	496c      	ldr	r1, [pc, #432]	; (8000db0 <ws2812b_set_pixel+0x1e4>)
 8000bfe:	7809      	ldrb	r1, [r1, #0]
 8000c00:	7059      	strb	r1, [r3, #1]
		*bit_buffer_offset++ = (green & 0x20) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000c02:	f014 0f20 	tst.w	r4, #32
 8000c06:	f000 808b 	beq.w	8000d20 <ws2812b_set_pixel+0x154>
 8000c0a:	4969      	ldr	r1, [pc, #420]	; (8000db0 <ws2812b_set_pixel+0x1e4>)
 8000c0c:	7809      	ldrb	r1, [r1, #0]
 8000c0e:	7099      	strb	r1, [r3, #2]
		*bit_buffer_offset++ = (green & 0x10) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000c10:	f014 0f10 	tst.w	r4, #16
 8000c14:	f000 8087 	beq.w	8000d26 <ws2812b_set_pixel+0x15a>
 8000c18:	4965      	ldr	r1, [pc, #404]	; (8000db0 <ws2812b_set_pixel+0x1e4>)
 8000c1a:	7809      	ldrb	r1, [r1, #0]
 8000c1c:	70d9      	strb	r1, [r3, #3]
		*bit_buffer_offset++ = (green & 0x08) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000c1e:	f014 0f08 	tst.w	r4, #8
 8000c22:	f000 8083 	beq.w	8000d2c <ws2812b_set_pixel+0x160>
 8000c26:	4962      	ldr	r1, [pc, #392]	; (8000db0 <ws2812b_set_pixel+0x1e4>)
 8000c28:	7809      	ldrb	r1, [r1, #0]
 8000c2a:	7119      	strb	r1, [r3, #4]
		*bit_buffer_offset++ = (green & 0x04) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000c2c:	f014 0f04 	tst.w	r4, #4
 8000c30:	d07f      	beq.n	8000d32 <ws2812b_set_pixel+0x166>
 8000c32:	495f      	ldr	r1, [pc, #380]	; (8000db0 <ws2812b_set_pixel+0x1e4>)
 8000c34:	7809      	ldrb	r1, [r1, #0]
 8000c36:	7159      	strb	r1, [r3, #5]
		*bit_buffer_offset++ = (green & 0x02) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000c38:	f014 0f02 	tst.w	r4, #2
 8000c3c:	d07c      	beq.n	8000d38 <ws2812b_set_pixel+0x16c>
 8000c3e:	495c      	ldr	r1, [pc, #368]	; (8000db0 <ws2812b_set_pixel+0x1e4>)
 8000c40:	7809      	ldrb	r1, [r1, #0]
 8000c42:	7199      	strb	r1, [r3, #6]
		*bit_buffer_offset++ = (green & 0x01) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000c44:	f014 0f01 	tst.w	r4, #1
 8000c48:	d079      	beq.n	8000d3e <ws2812b_set_pixel+0x172>
 8000c4a:	4959      	ldr	r1, [pc, #356]	; (8000db0 <ws2812b_set_pixel+0x1e4>)
 8000c4c:	7809      	ldrb	r1, [r1, #0]
 8000c4e:	71d9      	strb	r1, [r3, #7]

		*bit_buffer_offset++ = (red & 0x80) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000c50:	f010 0f80 	tst.w	r0, #128	; 0x80
 8000c54:	d176      	bne.n	8000d44 <ws2812b_set_pixel+0x178>
 8000c56:	4955      	ldr	r1, [pc, #340]	; (8000dac <ws2812b_set_pixel+0x1e0>)
 8000c58:	7809      	ldrb	r1, [r1, #0]
 8000c5a:	7219      	strb	r1, [r3, #8]
		*bit_buffer_offset++ = (red & 0x40) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000c5c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000c60:	d073      	beq.n	8000d4a <ws2812b_set_pixel+0x17e>
 8000c62:	4953      	ldr	r1, [pc, #332]	; (8000db0 <ws2812b_set_pixel+0x1e4>)
 8000c64:	7809      	ldrb	r1, [r1, #0]
 8000c66:	7259      	strb	r1, [r3, #9]
		*bit_buffer_offset++ = (red & 0x20) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000c68:	f010 0f20 	tst.w	r0, #32
 8000c6c:	d070      	beq.n	8000d50 <ws2812b_set_pixel+0x184>
 8000c6e:	4950      	ldr	r1, [pc, #320]	; (8000db0 <ws2812b_set_pixel+0x1e4>)
 8000c70:	7809      	ldrb	r1, [r1, #0]
 8000c72:	7299      	strb	r1, [r3, #10]
		*bit_buffer_offset++ = (red & 0x10) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000c74:	f010 0f10 	tst.w	r0, #16
 8000c78:	d06d      	beq.n	8000d56 <ws2812b_set_pixel+0x18a>
 8000c7a:	494d      	ldr	r1, [pc, #308]	; (8000db0 <ws2812b_set_pixel+0x1e4>)
 8000c7c:	7809      	ldrb	r1, [r1, #0]
 8000c7e:	72d9      	strb	r1, [r3, #11]
		*bit_buffer_offset++ = (red & 0x08) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000c80:	f010 0f08 	tst.w	r0, #8
 8000c84:	d06a      	beq.n	8000d5c <ws2812b_set_pixel+0x190>
 8000c86:	494a      	ldr	r1, [pc, #296]	; (8000db0 <ws2812b_set_pixel+0x1e4>)
 8000c88:	7809      	ldrb	r1, [r1, #0]
 8000c8a:	7319      	strb	r1, [r3, #12]
		*bit_buffer_offset++ = (red & 0x04) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000c8c:	f010 0f04 	tst.w	r0, #4
 8000c90:	d067      	beq.n	8000d62 <ws2812b_set_pixel+0x196>
 8000c92:	4947      	ldr	r1, [pc, #284]	; (8000db0 <ws2812b_set_pixel+0x1e4>)
 8000c94:	7809      	ldrb	r1, [r1, #0]
 8000c96:	7359      	strb	r1, [r3, #13]
		*bit_buffer_offset++ = (red & 0x02) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000c98:	f010 0f02 	tst.w	r0, #2
 8000c9c:	d064      	beq.n	8000d68 <ws2812b_set_pixel+0x19c>
 8000c9e:	4944      	ldr	r1, [pc, #272]	; (8000db0 <ws2812b_set_pixel+0x1e4>)
 8000ca0:	7809      	ldrb	r1, [r1, #0]
 8000ca2:	7399      	strb	r1, [r3, #14]
		*bit_buffer_offset++ = (red & 0x01) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000ca4:	f010 0f01 	tst.w	r0, #1
 8000ca8:	d061      	beq.n	8000d6e <ws2812b_set_pixel+0x1a2>
 8000caa:	4941      	ldr	r1, [pc, #260]	; (8000db0 <ws2812b_set_pixel+0x1e4>)
 8000cac:	7809      	ldrb	r1, [r1, #0]
 8000cae:	73d9      	strb	r1, [r3, #15]

		*bit_buffer_offset++ = (blue & 0x80) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000cb0:	f012 0f80 	tst.w	r2, #128	; 0x80
 8000cb4:	d15e      	bne.n	8000d74 <ws2812b_set_pixel+0x1a8>
 8000cb6:	493d      	ldr	r1, [pc, #244]	; (8000dac <ws2812b_set_pixel+0x1e0>)
 8000cb8:	7809      	ldrb	r1, [r1, #0]
 8000cba:	7419      	strb	r1, [r3, #16]
		*bit_buffer_offset++ = (blue & 0x40) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000cbc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8000cc0:	d05b      	beq.n	8000d7a <ws2812b_set_pixel+0x1ae>
 8000cc2:	493b      	ldr	r1, [pc, #236]	; (8000db0 <ws2812b_set_pixel+0x1e4>)
 8000cc4:	7809      	ldrb	r1, [r1, #0]
 8000cc6:	7459      	strb	r1, [r3, #17]
		*bit_buffer_offset++ = (blue & 0x20) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000cc8:	f012 0f20 	tst.w	r2, #32
 8000ccc:	d058      	beq.n	8000d80 <ws2812b_set_pixel+0x1b4>
 8000cce:	4938      	ldr	r1, [pc, #224]	; (8000db0 <ws2812b_set_pixel+0x1e4>)
 8000cd0:	7809      	ldrb	r1, [r1, #0]
 8000cd2:	7499      	strb	r1, [r3, #18]
		*bit_buffer_offset++ = (blue & 0x10) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000cd4:	f012 0f10 	tst.w	r2, #16
 8000cd8:	d055      	beq.n	8000d86 <ws2812b_set_pixel+0x1ba>
 8000cda:	4935      	ldr	r1, [pc, #212]	; (8000db0 <ws2812b_set_pixel+0x1e4>)
 8000cdc:	7809      	ldrb	r1, [r1, #0]
 8000cde:	74d9      	strb	r1, [r3, #19]
		*bit_buffer_offset++ = (blue & 0x08) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000ce0:	f012 0f08 	tst.w	r2, #8
 8000ce4:	d052      	beq.n	8000d8c <ws2812b_set_pixel+0x1c0>
 8000ce6:	4932      	ldr	r1, [pc, #200]	; (8000db0 <ws2812b_set_pixel+0x1e4>)
 8000ce8:	7809      	ldrb	r1, [r1, #0]
 8000cea:	7519      	strb	r1, [r3, #20]
		*bit_buffer_offset++ = (blue & 0x04) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000cec:	f012 0f04 	tst.w	r2, #4
 8000cf0:	d04f      	beq.n	8000d92 <ws2812b_set_pixel+0x1c6>
 8000cf2:	492f      	ldr	r1, [pc, #188]	; (8000db0 <ws2812b_set_pixel+0x1e4>)
 8000cf4:	7809      	ldrb	r1, [r1, #0]
 8000cf6:	7559      	strb	r1, [r3, #21]
		*bit_buffer_offset++ = (blue & 0x02) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000cf8:	f012 0f02 	tst.w	r2, #2
 8000cfc:	d04c      	beq.n	8000d98 <ws2812b_set_pixel+0x1cc>
 8000cfe:	492c      	ldr	r1, [pc, #176]	; (8000db0 <ws2812b_set_pixel+0x1e4>)
 8000d00:	7809      	ldrb	r1, [r1, #0]
 8000d02:	7599      	strb	r1, [r3, #22]
		*bit_buffer_offset++ = (blue & 0x01) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d04:	f012 0f01 	tst.w	r2, #1
 8000d08:	d149      	bne.n	8000d9e <ws2812b_set_pixel+0x1d2>
 8000d0a:	4a28      	ldr	r2, [pc, #160]	; (8000dac <ws2812b_set_pixel+0x1e0>)
 8000d0c:	7812      	ldrb	r2, [r2, #0]
 8000d0e:	75da      	strb	r2, [r3, #23]

#endif
}
 8000d10:	bc70      	pop	{r4, r5, r6}
 8000d12:	4770      	bx	lr
		*bit_buffer_offset++ = (green & 0x80) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d14:	4926      	ldr	r1, [pc, #152]	; (8000db0 <ws2812b_set_pixel+0x1e4>)
 8000d16:	780e      	ldrb	r6, [r1, #0]
 8000d18:	e76a      	b.n	8000bf0 <ws2812b_set_pixel+0x24>
		*bit_buffer_offset++ = (green & 0x40) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d1a:	4924      	ldr	r1, [pc, #144]	; (8000dac <ws2812b_set_pixel+0x1e0>)
 8000d1c:	7809      	ldrb	r1, [r1, #0]
 8000d1e:	e76f      	b.n	8000c00 <ws2812b_set_pixel+0x34>
		*bit_buffer_offset++ = (green & 0x20) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d20:	4922      	ldr	r1, [pc, #136]	; (8000dac <ws2812b_set_pixel+0x1e0>)
 8000d22:	7809      	ldrb	r1, [r1, #0]
 8000d24:	e773      	b.n	8000c0e <ws2812b_set_pixel+0x42>
		*bit_buffer_offset++ = (green & 0x10) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d26:	4921      	ldr	r1, [pc, #132]	; (8000dac <ws2812b_set_pixel+0x1e0>)
 8000d28:	7809      	ldrb	r1, [r1, #0]
 8000d2a:	e777      	b.n	8000c1c <ws2812b_set_pixel+0x50>
		*bit_buffer_offset++ = (green & 0x08) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d2c:	491f      	ldr	r1, [pc, #124]	; (8000dac <ws2812b_set_pixel+0x1e0>)
 8000d2e:	7809      	ldrb	r1, [r1, #0]
 8000d30:	e77b      	b.n	8000c2a <ws2812b_set_pixel+0x5e>
		*bit_buffer_offset++ = (green & 0x04) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d32:	491e      	ldr	r1, [pc, #120]	; (8000dac <ws2812b_set_pixel+0x1e0>)
 8000d34:	7809      	ldrb	r1, [r1, #0]
 8000d36:	e77e      	b.n	8000c36 <ws2812b_set_pixel+0x6a>
		*bit_buffer_offset++ = (green & 0x02) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d38:	491c      	ldr	r1, [pc, #112]	; (8000dac <ws2812b_set_pixel+0x1e0>)
 8000d3a:	7809      	ldrb	r1, [r1, #0]
 8000d3c:	e781      	b.n	8000c42 <ws2812b_set_pixel+0x76>
		*bit_buffer_offset++ = (green & 0x01) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d3e:	491b      	ldr	r1, [pc, #108]	; (8000dac <ws2812b_set_pixel+0x1e0>)
 8000d40:	7809      	ldrb	r1, [r1, #0]
 8000d42:	e784      	b.n	8000c4e <ws2812b_set_pixel+0x82>
		*bit_buffer_offset++ = (red & 0x80) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d44:	491a      	ldr	r1, [pc, #104]	; (8000db0 <ws2812b_set_pixel+0x1e4>)
 8000d46:	7809      	ldrb	r1, [r1, #0]
 8000d48:	e787      	b.n	8000c5a <ws2812b_set_pixel+0x8e>
		*bit_buffer_offset++ = (red & 0x40) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d4a:	4918      	ldr	r1, [pc, #96]	; (8000dac <ws2812b_set_pixel+0x1e0>)
 8000d4c:	7809      	ldrb	r1, [r1, #0]
 8000d4e:	e78a      	b.n	8000c66 <ws2812b_set_pixel+0x9a>
		*bit_buffer_offset++ = (red & 0x20) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d50:	4916      	ldr	r1, [pc, #88]	; (8000dac <ws2812b_set_pixel+0x1e0>)
 8000d52:	7809      	ldrb	r1, [r1, #0]
 8000d54:	e78d      	b.n	8000c72 <ws2812b_set_pixel+0xa6>
		*bit_buffer_offset++ = (red & 0x10) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d56:	4915      	ldr	r1, [pc, #84]	; (8000dac <ws2812b_set_pixel+0x1e0>)
 8000d58:	7809      	ldrb	r1, [r1, #0]
 8000d5a:	e790      	b.n	8000c7e <ws2812b_set_pixel+0xb2>
		*bit_buffer_offset++ = (red & 0x08) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d5c:	4913      	ldr	r1, [pc, #76]	; (8000dac <ws2812b_set_pixel+0x1e0>)
 8000d5e:	7809      	ldrb	r1, [r1, #0]
 8000d60:	e793      	b.n	8000c8a <ws2812b_set_pixel+0xbe>
		*bit_buffer_offset++ = (red & 0x04) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d62:	4912      	ldr	r1, [pc, #72]	; (8000dac <ws2812b_set_pixel+0x1e0>)
 8000d64:	7809      	ldrb	r1, [r1, #0]
 8000d66:	e796      	b.n	8000c96 <ws2812b_set_pixel+0xca>
		*bit_buffer_offset++ = (red & 0x02) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d68:	4910      	ldr	r1, [pc, #64]	; (8000dac <ws2812b_set_pixel+0x1e0>)
 8000d6a:	7809      	ldrb	r1, [r1, #0]
 8000d6c:	e799      	b.n	8000ca2 <ws2812b_set_pixel+0xd6>
		*bit_buffer_offset++ = (red & 0x01) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d6e:	490f      	ldr	r1, [pc, #60]	; (8000dac <ws2812b_set_pixel+0x1e0>)
 8000d70:	7809      	ldrb	r1, [r1, #0]
 8000d72:	e79c      	b.n	8000cae <ws2812b_set_pixel+0xe2>
		*bit_buffer_offset++ = (blue & 0x80) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d74:	490e      	ldr	r1, [pc, #56]	; (8000db0 <ws2812b_set_pixel+0x1e4>)
 8000d76:	7809      	ldrb	r1, [r1, #0]
 8000d78:	e79f      	b.n	8000cba <ws2812b_set_pixel+0xee>
		*bit_buffer_offset++ = (blue & 0x40) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d7a:	490c      	ldr	r1, [pc, #48]	; (8000dac <ws2812b_set_pixel+0x1e0>)
 8000d7c:	7809      	ldrb	r1, [r1, #0]
 8000d7e:	e7a2      	b.n	8000cc6 <ws2812b_set_pixel+0xfa>
		*bit_buffer_offset++ = (blue & 0x20) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d80:	490a      	ldr	r1, [pc, #40]	; (8000dac <ws2812b_set_pixel+0x1e0>)
 8000d82:	7809      	ldrb	r1, [r1, #0]
 8000d84:	e7a5      	b.n	8000cd2 <ws2812b_set_pixel+0x106>
		*bit_buffer_offset++ = (blue & 0x10) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d86:	4909      	ldr	r1, [pc, #36]	; (8000dac <ws2812b_set_pixel+0x1e0>)
 8000d88:	7809      	ldrb	r1, [r1, #0]
 8000d8a:	e7a8      	b.n	8000cde <ws2812b_set_pixel+0x112>
		*bit_buffer_offset++ = (blue & 0x08) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d8c:	4907      	ldr	r1, [pc, #28]	; (8000dac <ws2812b_set_pixel+0x1e0>)
 8000d8e:	7809      	ldrb	r1, [r1, #0]
 8000d90:	e7ab      	b.n	8000cea <ws2812b_set_pixel+0x11e>
		*bit_buffer_offset++ = (blue & 0x04) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d92:	4906      	ldr	r1, [pc, #24]	; (8000dac <ws2812b_set_pixel+0x1e0>)
 8000d94:	7809      	ldrb	r1, [r1, #0]
 8000d96:	e7ae      	b.n	8000cf6 <ws2812b_set_pixel+0x12a>
		*bit_buffer_offset++ = (blue & 0x02) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d98:	4904      	ldr	r1, [pc, #16]	; (8000dac <ws2812b_set_pixel+0x1e0>)
 8000d9a:	7809      	ldrb	r1, [r1, #0]
 8000d9c:	e7b1      	b.n	8000d02 <ws2812b_set_pixel+0x136>
		*bit_buffer_offset++ = (blue & 0x01) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d9e:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <ws2812b_set_pixel+0x1e4>)
 8000da0:	7812      	ldrb	r2, [r2, #0]
 8000da2:	e7b4      	b.n	8000d0e <ws2812b_set_pixel+0x142>
 8000da4:	08003510 	.word	0x08003510
 8000da8:	200003dc 	.word	0x200003dc
 8000dac:	200000a4 	.word	0x200000a4
 8000db0:	20000144 	.word	0x20000144

08000db4 <load_next_framebuffer_data>:
{
 8000db4:	b570      	push	{r4, r5, r6, lr}
 8000db6:	b082      	sub	sp, #8
	uint32_t r = buffer_item->frame_buffer_pointer[buffer_item->frame_buffer_counter++];
 8000db8:	6805      	ldr	r5, [r0, #0]
 8000dba:	6882      	ldr	r2, [r0, #8]
 8000dbc:	1c53      	adds	r3, r2, #1
 8000dbe:	6083      	str	r3, [r0, #8]
 8000dc0:	5caa      	ldrb	r2, [r5, r2]
	uint32_t g = buffer_item->frame_buffer_pointer[buffer_item->frame_buffer_counter++];
 8000dc2:	1c5c      	adds	r4, r3, #1
 8000dc4:	6084      	str	r4, [r0, #8]
 8000dc6:	5ceb      	ldrb	r3, [r5, r3]
	uint32_t b = buffer_item->frame_buffer_pointer[buffer_item->frame_buffer_counter++];
 8000dc8:	1c66      	adds	r6, r4, #1
 8000dca:	6086      	str	r6, [r0, #8]
 8000dcc:	5d2c      	ldrb	r4, [r5, r4]
	if(buffer_item->frame_buffer_counter == buffer_item->frame_buffer_size)
 8000dce:	6845      	ldr	r5, [r0, #4]
 8000dd0:	42ae      	cmp	r6, r5
 8000dd2:	d006      	beq.n	8000de2 <load_next_framebuffer_data+0x2e>
	ws2812b_set_pixel(buffer_item->channel, row, r, g, b);
 8000dd4:	7b00      	ldrb	r0, [r0, #12]
 8000dd6:	9400      	str	r4, [sp, #0]
 8000dd8:	b289      	uxth	r1, r1
 8000dda:	f7ff fef7 	bl	8000bcc <ws2812b_set_pixel>
}
 8000dde:	b002      	add	sp, #8
 8000de0:	bd70      	pop	{r4, r5, r6, pc}
		buffer_item->frame_buffer_counter = 0;
 8000de2:	2500      	movs	r5, #0
 8000de4:	6085      	str	r5, [r0, #8]
 8000de6:	e7f5      	b.n	8000dd4 <load_next_framebuffer_data+0x20>

08000de8 <ws2812b_send>:
{
 8000de8:	b538      	push	{r3, r4, r5, lr}
	ws2812b.transfer_complete = 0;
 8000dea:	2400      	movs	r4, #0
 8000dec:	4b28      	ldr	r3, [pc, #160]	; (8000e90 <ws2812b_send+0xa8>)
 8000dee:	741c      	strb	r4, [r3, #16]
	for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8000df0:	2c00      	cmp	r4, #0
 8000df2:	d03a      	beq.n	8000e6a <ws2812b_send+0x82>
	HAL_TIM_Base_Stop(&htim2);
 8000df4:	4c27      	ldr	r4, [pc, #156]	; (8000e94 <ws2812b_send+0xac>)
 8000df6:	4620      	mov	r0, r4
 8000df8:	f001 fbe3 	bl	80025c2 <HAL_TIM_Base_Stop>
	(&htim2)->Instance->CR1 &= ~((0x1U << (0U)));
 8000dfc:	6822      	ldr	r2, [r4, #0]
 8000dfe:	6813      	ldr	r3, [r2, #0]
 8000e00:	f023 0301 	bic.w	r3, r3, #1
 8000e04:	6013      	str	r3, [r2, #0]
	__HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch3, DMA_FLAG_TC2 | DMA_FLAG_HT2 | DMA_FLAG_TE2);
 8000e06:	4b24      	ldr	r3, [pc, #144]	; (8000e98 <ws2812b_send+0xb0>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	4b24      	ldr	r3, [pc, #144]	; (8000e9c <ws2812b_send+0xb4>)
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d83a      	bhi.n	8000e86 <ws2812b_send+0x9e>
 8000e10:	4b23      	ldr	r3, [pc, #140]	; (8000ea0 <ws2812b_send+0xb8>)
 8000e12:	21e0      	movs	r1, #224	; 0xe0
 8000e14:	6059      	str	r1, [r3, #4]
	hdma_tim2_ch3.Instance->CNDTR = BUFFER_SIZE;
 8000e16:	2330      	movs	r3, #48	; 0x30
 8000e18:	6053      	str	r3, [r2, #4]
	__HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE | TIM_FLAG_CC1 | TIM_FLAG_CC2 | TIM_FLAG_CC3 | TIM_FLAG_CC4);
 8000e1a:	4c1e      	ldr	r4, [pc, #120]	; (8000e94 <ws2812b_send+0xac>)
 8000e1c:	6821      	ldr	r1, [r4, #0]
 8000e1e:	f06f 001f 	mvn.w	r0, #31
 8000e22:	6108      	str	r0, [r1, #16]
	__HAL_DMA_ENABLE(&hdma_tim2_ch3);
 8000e24:	6811      	ldr	r1, [r2, #0]
 8000e26:	f041 0101 	orr.w	r1, r1, #1
 8000e2a:	6011      	str	r1, [r2, #0]
	HAL_DMA_Start_IT(&hdma_tim2_ch3, (uint32_t)dma_bit_buffer, (uint32_t)&TIM2->CCR3, BUFFER_SIZE);
 8000e2c:	4a1d      	ldr	r2, [pc, #116]	; (8000ea4 <ws2812b_send+0xbc>)
 8000e2e:	491e      	ldr	r1, [pc, #120]	; (8000ea8 <ws2812b_send+0xc0>)
 8000e30:	4819      	ldr	r0, [pc, #100]	; (8000e98 <ws2812b_send+0xb0>)
 8000e32:	f000 fa01 	bl	8001238 <HAL_DMA_Start_IT>
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_UPDATE);
 8000e36:	6823      	ldr	r3, [r4, #0]
 8000e38:	68da      	ldr	r2, [r3, #12]
 8000e3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e3e:	60da      	str	r2, [r3, #12]
	TIM2->CNT = timer_period;
 8000e40:	4a1a      	ldr	r2, [pc, #104]	; (8000eac <ws2812b_send+0xc4>)
 8000e42:	6811      	ldr	r1, [r2, #0]
 8000e44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e48:	6251      	str	r1, [r2, #36]	; 0x24
	TIM2->CCR1 = 0;
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	6351      	str	r1, [r2, #52]	; 0x34
	(&htim2)->Instance->CCMR2 |= (1 << 5);
 8000e4e:	69da      	ldr	r2, [r3, #28]
 8000e50:	f042 0220 	orr.w	r2, r2, #32
 8000e54:	61da      	str	r2, [r3, #28]
	__HAL_DBGMCU_FREEZE_TIM2();
 8000e56:	4916      	ldr	r1, [pc, #88]	; (8000eb0 <ws2812b_send+0xc8>)
 8000e58:	688a      	ldr	r2, [r1, #8]
 8000e5a:	f042 0201 	orr.w	r2, r2, #1
 8000e5e:	608a      	str	r2, [r1, #8]
	__HAL_TIM_ENABLE(&htim2);
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	f042 0201 	orr.w	r2, r2, #1
 8000e66:	601a      	str	r2, [r3, #0]
}
 8000e68:	bd38      	pop	{r3, r4, r5, pc}
		ws2812b.item[i].frame_buffer_counter = 0;
 8000e6a:	4d09      	ldr	r5, [pc, #36]	; (8000e90 <ws2812b_send+0xa8>)
 8000e6c:	eb05 1504 	add.w	r5, r5, r4, lsl #4
 8000e70:	2100      	movs	r1, #0
 8000e72:	60a9      	str	r1, [r5, #8]
		load_next_framebuffer_data(&ws2812b.item[i], 0); // ROW 0
 8000e74:	4628      	mov	r0, r5
 8000e76:	f7ff ff9d 	bl	8000db4 <load_next_framebuffer_data>
		load_next_framebuffer_data(&ws2812b.item[i], 1); // ROW 0
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	f7ff ff99 	bl	8000db4 <load_next_framebuffer_data>
	for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8000e82:	3401      	adds	r4, #1
 8000e84:	e7b4      	b.n	8000df0 <ws2812b_send+0x8>
	__HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch3, DMA_FLAG_TC2 | DMA_FLAG_HT2 | DMA_FLAG_TE2);
 8000e86:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8000e8a:	21e0      	movs	r1, #224	; 0xe0
 8000e8c:	6059      	str	r1, [r3, #4]
 8000e8e:	e7c2      	b.n	8000e16 <ws2812b_send+0x2e>
 8000e90:	20000128 	.word	0x20000128
 8000e94:	20000194 	.word	0x20000194
 8000e98:	200001e0 	.word	0x200001e0
 8000e9c:	40020080 	.word	0x40020080
 8000ea0:	40020000 	.word	0x40020000
 8000ea4:	4000003c 	.word	0x4000003c
 8000ea8:	200003dc 	.word	0x200003dc
 8000eac:	20000228 	.word	0x20000228
 8000eb0:	e0042000 	.word	0xe0042000

08000eb4 <dma_transfer_half_handler>:
{
 8000eb4:	b510      	push	{r4, lr}
 8000eb6:	b082      	sub	sp, #8
		LED4_PORT->BSRR = LED4_PIN;
 8000eb8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ebc:	2202      	movs	r2, #2
 8000ebe:	619a      	str	r2, [r3, #24]
	if(ws2812b.repeat_counter != (WS2812B_NUMBER_OF_LEDS / 2 - 1))
 8000ec0:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <dma_transfer_half_handler+0x48>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	2b47      	cmp	r3, #71	; 0x47
 8000ec6:	d010      	beq.n	8000eea <dma_transfer_half_handler+0x36>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8000ec8:	2400      	movs	r4, #0
 8000eca:	e006      	b.n	8000eda <dma_transfer_half_handler+0x26>
			load_next_framebuffer_data(&ws2812b.item[i], 0);
 8000ecc:	2100      	movs	r1, #0
 8000ece:	480b      	ldr	r0, [pc, #44]	; (8000efc <dma_transfer_half_handler+0x48>)
 8000ed0:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8000ed4:	f7ff ff6e 	bl	8000db4 <load_next_framebuffer_data>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8000ed8:	3401      	adds	r4, #1
 8000eda:	2c00      	cmp	r4, #0
 8000edc:	d0f6      	beq.n	8000ecc <dma_transfer_half_handler+0x18>
		LED4_PORT->BRR = LED4_PIN;
 8000ede:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ee6:	b002      	add	sp, #8
 8000ee8:	bd10      	pop	{r4, pc}
		ws2812b_set_pixel(0, 0, 0, 0, 0);
 8000eea:	2000      	movs	r0, #0
 8000eec:	9000      	str	r0, [sp, #0]
 8000eee:	4603      	mov	r3, r0
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	4601      	mov	r1, r0
 8000ef4:	f7ff fe6a 	bl	8000bcc <ws2812b_set_pixel>
 8000ef8:	e7f1      	b.n	8000ede <dma_transfer_half_handler+0x2a>
 8000efa:	bf00      	nop
 8000efc:	20000128 	.word	0x20000128

08000f00 <dma_transfer_complete_handler>:
		LED5_PORT->BSRR = LED5_PIN;
 8000f00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f04:	2202      	movs	r2, #2
 8000f06:	619a      	str	r2, [r3, #24]
	ws2812b.repeat_counter++;
 8000f08:	4a1b      	ldr	r2, [pc, #108]	; (8000f78 <dma_transfer_complete_handler+0x78>)
 8000f0a:	6993      	ldr	r3, [r2, #24]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	6193      	str	r3, [r2, #24]
	if(ws2812b.repeat_counter == WS2812B_NUMBER_OF_LEDS / 2)
 8000f10:	2b48      	cmp	r3, #72	; 0x48
 8000f12:	d002      	beq.n	8000f1a <dma_transfer_complete_handler+0x1a>
{
 8000f14:	b510      	push	{r4, lr}
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8000f16:	2400      	movs	r4, #0
 8000f18:	e027      	b.n	8000f6a <dma_transfer_complete_handler+0x6a>
		ws2812b.repeat_counter = 0;
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
		(&htim2)->Instance->CCMR1 &= ~((1 << 4) | (1 << 5));
 8000f20:	4916      	ldr	r1, [pc, #88]	; (8000f7c <dma_transfer_complete_handler+0x7c>)
 8000f22:	680b      	ldr	r3, [r1, #0]
 8000f24:	699a      	ldr	r2, [r3, #24]
 8000f26:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8000f2a:	619a      	str	r2, [r3, #24]
		(&htim2)->Instance->CCMR1 |= (1 << 6);
 8000f2c:	699a      	ldr	r2, [r3, #24]
 8000f2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f32:	619a      	str	r2, [r3, #24]
		__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 8000f34:	68da      	ldr	r2, [r3, #12]
 8000f36:	f042 0201 	orr.w	r2, r2, #1
 8000f3a:	60da      	str	r2, [r3, #12]
		__HAL_DMA_DISABLE(&hdma_tim2_ch3);
 8000f3c:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <dma_transfer_complete_handler+0x80>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	6813      	ldr	r3, [r2, #0]
 8000f42:	f023 0301 	bic.w	r3, r3, #1
 8000f46:	6013      	str	r3, [r2, #0]
		__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_UPDATE);
 8000f48:	680a      	ldr	r2, [r1, #0]
 8000f4a:	68d3      	ldr	r3, [r2, #12]
 8000f4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f50:	60d3      	str	r3, [r2, #12]
		LED5_PORT->BRR = LED5_PIN;
 8000f52:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f56:	2202      	movs	r2, #2
 8000f58:	629a      	str	r2, [r3, #40]	; 0x28
 8000f5a:	4770      	bx	lr
			load_next_framebuffer_data(&ws2812b.item[i], 1);
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	4806      	ldr	r0, [pc, #24]	; (8000f78 <dma_transfer_complete_handler+0x78>)
 8000f60:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8000f64:	f7ff ff26 	bl	8000db4 <load_next_framebuffer_data>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8000f68:	3401      	adds	r4, #1
 8000f6a:	2c00      	cmp	r4, #0
 8000f6c:	d0f6      	beq.n	8000f5c <dma_transfer_complete_handler+0x5c>
		LED5_PORT->BRR = LED5_PIN;
 8000f6e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f72:	2202      	movs	r2, #2
 8000f74:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f76:	bd10      	pop	{r4, pc}
 8000f78:	20000128 	.word	0x20000128
 8000f7c:	20000194 	.word	0x20000194
 8000f80:	200001e0 	.word	0x200001e0

08000f84 <ws2812b_init>:
//	dma_init();
//	tim2_init();
//	  HAL_DMA_Start_IT(&hdma_tim2_ch3, (uint32_t)dma_bit_buffer, (uint32_t)&TIM2->CCR3, BUFFER_SIZE);
//	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, (uint32_t *)dma_bit_buffer, BUFFER_SIZE);
	// Need to start the first transfer
	ws2812b.transfer_complete = 1;
 8000f84:	4b01      	ldr	r3, [pc, #4]	; (8000f8c <ws2812b_init+0x8>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	741a      	strb	r2, [r3, #16]
}
 8000f8a:	4770      	bx	lr
 8000f8c:	20000128 	.word	0x20000128

08000f90 <ws2812b_handle>:


void ws2812b_handle()
{
 8000f90:	b508      	push	{r3, lr}
	if(ws2812b.start_transfer) {
 8000f92:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <ws2812b_handle+0x18>)
 8000f94:	7c5b      	ldrb	r3, [r3, #17]
 8000f96:	b903      	cbnz	r3, 8000f9a <ws2812b_handle+0xa>
		ws2812b.start_transfer = 0;
		ws2812b_send();
	}

}
 8000f98:	bd08      	pop	{r3, pc}
		ws2812b.start_transfer = 0;
 8000f9a:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <ws2812b_handle+0x18>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	745a      	strb	r2, [r3, #17]
		ws2812b_send();
 8000fa0:	f7ff ff22 	bl	8000de8 <ws2812b_send>
}
 8000fa4:	e7f8      	b.n	8000f98 <ws2812b_handle+0x8>
 8000fa6:	bf00      	nop
 8000fa8:	20000128 	.word	0x20000128

08000fac <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fac:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <HAL_InitTick+0x44>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	b90b      	cbnz	r3, 8000fb6 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fb2:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000fb4:	4770      	bx	lr
{
 8000fb6:	b510      	push	{r4, lr}
 8000fb8:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fc2:	4a0c      	ldr	r2, [pc, #48]	; (8000ff4 <HAL_InitTick+0x48>)
 8000fc4:	6810      	ldr	r0, [r2, #0]
 8000fc6:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fca:	f000 f88b 	bl	80010e4 <HAL_SYSTICK_Config>
 8000fce:	b968      	cbnz	r0, 8000fec <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd0:	2c0f      	cmp	r4, #15
 8000fd2:	d901      	bls.n	8000fd8 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	e00a      	b.n	8000fee <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	4621      	mov	r1, r4
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe0:	f000 f83e 	bl	8001060 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe4:	4b02      	ldr	r3, [pc, #8]	; (8000ff0 <HAL_InitTick+0x44>)
 8000fe6:	605c      	str	r4, [r3, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe8:	2000      	movs	r0, #0
 8000fea:	e000      	b.n	8000fee <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8000fec:	2001      	movs	r0, #1
}
 8000fee:	bd10      	pop	{r4, pc}
 8000ff0:	20000004 	.word	0x20000004
 8000ff4:	20000000 	.word	0x20000000

08000ff8 <HAL_Init>:
{
 8000ff8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ffa:	2003      	movs	r0, #3
 8000ffc:	f000 f81e 	bl	800103c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001000:	2000      	movs	r0, #0
 8001002:	f7ff ffd3 	bl	8000fac <HAL_InitTick>
 8001006:	b110      	cbz	r0, 800100e <HAL_Init+0x16>
    status = HAL_ERROR;
 8001008:	2401      	movs	r4, #1
}
 800100a:	4620      	mov	r0, r4
 800100c:	bd10      	pop	{r4, pc}
 800100e:	4604      	mov	r4, r0
    HAL_MspInit();
 8001010:	f7ff fc24 	bl	800085c <HAL_MspInit>
 8001014:	e7f9      	b.n	800100a <HAL_Init+0x12>
	...

08001018 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <HAL_IncTick+0x10>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	4a03      	ldr	r2, [pc, #12]	; (800102c <HAL_IncTick+0x14>)
 800101e:	6811      	ldr	r1, [r2, #0]
 8001020:	440b      	add	r3, r1
 8001022:	6013      	str	r3, [r2, #0]
}
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20000004 	.word	0x20000004
 800102c:	2000040c 	.word	0x2000040c

08001030 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001030:	4b01      	ldr	r3, [pc, #4]	; (8001038 <HAL_GetTick+0x8>)
 8001032:	6818      	ldr	r0, [r3, #0]
}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	2000040c 	.word	0x2000040c

0800103c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800103c:	4a07      	ldr	r2, [pc, #28]	; (800105c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800103e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001040:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001044:	041b      	lsls	r3, r3, #16
 8001046:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001048:	0200      	lsls	r0, r0, #8
 800104a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800104e:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001050:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001054:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001058:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800105a:	4770      	bx	lr
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001060:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001062:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <HAL_NVIC_SetPriority+0x60>)
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800106a:	f1c3 0407 	rsb	r4, r3, #7
 800106e:	2c04      	cmp	r4, #4
 8001070:	bf28      	it	cs
 8001072:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001074:	1d1d      	adds	r5, r3, #4
 8001076:	2d06      	cmp	r5, #6
 8001078:	d918      	bls.n	80010ac <HAL_NVIC_SetPriority+0x4c>
 800107a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	f04f 35ff 	mov.w	r5, #4294967295
 8001080:	fa05 f404 	lsl.w	r4, r5, r4
 8001084:	ea21 0104 	bic.w	r1, r1, r4
 8001088:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800108a:	fa05 f303 	lsl.w	r3, r5, r3
 800108e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001092:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001094:	2800      	cmp	r0, #0
 8001096:	db0b      	blt.n	80010b0 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001098:	0109      	lsls	r1, r1, #4
 800109a:	b2c9      	uxtb	r1, r1
 800109c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80010a0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80010a4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80010a8:	bc30      	pop	{r4, r5}
 80010aa:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ac:	2300      	movs	r3, #0
 80010ae:	e7e5      	b.n	800107c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b0:	f000 000f 	and.w	r0, r0, #15
 80010b4:	0109      	lsls	r1, r1, #4
 80010b6:	b2c9      	uxtb	r1, r1
 80010b8:	4b02      	ldr	r3, [pc, #8]	; (80010c4 <HAL_NVIC_SetPriority+0x64>)
 80010ba:	5419      	strb	r1, [r3, r0]
 80010bc:	e7f4      	b.n	80010a8 <HAL_NVIC_SetPriority+0x48>
 80010be:	bf00      	nop
 80010c0:	e000ed00 	.word	0xe000ed00
 80010c4:	e000ed14 	.word	0xe000ed14

080010c8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80010c8:	2800      	cmp	r0, #0
 80010ca:	db07      	blt.n	80010dc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010cc:	f000 021f 	and.w	r2, r0, #31
 80010d0:	0940      	lsrs	r0, r0, #5
 80010d2:	2301      	movs	r3, #1
 80010d4:	4093      	lsls	r3, r2
 80010d6:	4a02      	ldr	r2, [pc, #8]	; (80010e0 <HAL_NVIC_EnableIRQ+0x18>)
 80010d8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000e100 	.word	0xe000e100

080010e4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e4:	3801      	subs	r0, #1
 80010e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80010ea:	d20a      	bcs.n	8001102 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_SYSTICK_Config+0x24>)
 80010ee:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f0:	4a06      	ldr	r2, [pc, #24]	; (800110c <HAL_SYSTICK_Config+0x28>)
 80010f2:	21f0      	movs	r1, #240	; 0xf0
 80010f4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f8:	2000      	movs	r0, #0
 80010fa:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010fc:	2207      	movs	r2, #7
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001102:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000e010 	.word	0xe000e010
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001110:	b470      	push	{r4, r5, r6}
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001112:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001114:	f004 051c 	and.w	r5, r4, #28
 8001118:	6c06      	ldr	r6, [r0, #64]	; 0x40
 800111a:	2401      	movs	r4, #1
 800111c:	40ac      	lsls	r4, r5
 800111e:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001120:	6804      	ldr	r4, [r0, #0]
 8001122:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001124:	6883      	ldr	r3, [r0, #8]
 8001126:	2b10      	cmp	r3, #16
 8001128:	d005      	beq.n	8001136 <DMA_SetConfig+0x26>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800112a:	6803      	ldr	r3, [r0, #0]
 800112c:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800112e:	6803      	ldr	r3, [r0, #0]
 8001130:	60da      	str	r2, [r3, #12]
  }
}
 8001132:	bc70      	pop	{r4, r5, r6}
 8001134:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8001136:	6803      	ldr	r3, [r0, #0]
 8001138:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800113a:	6803      	ldr	r3, [r0, #0]
 800113c:	60d9      	str	r1, [r3, #12]
 800113e:	e7f8      	b.n	8001132 <DMA_SetConfig+0x22>

08001140 <HAL_DMA_Init>:
  if(hdma == NULL)
 8001140:	2800      	cmp	r0, #0
 8001142:	d069      	beq.n	8001218 <HAL_DMA_Init+0xd8>
{
 8001144:	b410      	push	{r4}
 8001146:	4603      	mov	r3, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001148:	6801      	ldr	r1, [r0, #0]
 800114a:	4a34      	ldr	r2, [pc, #208]	; (800121c <HAL_DMA_Init+0xdc>)
 800114c:	4291      	cmp	r1, r2
 800114e:	d845      	bhi.n	80011dc <HAL_DMA_Init+0x9c>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001150:	4a33      	ldr	r2, [pc, #204]	; (8001220 <HAL_DMA_Init+0xe0>)
 8001152:	440a      	add	r2, r1
 8001154:	4933      	ldr	r1, [pc, #204]	; (8001224 <HAL_DMA_Init+0xe4>)
 8001156:	fba1 1202 	umull	r1, r2, r1, r2
 800115a:	0912      	lsrs	r2, r2, #4
 800115c:	0092      	lsls	r2, r2, #2
 800115e:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001160:	4a31      	ldr	r2, [pc, #196]	; (8001228 <HAL_DMA_Init+0xe8>)
 8001162:	6402      	str	r2, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8001164:	2202      	movs	r2, #2
 8001166:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 800116a:	6818      	ldr	r0, [r3, #0]
 800116c:	6801      	ldr	r1, [r0, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800116e:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8001172:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 8001176:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001178:	68dc      	ldr	r4, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800117a:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800117c:	691c      	ldr	r4, [r3, #16]
 800117e:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001180:	695c      	ldr	r4, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001182:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001184:	699c      	ldr	r4, [r3, #24]
 8001186:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001188:	69dc      	ldr	r4, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800118a:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800118c:	6a1c      	ldr	r4, [r3, #32]
 800118e:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 8001190:	430a      	orrs	r2, r1
  hdma->Instance->CCR = tmp;
 8001192:	6002      	str	r2, [r0, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001194:	689a      	ldr	r2, [r3, #8]
 8001196:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800119a:	d015      	beq.n	80011c8 <HAL_DMA_Init+0x88>
    if (DMA1 == hdma->DmaBaseAddress)
 800119c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800119e:	4a22      	ldr	r2, [pc, #136]	; (8001228 <HAL_DMA_Init+0xe8>)
 80011a0:	4291      	cmp	r1, r2
 80011a2:	d026      	beq.n	80011f2 <HAL_DMA_Init+0xb2>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80011a4:	4a21      	ldr	r2, [pc, #132]	; (800122c <HAL_DMA_Init+0xec>)
 80011a6:	6811      	ldr	r1, [r2, #0]
 80011a8:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80011aa:	f000 041c 	and.w	r4, r0, #28
 80011ae:	200f      	movs	r0, #15
 80011b0:	40a0      	lsls	r0, r4
 80011b2:	ea21 0100 	bic.w	r1, r1, r0
 80011b6:	6011      	str	r1, [r2, #0]
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80011b8:	6811      	ldr	r1, [r2, #0]
 80011ba:	6858      	ldr	r0, [r3, #4]
 80011bc:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80011be:	f004 041c 	and.w	r4, r4, #28
 80011c2:	40a0      	lsls	r0, r4
 80011c4:	4301      	orrs	r1, r0
 80011c6:	6011      	str	r1, [r2, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011c8:	2000      	movs	r0, #0
 80011ca:	63d8      	str	r0, [r3, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 80011cc:	2201      	movs	r2, #1
 80011ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 80011d2:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
}
 80011d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80011da:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80011dc:	4a14      	ldr	r2, [pc, #80]	; (8001230 <HAL_DMA_Init+0xf0>)
 80011de:	440a      	add	r2, r1
 80011e0:	4910      	ldr	r1, [pc, #64]	; (8001224 <HAL_DMA_Init+0xe4>)
 80011e2:	fba1 1202 	umull	r1, r2, r1, r2
 80011e6:	0912      	lsrs	r2, r2, #4
 80011e8:	0092      	lsls	r2, r2, #2
 80011ea:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80011ec:	4a11      	ldr	r2, [pc, #68]	; (8001234 <HAL_DMA_Init+0xf4>)
 80011ee:	6402      	str	r2, [r0, #64]	; 0x40
 80011f0:	e7b8      	b.n	8001164 <HAL_DMA_Init+0x24>
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80011f2:	32a8      	adds	r2, #168	; 0xa8
 80011f4:	6811      	ldr	r1, [r2, #0]
 80011f6:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80011f8:	f000 041c 	and.w	r4, r0, #28
 80011fc:	200f      	movs	r0, #15
 80011fe:	40a0      	lsls	r0, r4
 8001200:	ea21 0100 	bic.w	r1, r1, r0
 8001204:	6011      	str	r1, [r2, #0]
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001206:	6811      	ldr	r1, [r2, #0]
 8001208:	6858      	ldr	r0, [r3, #4]
 800120a:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800120c:	f004 041c 	and.w	r4, r4, #28
 8001210:	40a0      	lsls	r0, r4
 8001212:	4301      	orrs	r1, r0
 8001214:	6011      	str	r1, [r2, #0]
 8001216:	e7d7      	b.n	80011c8 <HAL_DMA_Init+0x88>
    return HAL_ERROR;
 8001218:	2001      	movs	r0, #1
}
 800121a:	4770      	bx	lr
 800121c:	40020407 	.word	0x40020407
 8001220:	bffdfff8 	.word	0xbffdfff8
 8001224:	cccccccd 	.word	0xcccccccd
 8001228:	40020000 	.word	0x40020000
 800122c:	400204a8 	.word	0x400204a8
 8001230:	bffdfbf8 	.word	0xbffdfbf8
 8001234:	40020400 	.word	0x40020400

08001238 <HAL_DMA_Start_IT>:
{
 8001238:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 800123a:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 800123e:	2c01      	cmp	r4, #1
 8001240:	d033      	beq.n	80012aa <HAL_DMA_Start_IT+0x72>
 8001242:	2401      	movs	r4, #1
 8001244:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 8001248:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 800124c:	b2e4      	uxtb	r4, r4
 800124e:	2c01      	cmp	r4, #1
 8001250:	d004      	beq.n	800125c <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 8001252:	2300      	movs	r3, #0
 8001254:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    status = HAL_BUSY;
 8001258:	2002      	movs	r0, #2
}
 800125a:	bd38      	pop	{r3, r4, r5, pc}
 800125c:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 800125e:	2002      	movs	r0, #2
 8001260:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001264:	2000      	movs	r0, #0
 8001266:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001268:	6825      	ldr	r5, [r4, #0]
 800126a:	6828      	ldr	r0, [r5, #0]
 800126c:	f020 0001 	bic.w	r0, r0, #1
 8001270:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001272:	4620      	mov	r0, r4
 8001274:	f7ff ff4c 	bl	8001110 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8001278:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800127a:	b15b      	cbz	r3, 8001294 <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800127c:	6822      	ldr	r2, [r4, #0]
 800127e:	6813      	ldr	r3, [r2, #0]
 8001280:	f043 030e 	orr.w	r3, r3, #14
 8001284:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001286:	6822      	ldr	r2, [r4, #0]
 8001288:	6813      	ldr	r3, [r2, #0]
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001290:	2000      	movs	r0, #0
 8001292:	e7e2      	b.n	800125a <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001294:	6822      	ldr	r2, [r4, #0]
 8001296:	6813      	ldr	r3, [r2, #0]
 8001298:	f023 0304 	bic.w	r3, r3, #4
 800129c:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800129e:	6822      	ldr	r2, [r4, #0]
 80012a0:	6813      	ldr	r3, [r2, #0]
 80012a2:	f043 030a 	orr.w	r3, r3, #10
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	e7ed      	b.n	8001286 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 80012aa:	2002      	movs	r0, #2
 80012ac:	e7d5      	b.n	800125a <HAL_DMA_Start_IT+0x22>

080012ae <HAL_DMA_IRQHandler>:
{
 80012ae:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012b0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80012b2:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80012b4:	6804      	ldr	r4, [r0, #0]
 80012b6:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80012b8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80012ba:	f003 031c 	and.w	r3, r3, #28
 80012be:	2204      	movs	r2, #4
 80012c0:	409a      	lsls	r2, r3
 80012c2:	420a      	tst	r2, r1
 80012c4:	d015      	beq.n	80012f2 <HAL_DMA_IRQHandler+0x44>
 80012c6:	f015 0f04 	tst.w	r5, #4
 80012ca:	d012      	beq.n	80012f2 <HAL_DMA_IRQHandler+0x44>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012cc:	6823      	ldr	r3, [r4, #0]
 80012ce:	f013 0f20 	tst.w	r3, #32
 80012d2:	d103      	bne.n	80012dc <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012d4:	6823      	ldr	r3, [r4, #0]
 80012d6:	f023 0304 	bic.w	r3, r3, #4
 80012da:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80012dc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80012de:	f003 021c 	and.w	r2, r3, #28
 80012e2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80012e4:	2304      	movs	r3, #4
 80012e6:	4093      	lsls	r3, r2
 80012e8:	604b      	str	r3, [r1, #4]
      if(hdma->XferHalfCpltCallback != NULL)
 80012ea:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80012ec:	b103      	cbz	r3, 80012f0 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 80012ee:	4798      	blx	r3
}
 80012f0:	bd38      	pop	{r3, r4, r5, pc}
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80012f2:	2202      	movs	r2, #2
 80012f4:	409a      	lsls	r2, r3
 80012f6:	420a      	tst	r2, r1
 80012f8:	d01c      	beq.n	8001334 <HAL_DMA_IRQHandler+0x86>
 80012fa:	f015 0f02 	tst.w	r5, #2
 80012fe:	d019      	beq.n	8001334 <HAL_DMA_IRQHandler+0x86>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001300:	6823      	ldr	r3, [r4, #0]
 8001302:	f013 0f20 	tst.w	r3, #32
 8001306:	d106      	bne.n	8001316 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001308:	6823      	ldr	r3, [r4, #0]
 800130a:	f023 030a 	bic.w	r3, r3, #10
 800130e:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001310:	2301      	movs	r3, #1
 8001312:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001316:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001318:	f003 021c 	and.w	r2, r3, #28
 800131c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800131e:	2302      	movs	r3, #2
 8001320:	4093      	lsls	r3, r2
 8001322:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001324:	2300      	movs	r3, #0
 8001326:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 800132a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0df      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 8001330:	4798      	blx	r3
 8001332:	e7dd      	b.n	80012f0 <HAL_DMA_IRQHandler+0x42>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001334:	2208      	movs	r2, #8
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	420b      	tst	r3, r1
 800133c:	d0d8      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x42>
 800133e:	f015 0f08 	tst.w	r5, #8
 8001342:	d0d5      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001344:	6823      	ldr	r3, [r4, #0]
 8001346:	f023 030e 	bic.w	r3, r3, #14
 800134a:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800134c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800134e:	f003 031c 	and.w	r3, r3, #28
 8001352:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001354:	2201      	movs	r2, #1
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800135c:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800135e:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001362:	2300      	movs	r3, #0
 8001364:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8001368:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0c0      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 800136e:	4798      	blx	r3
  return;
 8001370:	e7be      	b.n	80012f0 <HAL_DMA_IRQHandler+0x42>
	...

08001374 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001376:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8001378:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800137a:	e096      	b.n	80014aa <HAL_GPIO_Init+0x136>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800137c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800137e:	005f      	lsls	r7, r3, #1
 8001380:	2503      	movs	r5, #3
 8001382:	40bd      	lsls	r5, r7
 8001384:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001388:	68cd      	ldr	r5, [r1, #12]
 800138a:	40bd      	lsls	r5, r7
 800138c:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 800138e:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001390:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001392:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001396:	684d      	ldr	r5, [r1, #4]
 8001398:	f3c5 1400 	ubfx	r4, r5, #4, #1
 800139c:	409c      	lsls	r4, r3
 800139e:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 80013a0:	6044      	str	r4, [r0, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013a2:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80013a4:	005f      	lsls	r7, r3, #1
 80013a6:	2403      	movs	r4, #3
 80013a8:	40bc      	lsls	r4, r7
 80013aa:	43e4      	mvns	r4, r4
 80013ac:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013ae:	688e      	ldr	r6, [r1, #8]
 80013b0:	40be      	lsls	r6, r7
 80013b2:	432e      	orrs	r6, r5
      GPIOx->PUPDR = temp;
 80013b4:	60c6      	str	r6, [r0, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013b6:	684d      	ldr	r5, [r1, #4]
 80013b8:	2d02      	cmp	r5, #2
 80013ba:	d001      	beq.n	80013c0 <HAL_GPIO_Init+0x4c>
 80013bc:	2d12      	cmp	r5, #18
 80013be:	d113      	bne.n	80013e8 <HAL_GPIO_Init+0x74>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013c0:	08de      	lsrs	r6, r3, #3
 80013c2:	3608      	adds	r6, #8
 80013c4:	f850 e026 	ldr.w	lr, [r0, r6, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013c8:	f003 0507 	and.w	r5, r3, #7
 80013cc:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 80013d0:	250f      	movs	r5, #15
 80013d2:	fa05 f50c 	lsl.w	r5, r5, ip
 80013d6:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013da:	690d      	ldr	r5, [r1, #16]
 80013dc:	fa05 f50c 	lsl.w	r5, r5, ip
 80013e0:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3u] = temp;
 80013e4:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013e8:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013ea:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013ec:	684d      	ldr	r5, [r1, #4]
 80013ee:	f005 0503 	and.w	r5, r5, #3
 80013f2:	40bd      	lsls	r5, r7
 80013f4:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 80013f6:	6004      	str	r4, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013f8:	684c      	ldr	r4, [r1, #4]
 80013fa:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 80013fe:	d053      	beq.n	80014a8 <HAL_GPIO_Init+0x134>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001400:	4c38      	ldr	r4, [pc, #224]	; (80014e4 <HAL_GPIO_Init+0x170>)
 8001402:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8001404:	f045 0501 	orr.w	r5, r5, #1
 8001408:	6625      	str	r5, [r4, #96]	; 0x60
 800140a:	6e24      	ldr	r4, [r4, #96]	; 0x60
 800140c:	f004 0401 	and.w	r4, r4, #1
 8001410:	9401      	str	r4, [sp, #4]
 8001412:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001414:	089d      	lsrs	r5, r3, #2
 8001416:	1cae      	adds	r6, r5, #2
 8001418:	4c33      	ldr	r4, [pc, #204]	; (80014e8 <HAL_GPIO_Init+0x174>)
 800141a:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800141e:	f003 0403 	and.w	r4, r3, #3
 8001422:	00a6      	lsls	r6, r4, #2
 8001424:	240f      	movs	r4, #15
 8001426:	40b4      	lsls	r4, r6
 8001428:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800142c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8001430:	d051      	beq.n	80014d6 <HAL_GPIO_Init+0x162>
 8001432:	4c2e      	ldr	r4, [pc, #184]	; (80014ec <HAL_GPIO_Init+0x178>)
 8001434:	42a0      	cmp	r0, r4
 8001436:	d050      	beq.n	80014da <HAL_GPIO_Init+0x166>
 8001438:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800143c:	42a0      	cmp	r0, r4
 800143e:	d048      	beq.n	80014d2 <HAL_GPIO_Init+0x15e>
 8001440:	2407      	movs	r4, #7
 8001442:	40b4      	lsls	r4, r6
 8001444:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001446:	3502      	adds	r5, #2
 8001448:	4e27      	ldr	r6, [pc, #156]	; (80014e8 <HAL_GPIO_Init+0x174>)
 800144a:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800144e:	4c28      	ldr	r4, [pc, #160]	; (80014f0 <HAL_GPIO_Init+0x17c>)
 8001450:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8001452:	43d4      	mvns	r4, r2
 8001454:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001458:	684f      	ldr	r7, [r1, #4]
 800145a:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800145e:	d001      	beq.n	8001464 <HAL_GPIO_Init+0xf0>
        {
          temp |= iocurrent;
 8001460:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 8001464:	4d22      	ldr	r5, [pc, #136]	; (80014f0 <HAL_GPIO_Init+0x17c>)
 8001466:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 8001468:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800146a:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800146e:	684f      	ldr	r7, [r1, #4]
 8001470:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001474:	d001      	beq.n	800147a <HAL_GPIO_Init+0x106>
        {
          temp |= iocurrent;
 8001476:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 800147a:	4d1d      	ldr	r5, [pc, #116]	; (80014f0 <HAL_GPIO_Init+0x17c>)
 800147c:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800147e:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 8001480:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001484:	684f      	ldr	r7, [r1, #4]
 8001486:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800148a:	d001      	beq.n	8001490 <HAL_GPIO_Init+0x11c>
        {
          temp |= iocurrent;
 800148c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8001490:	4d17      	ldr	r5, [pc, #92]	; (80014f0 <HAL_GPIO_Init+0x17c>)
 8001492:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8001494:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8001496:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001498:	684e      	ldr	r6, [r1, #4]
 800149a:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800149e:	d001      	beq.n	80014a4 <HAL_GPIO_Init+0x130>
        {
          temp |= iocurrent;
 80014a0:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 80014a4:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <HAL_GPIO_Init+0x17c>)
 80014a6:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 80014a8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014aa:	680a      	ldr	r2, [r1, #0]
 80014ac:	fa32 f403 	lsrs.w	r4, r2, r3
 80014b0:	d015      	beq.n	80014de <HAL_GPIO_Init+0x16a>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014b2:	2401      	movs	r4, #1
 80014b4:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 80014b6:	4022      	ands	r2, r4
 80014b8:	d0f6      	beq.n	80014a8 <HAL_GPIO_Init+0x134>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014ba:	684d      	ldr	r5, [r1, #4]
 80014bc:	1e6e      	subs	r6, r5, #1
 80014be:	2e01      	cmp	r6, #1
 80014c0:	f67f af5c 	bls.w	800137c <HAL_GPIO_Init+0x8>
 80014c4:	2d11      	cmp	r5, #17
 80014c6:	f43f af59 	beq.w	800137c <HAL_GPIO_Init+0x8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014ca:	2d12      	cmp	r5, #18
 80014cc:	f47f af69 	bne.w	80013a2 <HAL_GPIO_Init+0x2e>
 80014d0:	e754      	b.n	800137c <HAL_GPIO_Init+0x8>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014d2:	2402      	movs	r4, #2
 80014d4:	e7b5      	b.n	8001442 <HAL_GPIO_Init+0xce>
 80014d6:	2400      	movs	r4, #0
 80014d8:	e7b3      	b.n	8001442 <HAL_GPIO_Init+0xce>
 80014da:	2401      	movs	r4, #1
 80014dc:	e7b1      	b.n	8001442 <HAL_GPIO_Init+0xce>
  }
}
 80014de:	b003      	add	sp, #12
 80014e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40010000 	.word	0x40010000
 80014ec:	48000400 	.word	0x48000400
 80014f0:	40010400 	.word	0x40010400

080014f4 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014f4:	4b02      	ldr	r3, [pc, #8]	; (8001500 <HAL_PWREx_GetVoltageRange+0xc>)
 80014f6:	6818      	ldr	r0, [r3, #0]
#endif
}
 80014f8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40007000 	.word	0x40007000

08001504 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001504:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001508:	d00f      	beq.n	800152a <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800150a:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001516:	d034      	beq.n	8001582 <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001518:	4a1b      	ldr	r2, [pc, #108]	; (8001588 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800151a:	6813      	ldr	r3, [r2, #0]
 800151c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001520:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001524:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001526:	2000      	movs	r0, #0
 8001528:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800152a:	4b17      	ldr	r3, [pc, #92]	; (8001588 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001532:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001536:	d022      	beq.n	800157e <HAL_PWREx_ControlVoltageScaling+0x7a>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001538:	4a13      	ldr	r2, [pc, #76]	; (8001588 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800153a:	6813      	ldr	r3, [r2, #0]
 800153c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001540:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001544:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	2332      	movs	r3, #50	; 0x32
 800154c:	fb03 f302 	mul.w	r3, r3, r2
 8001550:	4a0f      	ldr	r2, [pc, #60]	; (8001590 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8001552:	fba2 2303 	umull	r2, r3, r2, r3
 8001556:	0c9b      	lsrs	r3, r3, #18
 8001558:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800155a:	e000      	b.n	800155e <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 800155c:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800155e:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001560:	6952      	ldr	r2, [r2, #20]
 8001562:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001566:	d001      	beq.n	800156c <HAL_PWREx_ControlVoltageScaling+0x68>
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1f7      	bne.n	800155c <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800156e:	695b      	ldr	r3, [r3, #20]
 8001570:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001574:	d101      	bne.n	800157a <HAL_PWREx_ControlVoltageScaling+0x76>
  return HAL_OK;
 8001576:	2000      	movs	r0, #0
 8001578:	4770      	bx	lr
        return HAL_TIMEOUT;
 800157a:	2003      	movs	r0, #3
 800157c:	4770      	bx	lr
  return HAL_OK;
 800157e:	2000      	movs	r0, #0
 8001580:	4770      	bx	lr
 8001582:	2000      	movs	r0, #0
}
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	40007000 	.word	0x40007000
 800158c:	20000000 	.word	0x20000000
 8001590:	431bde83 	.word	0x431bde83

08001594 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001594:	b530      	push	{r4, r5, lr}
 8001596:	b083      	sub	sp, #12
 8001598:	4605      	mov	r5, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800159a:	4b20      	ldr	r3, [pc, #128]	; (800161c <RCC_SetFlashLatencyFromMSIRange+0x88>)
 800159c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80015a2:	d00b      	beq.n	80015bc <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80015a4:	f7ff ffa6 	bl	80014f4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015a8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80015ac:	d017      	beq.n	80015de <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80015ae:	2d80      	cmp	r5, #128	; 0x80
 80015b0:	d81f      	bhi.n	80015f2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80015b2:	d02d      	beq.n	8001610 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 80015b4:	2d70      	cmp	r5, #112	; 0x70
 80015b6:	d02d      	beq.n	8001614 <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80015b8:	2100      	movs	r1, #0
 80015ba:	e01b      	b.n	80015f4 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 80015bc:	4c17      	ldr	r4, [pc, #92]	; (800161c <RCC_SetFlashLatencyFromMSIRange+0x88>)
 80015be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80015c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c4:	65a3      	str	r3, [r4, #88]	; 0x58
 80015c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80015c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015cc:	9301      	str	r3, [sp, #4]
 80015ce:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80015d0:	f7ff ff90 	bl	80014f4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80015d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80015d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015da:	65a3      	str	r3, [r4, #88]	; 0x58
 80015dc:	e7e4      	b.n	80015a8 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 80015de:	2d80      	cmp	r5, #128	; 0x80
 80015e0:	d903      	bls.n	80015ea <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 80015e2:	2da0      	cmp	r5, #160	; 0xa0
 80015e4:	d903      	bls.n	80015ee <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 80015e6:	2102      	movs	r1, #2
 80015e8:	e004      	b.n	80015f4 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80015ea:	2100      	movs	r1, #0
 80015ec:	e002      	b.n	80015f4 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 80015ee:	2101      	movs	r1, #1
 80015f0:	e000      	b.n	80015f4 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 80015f2:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80015f4:	4a0a      	ldr	r2, [pc, #40]	; (8001620 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 80015f6:	6813      	ldr	r3, [r2, #0]
 80015f8:	f023 0307 	bic.w	r3, r3, #7
 80015fc:	430b      	orrs	r3, r1
 80015fe:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001600:	6813      	ldr	r3, [r2, #0]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	428b      	cmp	r3, r1
 8001608:	d006      	beq.n	8001618 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
 800160a:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800160c:	b003      	add	sp, #12
 800160e:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8001610:	2102      	movs	r1, #2
 8001612:	e7ef      	b.n	80015f4 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8001614:	2101      	movs	r1, #1
 8001616:	e7ed      	b.n	80015f4 <RCC_SetFlashLatencyFromMSIRange+0x60>
  return HAL_OK;
 8001618:	2000      	movs	r0, #0
 800161a:	e7f7      	b.n	800160c <RCC_SetFlashLatencyFromMSIRange+0x78>
 800161c:	40021000 	.word	0x40021000
 8001620:	40022000 	.word	0x40022000

08001624 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001624:	4a28      	ldr	r2, [pc, #160]	; (80016c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001626:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001628:	68d2      	ldr	r2, [r2, #12]
 800162a:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800162e:	f013 030c 	ands.w	r3, r3, #12
 8001632:	d00a      	beq.n	800164a <HAL_RCC_GetSysClockFreq+0x26>
 8001634:	2b0c      	cmp	r3, #12
 8001636:	d006      	beq.n	8001646 <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001638:	2b04      	cmp	r3, #4
 800163a:	d01f      	beq.n	800167c <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800163c:	2b08      	cmp	r3, #8
 800163e:	d020      	beq.n	8001682 <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001640:	2000      	movs	r0, #0
 8001642:	4602      	mov	r2, r0
 8001644:	e010      	b.n	8001668 <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001646:	2a01      	cmp	r2, #1
 8001648:	d1f6      	bne.n	8001638 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800164a:	4a1f      	ldr	r2, [pc, #124]	; (80016c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800164c:	6812      	ldr	r2, [r2, #0]
 800164e:	f012 0f08 	tst.w	r2, #8
 8001652:	d10c      	bne.n	800166e <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001654:	4a1c      	ldr	r2, [pc, #112]	; (80016c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001656:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 800165a:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 800165e:	491b      	ldr	r1, [pc, #108]	; (80016cc <HAL_RCC_GetSysClockFreq+0xa8>)
 8001660:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001664:	b143      	cbz	r3, 8001678 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001666:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001668:	2b0c      	cmp	r3, #12
 800166a:	d00d      	beq.n	8001688 <HAL_RCC_GetSysClockFreq+0x64>
}
 800166c:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800166e:	4a16      	ldr	r2, [pc, #88]	; (80016c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001670:	6812      	ldr	r2, [r2, #0]
 8001672:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001676:	e7f2      	b.n	800165e <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 8001678:	4610      	mov	r0, r2
 800167a:	e7f5      	b.n	8001668 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 800167c:	4814      	ldr	r0, [pc, #80]	; (80016d0 <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800167e:	2200      	movs	r2, #0
 8001680:	e7f2      	b.n	8001668 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 8001682:	4814      	ldr	r0, [pc, #80]	; (80016d4 <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001684:	2200      	movs	r2, #0
 8001686:	e7ef      	b.n	8001668 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001688:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8001690:	2b02      	cmp	r3, #2
 8001692:	d015      	beq.n	80016c0 <HAL_RCC_GetSysClockFreq+0x9c>
 8001694:	2b03      	cmp	r3, #3
 8001696:	d015      	beq.n	80016c4 <HAL_RCC_GetSysClockFreq+0xa0>
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001698:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800169a:	68d8      	ldr	r0, [r3, #12]
 800169c:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80016a0:	3001      	adds	r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80016a2:	68d9      	ldr	r1, [r3, #12]
 80016a4:	f3c1 2106 	ubfx	r1, r1, #8, #7
 80016a8:	fb02 f201 	mul.w	r2, r2, r1
 80016ac:	fbb2 f2f0 	udiv	r2, r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80016b0:	68d8      	ldr	r0, [r3, #12]
 80016b2:	f3c0 6041 	ubfx	r0, r0, #25, #2
 80016b6:	3001      	adds	r0, #1
 80016b8:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 80016ba:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 80016be:	e7d5      	b.n	800166c <HAL_RCC_GetSysClockFreq+0x48>
      pllvco = HSI_VALUE;
 80016c0:	4a03      	ldr	r2, [pc, #12]	; (80016d0 <HAL_RCC_GetSysClockFreq+0xac>)
 80016c2:	e7e9      	b.n	8001698 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = HSE_VALUE;
 80016c4:	4a03      	ldr	r2, [pc, #12]	; (80016d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80016c6:	e7e7      	b.n	8001698 <HAL_RCC_GetSysClockFreq+0x74>
 80016c8:	40021000 	.word	0x40021000
 80016cc:	080034c8 	.word	0x080034c8
 80016d0:	00f42400 	.word	0x00f42400
 80016d4:	007a1200 	.word	0x007a1200

080016d8 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 80016d8:	2800      	cmp	r0, #0
 80016da:	f000 8327 	beq.w	8001d2c <HAL_RCC_OscConfig+0x654>
{
 80016de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016e0:	b083      	sub	sp, #12
 80016e2:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016e4:	4baf      	ldr	r3, [pc, #700]	; (80019a4 <HAL_RCC_OscConfig+0x2cc>)
 80016e6:	689d      	ldr	r5, [r3, #8]
 80016e8:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016ec:	68de      	ldr	r6, [r3, #12]
 80016ee:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016f2:	6803      	ldr	r3, [r0, #0]
 80016f4:	f013 0f10 	tst.w	r3, #16
 80016f8:	d05b      	beq.n	80017b2 <HAL_RCC_OscConfig+0xda>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016fa:	b1e5      	cbz	r5, 8001736 <HAL_RCC_OscConfig+0x5e>
 80016fc:	2d0c      	cmp	r5, #12
 80016fe:	d018      	beq.n	8001732 <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001700:	69a3      	ldr	r3, [r4, #24]
 8001702:	2b00      	cmp	r3, #0
 8001704:	f000 80bc 	beq.w	8001880 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_MSI_ENABLE();
 8001708:	4aa6      	ldr	r2, [pc, #664]	; (80019a4 <HAL_RCC_OscConfig+0x2cc>)
 800170a:	6813      	ldr	r3, [r2, #0]
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001712:	f7ff fc8d 	bl	8001030 <HAL_GetTick>
 8001716:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001718:	4ba2      	ldr	r3, [pc, #648]	; (80019a4 <HAL_RCC_OscConfig+0x2cc>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f013 0f02 	tst.w	r3, #2
 8001720:	f040 809b 	bne.w	800185a <HAL_RCC_OscConfig+0x182>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001724:	f7ff fc84 	bl	8001030 <HAL_GetTick>
 8001728:	1bc0      	subs	r0, r0, r7
 800172a:	2802      	cmp	r0, #2
 800172c:	d9f4      	bls.n	8001718 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e308      	b.n	8001d44 <HAL_RCC_OscConfig+0x66c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001732:	2e01      	cmp	r6, #1
 8001734:	d1e4      	bne.n	8001700 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001736:	4b9b      	ldr	r3, [pc, #620]	; (80019a4 <HAL_RCC_OscConfig+0x2cc>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f013 0f02 	tst.w	r3, #2
 800173e:	d003      	beq.n	8001748 <HAL_RCC_OscConfig+0x70>
 8001740:	69a3      	ldr	r3, [r4, #24]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 82f5 	beq.w	8001d32 <HAL_RCC_OscConfig+0x65a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001748:	6a20      	ldr	r0, [r4, #32]
 800174a:	4b96      	ldr	r3, [pc, #600]	; (80019a4 <HAL_RCC_OscConfig+0x2cc>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f013 0f08 	tst.w	r3, #8
 8001752:	d05c      	beq.n	800180e <HAL_RCC_OscConfig+0x136>
 8001754:	4b93      	ldr	r3, [pc, #588]	; (80019a4 <HAL_RCC_OscConfig+0x2cc>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800175c:	4298      	cmp	r0, r3
 800175e:	d85d      	bhi.n	800181c <HAL_RCC_OscConfig+0x144>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001760:	4b90      	ldr	r3, [pc, #576]	; (80019a4 <HAL_RCC_OscConfig+0x2cc>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	f042 0208 	orr.w	r2, r2, #8
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001770:	6a21      	ldr	r1, [r4, #32]
 8001772:	430a      	orrs	r2, r1
 8001774:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800177c:	69e1      	ldr	r1, [r4, #28]
 800177e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001782:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001784:	2d00      	cmp	r5, #0
 8001786:	d061      	beq.n	800184c <HAL_RCC_OscConfig+0x174>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001788:	f7ff ff4c 	bl	8001624 <HAL_RCC_GetSysClockFreq>
 800178c:	4b85      	ldr	r3, [pc, #532]	; (80019a4 <HAL_RCC_OscConfig+0x2cc>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001794:	4a84      	ldr	r2, [pc, #528]	; (80019a8 <HAL_RCC_OscConfig+0x2d0>)
 8001796:	5cd3      	ldrb	r3, [r2, r3]
 8001798:	f003 031f 	and.w	r3, r3, #31
 800179c:	40d8      	lsrs	r0, r3
 800179e:	4b83      	ldr	r3, [pc, #524]	; (80019ac <HAL_RCC_OscConfig+0x2d4>)
 80017a0:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80017a2:	4b83      	ldr	r3, [pc, #524]	; (80019b0 <HAL_RCC_OscConfig+0x2d8>)
 80017a4:	6818      	ldr	r0, [r3, #0]
 80017a6:	f7ff fc01 	bl	8000fac <HAL_InitTick>
        if(status != HAL_OK)
 80017aa:	4603      	mov	r3, r0
 80017ac:	2800      	cmp	r0, #0
 80017ae:	f040 82c9 	bne.w	8001d44 <HAL_RCC_OscConfig+0x66c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b2:	6823      	ldr	r3, [r4, #0]
 80017b4:	f013 0f01 	tst.w	r3, #1
 80017b8:	f000 8081 	beq.w	80018be <HAL_RCC_OscConfig+0x1e6>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017bc:	2d08      	cmp	r5, #8
 80017be:	d075      	beq.n	80018ac <HAL_RCC_OscConfig+0x1d4>
 80017c0:	2d0c      	cmp	r5, #12
 80017c2:	d071      	beq.n	80018a8 <HAL_RCC_OscConfig+0x1d0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017c4:	6863      	ldr	r3, [r4, #4]
 80017c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ca:	f000 8097 	beq.w	80018fc <HAL_RCC_OscConfig+0x224>
 80017ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017d2:	f000 8099 	beq.w	8001908 <HAL_RCC_OscConfig+0x230>
 80017d6:	4b73      	ldr	r3, [pc, #460]	; (80019a4 <HAL_RCC_OscConfig+0x2cc>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017e6:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017e8:	6863      	ldr	r3, [r4, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f000 8099 	beq.w	8001922 <HAL_RCC_OscConfig+0x24a>
        tickstart = HAL_GetTick();
 80017f0:	f7ff fc1e 	bl	8001030 <HAL_GetTick>
 80017f4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017f6:	4b6b      	ldr	r3, [pc, #428]	; (80019a4 <HAL_RCC_OscConfig+0x2cc>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80017fe:	d15e      	bne.n	80018be <HAL_RCC_OscConfig+0x1e6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001800:	f7ff fc16 	bl	8001030 <HAL_GetTick>
 8001804:	1bc0      	subs	r0, r0, r7
 8001806:	2864      	cmp	r0, #100	; 0x64
 8001808:	d9f5      	bls.n	80017f6 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e29a      	b.n	8001d44 <HAL_RCC_OscConfig+0x66c>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800180e:	4b65      	ldr	r3, [pc, #404]	; (80019a4 <HAL_RCC_OscConfig+0x2cc>)
 8001810:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001814:	091b      	lsrs	r3, r3, #4
 8001816:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800181a:	e79f      	b.n	800175c <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800181c:	f7ff feba 	bl	8001594 <RCC_SetFlashLatencyFromMSIRange>
 8001820:	2800      	cmp	r0, #0
 8001822:	f040 8288 	bne.w	8001d36 <HAL_RCC_OscConfig+0x65e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001826:	4b5f      	ldr	r3, [pc, #380]	; (80019a4 <HAL_RCC_OscConfig+0x2cc>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	f042 0208 	orr.w	r2, r2, #8
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001836:	6a21      	ldr	r1, [r4, #32]
 8001838:	430a      	orrs	r2, r1
 800183a:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001842:	69e1      	ldr	r1, [r4, #28]
 8001844:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	e79d      	b.n	8001788 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800184c:	6a20      	ldr	r0, [r4, #32]
 800184e:	f7ff fea1 	bl	8001594 <RCC_SetFlashLatencyFromMSIRange>
 8001852:	2800      	cmp	r0, #0
 8001854:	d098      	beq.n	8001788 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e274      	b.n	8001d44 <HAL_RCC_OscConfig+0x66c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800185a:	4b52      	ldr	r3, [pc, #328]	; (80019a4 <HAL_RCC_OscConfig+0x2cc>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	f042 0208 	orr.w	r2, r2, #8
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800186a:	6a21      	ldr	r1, [r4, #32]
 800186c:	430a      	orrs	r2, r1
 800186e:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001876:	69e1      	ldr	r1, [r4, #28]
 8001878:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	e798      	b.n	80017b2 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_MSI_DISABLE();
 8001880:	4a48      	ldr	r2, [pc, #288]	; (80019a4 <HAL_RCC_OscConfig+0x2cc>)
 8001882:	6813      	ldr	r3, [r2, #0]
 8001884:	f023 0301 	bic.w	r3, r3, #1
 8001888:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800188a:	f7ff fbd1 	bl	8001030 <HAL_GetTick>
 800188e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001890:	4b44      	ldr	r3, [pc, #272]	; (80019a4 <HAL_RCC_OscConfig+0x2cc>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f013 0f02 	tst.w	r3, #2
 8001898:	d08b      	beq.n	80017b2 <HAL_RCC_OscConfig+0xda>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800189a:	f7ff fbc9 	bl	8001030 <HAL_GetTick>
 800189e:	1bc0      	subs	r0, r0, r7
 80018a0:	2802      	cmp	r0, #2
 80018a2:	d9f5      	bls.n	8001890 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e24d      	b.n	8001d44 <HAL_RCC_OscConfig+0x66c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018a8:	2e03      	cmp	r6, #3
 80018aa:	d18b      	bne.n	80017c4 <HAL_RCC_OscConfig+0xec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ac:	4b3d      	ldr	r3, [pc, #244]	; (80019a4 <HAL_RCC_OscConfig+0x2cc>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80018b4:	d003      	beq.n	80018be <HAL_RCC_OscConfig+0x1e6>
 80018b6:	6863      	ldr	r3, [r4, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 823e 	beq.w	8001d3a <HAL_RCC_OscConfig+0x662>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018be:	6823      	ldr	r3, [r4, #0]
 80018c0:	f013 0f02 	tst.w	r3, #2
 80018c4:	d04f      	beq.n	8001966 <HAL_RCC_OscConfig+0x28e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018c6:	2d04      	cmp	r5, #4
 80018c8:	d03c      	beq.n	8001944 <HAL_RCC_OscConfig+0x26c>
 80018ca:	2d0c      	cmp	r5, #12
 80018cc:	d038      	beq.n	8001940 <HAL_RCC_OscConfig+0x268>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018ce:	68e3      	ldr	r3, [r4, #12]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d078      	beq.n	80019c6 <HAL_RCC_OscConfig+0x2ee>
        __HAL_RCC_HSI_ENABLE();
 80018d4:	4a33      	ldr	r2, [pc, #204]	; (80019a4 <HAL_RCC_OscConfig+0x2cc>)
 80018d6:	6813      	ldr	r3, [r2, #0]
 80018d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018dc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80018de:	f7ff fba7 	bl	8001030 <HAL_GetTick>
 80018e2:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018e4:	4b2f      	ldr	r3, [pc, #188]	; (80019a4 <HAL_RCC_OscConfig+0x2cc>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80018ec:	d162      	bne.n	80019b4 <HAL_RCC_OscConfig+0x2dc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ee:	f7ff fb9f 	bl	8001030 <HAL_GetTick>
 80018f2:	1b80      	subs	r0, r0, r6
 80018f4:	2802      	cmp	r0, #2
 80018f6:	d9f5      	bls.n	80018e4 <HAL_RCC_OscConfig+0x20c>
            return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e223      	b.n	8001d44 <HAL_RCC_OscConfig+0x66c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018fc:	4a29      	ldr	r2, [pc, #164]	; (80019a4 <HAL_RCC_OscConfig+0x2cc>)
 80018fe:	6813      	ldr	r3, [r2, #0]
 8001900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	e76f      	b.n	80017e8 <HAL_RCC_OscConfig+0x110>
 8001908:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800190c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	e762      	b.n	80017e8 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8001922:	f7ff fb85 	bl	8001030 <HAL_GetTick>
 8001926:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001928:	4b1e      	ldr	r3, [pc, #120]	; (80019a4 <HAL_RCC_OscConfig+0x2cc>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001930:	d0c5      	beq.n	80018be <HAL_RCC_OscConfig+0x1e6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001932:	f7ff fb7d 	bl	8001030 <HAL_GetTick>
 8001936:	1bc0      	subs	r0, r0, r7
 8001938:	2864      	cmp	r0, #100	; 0x64
 800193a:	d9f5      	bls.n	8001928 <HAL_RCC_OscConfig+0x250>
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e201      	b.n	8001d44 <HAL_RCC_OscConfig+0x66c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001940:	2e02      	cmp	r6, #2
 8001942:	d1c4      	bne.n	80018ce <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001944:	4b17      	ldr	r3, [pc, #92]	; (80019a4 <HAL_RCC_OscConfig+0x2cc>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800194c:	d003      	beq.n	8001956 <HAL_RCC_OscConfig+0x27e>
 800194e:	68e3      	ldr	r3, [r4, #12]
 8001950:	2b00      	cmp	r3, #0
 8001952:	f000 81f4 	beq.w	8001d3e <HAL_RCC_OscConfig+0x666>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001956:	4a13      	ldr	r2, [pc, #76]	; (80019a4 <HAL_RCC_OscConfig+0x2cc>)
 8001958:	6853      	ldr	r3, [r2, #4]
 800195a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800195e:	6921      	ldr	r1, [r4, #16]
 8001960:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001964:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001966:	6823      	ldr	r3, [r4, #0]
 8001968:	f013 0f08 	tst.w	r3, #8
 800196c:	d056      	beq.n	8001a1c <HAL_RCC_OscConfig+0x344>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800196e:	6963      	ldr	r3, [r4, #20]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d03c      	beq.n	80019ee <HAL_RCC_OscConfig+0x316>
      __HAL_RCC_LSI_ENABLE();
 8001974:	4a0b      	ldr	r2, [pc, #44]	; (80019a4 <HAL_RCC_OscConfig+0x2cc>)
 8001976:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001982:	f7ff fb55 	bl	8001030 <HAL_GetTick>
 8001986:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_RCC_OscConfig+0x2cc>)
 800198a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800198e:	f013 0f02 	tst.w	r3, #2
 8001992:	d143      	bne.n	8001a1c <HAL_RCC_OscConfig+0x344>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001994:	f7ff fb4c 	bl	8001030 <HAL_GetTick>
 8001998:	1b80      	subs	r0, r0, r6
 800199a:	2802      	cmp	r0, #2
 800199c:	d9f4      	bls.n	8001988 <HAL_RCC_OscConfig+0x2b0>
          return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e1d0      	b.n	8001d44 <HAL_RCC_OscConfig+0x66c>
 80019a2:	bf00      	nop
 80019a4:	40021000 	.word	0x40021000
 80019a8:	080034f8 	.word	0x080034f8
 80019ac:	20000000 	.word	0x20000000
 80019b0:	20000008 	.word	0x20000008
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b4:	4ab0      	ldr	r2, [pc, #704]	; (8001c78 <HAL_RCC_OscConfig+0x5a0>)
 80019b6:	6853      	ldr	r3, [r2, #4]
 80019b8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80019bc:	6921      	ldr	r1, [r4, #16]
 80019be:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80019c2:	6053      	str	r3, [r2, #4]
 80019c4:	e7cf      	b.n	8001966 <HAL_RCC_OscConfig+0x28e>
        __HAL_RCC_HSI_DISABLE();
 80019c6:	4aac      	ldr	r2, [pc, #688]	; (8001c78 <HAL_RCC_OscConfig+0x5a0>)
 80019c8:	6813      	ldr	r3, [r2, #0]
 80019ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019ce:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80019d0:	f7ff fb2e 	bl	8001030 <HAL_GetTick>
 80019d4:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019d6:	4ba8      	ldr	r3, [pc, #672]	; (8001c78 <HAL_RCC_OscConfig+0x5a0>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80019de:	d0c2      	beq.n	8001966 <HAL_RCC_OscConfig+0x28e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e0:	f7ff fb26 	bl	8001030 <HAL_GetTick>
 80019e4:	1b80      	subs	r0, r0, r6
 80019e6:	2802      	cmp	r0, #2
 80019e8:	d9f5      	bls.n	80019d6 <HAL_RCC_OscConfig+0x2fe>
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e1aa      	b.n	8001d44 <HAL_RCC_OscConfig+0x66c>
      __HAL_RCC_LSI_DISABLE();
 80019ee:	4aa2      	ldr	r2, [pc, #648]	; (8001c78 <HAL_RCC_OscConfig+0x5a0>)
 80019f0:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80019f4:	f023 0301 	bic.w	r3, r3, #1
 80019f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80019fc:	f7ff fb18 	bl	8001030 <HAL_GetTick>
 8001a00:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a02:	4b9d      	ldr	r3, [pc, #628]	; (8001c78 <HAL_RCC_OscConfig+0x5a0>)
 8001a04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a08:	f013 0f02 	tst.w	r3, #2
 8001a0c:	d006      	beq.n	8001a1c <HAL_RCC_OscConfig+0x344>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a0e:	f7ff fb0f 	bl	8001030 <HAL_GetTick>
 8001a12:	1b80      	subs	r0, r0, r6
 8001a14:	2802      	cmp	r0, #2
 8001a16:	d9f4      	bls.n	8001a02 <HAL_RCC_OscConfig+0x32a>
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e193      	b.n	8001d44 <HAL_RCC_OscConfig+0x66c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a1c:	6823      	ldr	r3, [r4, #0]
 8001a1e:	f013 0f04 	tst.w	r3, #4
 8001a22:	d07a      	beq.n	8001b1a <HAL_RCC_OscConfig+0x442>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a24:	4b94      	ldr	r3, [pc, #592]	; (8001c78 <HAL_RCC_OscConfig+0x5a0>)
 8001a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a28:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001a2c:	d10b      	bne.n	8001a46 <HAL_RCC_OscConfig+0x36e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a2e:	4b92      	ldr	r3, [pc, #584]	; (8001c78 <HAL_RCC_OscConfig+0x5a0>)
 8001a30:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a32:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a36:	659a      	str	r2, [r3, #88]	; 0x58
 8001a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3e:	9301      	str	r3, [sp, #4]
 8001a40:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001a42:	2601      	movs	r6, #1
 8001a44:	e000      	b.n	8001a48 <HAL_RCC_OscConfig+0x370>
    FlagStatus       pwrclkchanged = RESET;
 8001a46:	2600      	movs	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a48:	4b8c      	ldr	r3, [pc, #560]	; (8001c7c <HAL_RCC_OscConfig+0x5a4>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001a50:	d026      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x3c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a52:	68a3      	ldr	r3, [r4, #8]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d037      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x3f0>
 8001a58:	2b05      	cmp	r3, #5
 8001a5a:	d03d      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x400>
 8001a5c:	4b86      	ldr	r3, [pc, #536]	; (8001c78 <HAL_RCC_OscConfig+0x5a0>)
 8001a5e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001a62:	f022 0201 	bic.w	r2, r2, #1
 8001a66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001a6a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001a6e:	f022 0204 	bic.w	r2, r2, #4
 8001a72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a76:	68a3      	ldr	r3, [r4, #8]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d03b      	beq.n	8001af4 <HAL_RCC_OscConfig+0x41c>
      tickstart = HAL_GetTick();
 8001a7c:	f7ff fad8 	bl	8001030 <HAL_GetTick>
 8001a80:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a82:	4b7d      	ldr	r3, [pc, #500]	; (8001c78 <HAL_RCC_OscConfig+0x5a0>)
 8001a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a88:	f013 0f02 	tst.w	r3, #2
 8001a8c:	d144      	bne.n	8001b18 <HAL_RCC_OscConfig+0x440>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a8e:	f7ff facf 	bl	8001030 <HAL_GetTick>
 8001a92:	1bc0      	subs	r0, r0, r7
 8001a94:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a98:	4298      	cmp	r0, r3
 8001a9a:	d9f2      	bls.n	8001a82 <HAL_RCC_OscConfig+0x3aa>
          return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e151      	b.n	8001d44 <HAL_RCC_OscConfig+0x66c>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001aa0:	4a76      	ldr	r2, [pc, #472]	; (8001c7c <HAL_RCC_OscConfig+0x5a4>)
 8001aa2:	6813      	ldr	r3, [r2, #0]
 8001aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001aaa:	f7ff fac1 	bl	8001030 <HAL_GetTick>
 8001aae:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ab0:	4b72      	ldr	r3, [pc, #456]	; (8001c7c <HAL_RCC_OscConfig+0x5a4>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001ab8:	d1cb      	bne.n	8001a52 <HAL_RCC_OscConfig+0x37a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aba:	f7ff fab9 	bl	8001030 <HAL_GetTick>
 8001abe:	1bc0      	subs	r0, r0, r7
 8001ac0:	2802      	cmp	r0, #2
 8001ac2:	d9f5      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x3d8>
          return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e13d      	b.n	8001d44 <HAL_RCC_OscConfig+0x66c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ac8:	4a6b      	ldr	r2, [pc, #428]	; (8001c78 <HAL_RCC_OscConfig+0x5a0>)
 8001aca:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ad6:	e7ce      	b.n	8001a76 <HAL_RCC_OscConfig+0x39e>
 8001ad8:	4b67      	ldr	r3, [pc, #412]	; (8001c78 <HAL_RCC_OscConfig+0x5a0>)
 8001ada:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001ade:	f042 0204 	orr.w	r2, r2, #4
 8001ae2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001ae6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001aea:	f042 0201 	orr.w	r2, r2, #1
 8001aee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001af2:	e7c0      	b.n	8001a76 <HAL_RCC_OscConfig+0x39e>
      tickstart = HAL_GetTick();
 8001af4:	f7ff fa9c 	bl	8001030 <HAL_GetTick>
 8001af8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001afa:	4b5f      	ldr	r3, [pc, #380]	; (8001c78 <HAL_RCC_OscConfig+0x5a0>)
 8001afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b00:	f013 0f02 	tst.w	r3, #2
 8001b04:	d008      	beq.n	8001b18 <HAL_RCC_OscConfig+0x440>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b06:	f7ff fa93 	bl	8001030 <HAL_GetTick>
 8001b0a:	1bc0      	subs	r0, r0, r7
 8001b0c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b10:	4298      	cmp	r0, r3
 8001b12:	d9f2      	bls.n	8001afa <HAL_RCC_OscConfig+0x422>
          return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e115      	b.n	8001d44 <HAL_RCC_OscConfig+0x66c>
    if(pwrclkchanged == SET)
 8001b18:	b9e6      	cbnz	r6, 8001b54 <HAL_RCC_OscConfig+0x47c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b1a:	6823      	ldr	r3, [r4, #0]
 8001b1c:	f013 0f20 	tst.w	r3, #32
 8001b20:	d035      	beq.n	8001b8e <HAL_RCC_OscConfig+0x4b6>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b24:	b1e3      	cbz	r3, 8001b60 <HAL_RCC_OscConfig+0x488>
      __HAL_RCC_HSI48_ENABLE();
 8001b26:	4a54      	ldr	r2, [pc, #336]	; (8001c78 <HAL_RCC_OscConfig+0x5a0>)
 8001b28:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001b34:	f7ff fa7c 	bl	8001030 <HAL_GetTick>
 8001b38:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b3a:	4b4f      	ldr	r3, [pc, #316]	; (8001c78 <HAL_RCC_OscConfig+0x5a0>)
 8001b3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b40:	f013 0f02 	tst.w	r3, #2
 8001b44:	d123      	bne.n	8001b8e <HAL_RCC_OscConfig+0x4b6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b46:	f7ff fa73 	bl	8001030 <HAL_GetTick>
 8001b4a:	1b80      	subs	r0, r0, r6
 8001b4c:	2802      	cmp	r0, #2
 8001b4e:	d9f4      	bls.n	8001b3a <HAL_RCC_OscConfig+0x462>
          return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e0f7      	b.n	8001d44 <HAL_RCC_OscConfig+0x66c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b54:	4a48      	ldr	r2, [pc, #288]	; (8001c78 <HAL_RCC_OscConfig+0x5a0>)
 8001b56:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001b58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b5c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b5e:	e7dc      	b.n	8001b1a <HAL_RCC_OscConfig+0x442>
      __HAL_RCC_HSI48_DISABLE();
 8001b60:	4a45      	ldr	r2, [pc, #276]	; (8001c78 <HAL_RCC_OscConfig+0x5a0>)
 8001b62:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8001b66:	f023 0301 	bic.w	r3, r3, #1
 8001b6a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001b6e:	f7ff fa5f 	bl	8001030 <HAL_GetTick>
 8001b72:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b74:	4b40      	ldr	r3, [pc, #256]	; (8001c78 <HAL_RCC_OscConfig+0x5a0>)
 8001b76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b7a:	f013 0f02 	tst.w	r3, #2
 8001b7e:	d006      	beq.n	8001b8e <HAL_RCC_OscConfig+0x4b6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b80:	f7ff fa56 	bl	8001030 <HAL_GetTick>
 8001b84:	1b80      	subs	r0, r0, r6
 8001b86:	2802      	cmp	r0, #2
 8001b88:	d9f4      	bls.n	8001b74 <HAL_RCC_OscConfig+0x49c>
          return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e0da      	b.n	8001d44 <HAL_RCC_OscConfig+0x66c>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f000 80d6 	beq.w	8001d42 <HAL_RCC_OscConfig+0x66a>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d027      	beq.n	8001bea <HAL_RCC_OscConfig+0x512>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b9a:	2d0c      	cmp	r5, #12
 8001b9c:	f000 80db 	beq.w	8001d56 <HAL_RCC_OscConfig+0x67e>
        __HAL_RCC_PLL_DISABLE();
 8001ba0:	4b35      	ldr	r3, [pc, #212]	; (8001c78 <HAL_RCC_OscConfig+0x5a0>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001ba8:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001bb0:	d104      	bne.n	8001bbc <HAL_RCC_OscConfig+0x4e4>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001bb2:	4a31      	ldr	r2, [pc, #196]	; (8001c78 <HAL_RCC_OscConfig+0x5a0>)
 8001bb4:	68d3      	ldr	r3, [r2, #12]
 8001bb6:	f023 0303 	bic.w	r3, r3, #3
 8001bba:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001bbc:	4a2e      	ldr	r2, [pc, #184]	; (8001c78 <HAL_RCC_OscConfig+0x5a0>)
 8001bbe:	68d3      	ldr	r3, [r2, #12]
 8001bc0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001bc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc8:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8001bca:	f7ff fa31 	bl	8001030 <HAL_GetTick>
 8001bce:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bd0:	4b29      	ldr	r3, [pc, #164]	; (8001c78 <HAL_RCC_OscConfig+0x5a0>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001bd8:	f000 80a6 	beq.w	8001d28 <HAL_RCC_OscConfig+0x650>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bdc:	f7ff fa28 	bl	8001030 <HAL_GetTick>
 8001be0:	1b00      	subs	r0, r0, r4
 8001be2:	2802      	cmp	r0, #2
 8001be4:	d9f4      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x4f8>
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e0ac      	b.n	8001d44 <HAL_RCC_OscConfig+0x66c>
      pll_config = RCC->PLLCFGR;
 8001bea:	4b23      	ldr	r3, [pc, #140]	; (8001c78 <HAL_RCC_OscConfig+0x5a0>)
 8001bec:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bee:	f003 0103 	and.w	r1, r3, #3
 8001bf2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001bf4:	4291      	cmp	r1, r2
 8001bf6:	d009      	beq.n	8001c0c <HAL_RCC_OscConfig+0x534>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bf8:	2d0c      	cmp	r5, #12
 8001bfa:	f000 80a6 	beq.w	8001d4a <HAL_RCC_OscConfig+0x672>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001bfe:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <HAL_RCC_OscConfig+0x5a0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8001c06:	d03b      	beq.n	8001c80 <HAL_RCC_OscConfig+0x5a8>
            return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e09b      	b.n	8001d44 <HAL_RCC_OscConfig+0x66c>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c0c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c10:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001c12:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c14:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8001c18:	d1ee      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x520>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c1a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c20:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8001c24:	d1e8      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x520>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c26:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001c2a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c2c:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8001c30:	d1e2      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x520>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c32:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8001c36:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001c38:	0852      	lsrs	r2, r2, #1
 8001c3a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c3c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8001c40:	d1da      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x520>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c42:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8001c46:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001c48:	0852      	lsrs	r2, r2, #1
 8001c4a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c4c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8001c50:	d1d2      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x520>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <HAL_RCC_OscConfig+0x5a0>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c5a:	d178      	bne.n	8001d4e <HAL_RCC_OscConfig+0x676>
          __HAL_RCC_PLL_ENABLE();
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <HAL_RCC_OscConfig+0x5a0>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001c64:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001c6c:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 8001c6e:	f7ff f9df 	bl	8001030 <HAL_GetTick>
 8001c72:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c74:	e051      	b.n	8001d1a <HAL_RCC_OscConfig+0x642>
 8001c76:	bf00      	nop
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40007000 	.word	0x40007000
            __HAL_RCC_PLL_DISABLE();
 8001c80:	4a36      	ldr	r2, [pc, #216]	; (8001d5c <HAL_RCC_OscConfig+0x684>)
 8001c82:	6813      	ldr	r3, [r2, #0]
 8001c84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c88:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8001c8a:	f7ff f9d1 	bl	8001030 <HAL_GetTick>
 8001c8e:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c90:	4b32      	ldr	r3, [pc, #200]	; (8001d5c <HAL_RCC_OscConfig+0x684>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c98:	d006      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x5d0>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c9a:	f7ff f9c9 	bl	8001030 <HAL_GetTick>
 8001c9e:	1b40      	subs	r0, r0, r5
 8001ca0:	2802      	cmp	r0, #2
 8001ca2:	d9f5      	bls.n	8001c90 <HAL_RCC_OscConfig+0x5b8>
                return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e04d      	b.n	8001d44 <HAL_RCC_OscConfig+0x66c>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ca8:	4a2c      	ldr	r2, [pc, #176]	; (8001d5c <HAL_RCC_OscConfig+0x684>)
 8001caa:	68d3      	ldr	r3, [r2, #12]
 8001cac:	492c      	ldr	r1, [pc, #176]	; (8001d60 <HAL_RCC_OscConfig+0x688>)
 8001cae:	4019      	ands	r1, r3
 8001cb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001cb2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001cb4:	3801      	subs	r0, #1
 8001cb6:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8001cba:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001cbc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001cc0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001cc2:	0840      	lsrs	r0, r0, #1
 8001cc4:	3801      	subs	r0, #1
 8001cc6:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8001cca:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001ccc:	0840      	lsrs	r0, r0, #1
 8001cce:	3801      	subs	r0, #1
 8001cd0:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001cd4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001cd6:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8001cda:	430b      	orrs	r3, r1
 8001cdc:	60d3      	str	r3, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 8001cde:	6813      	ldr	r3, [r2, #0]
 8001ce0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ce4:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ce6:	68d3      	ldr	r3, [r2, #12]
 8001ce8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cec:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 8001cee:	f7ff f99f 	bl	8001030 <HAL_GetTick>
 8001cf2:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf4:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <HAL_RCC_OscConfig+0x684>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001cfc:	d106      	bne.n	8001d0c <HAL_RCC_OscConfig+0x634>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cfe:	f7ff f997 	bl	8001030 <HAL_GetTick>
 8001d02:	1b00      	subs	r0, r0, r4
 8001d04:	2802      	cmp	r0, #2
 8001d06:	d9f5      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x61c>
                return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e01b      	b.n	8001d44 <HAL_RCC_OscConfig+0x66c>
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	e019      	b.n	8001d44 <HAL_RCC_OscConfig+0x66c>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d10:	f7ff f98e 	bl	8001030 <HAL_GetTick>
 8001d14:	1b00      	subs	r0, r0, r4
 8001d16:	2802      	cmp	r0, #2
 8001d18:	d81b      	bhi.n	8001d52 <HAL_RCC_OscConfig+0x67a>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d1a:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <HAL_RCC_OscConfig+0x684>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001d22:	d0f5      	beq.n	8001d10 <HAL_RCC_OscConfig+0x638>
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
 8001d26:	e00d      	b.n	8001d44 <HAL_RCC_OscConfig+0x66c>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	e00b      	b.n	8001d44 <HAL_RCC_OscConfig+0x66c>
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	4770      	bx	lr
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e006      	b.n	8001d44 <HAL_RCC_OscConfig+0x66c>
            return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e004      	b.n	8001d44 <HAL_RCC_OscConfig+0x66c>
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e002      	b.n	8001d44 <HAL_RCC_OscConfig+0x66c>
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e000      	b.n	8001d44 <HAL_RCC_OscConfig+0x66c>
  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	b003      	add	sp, #12
 8001d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e7fa      	b.n	8001d44 <HAL_RCC_OscConfig+0x66c>
  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	e7f8      	b.n	8001d44 <HAL_RCC_OscConfig+0x66c>
              return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e7f6      	b.n	8001d44 <HAL_RCC_OscConfig+0x66c>
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e7f4      	b.n	8001d44 <HAL_RCC_OscConfig+0x66c>
 8001d5a:	bf00      	nop
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	019d808c 	.word	0x019d808c

08001d64 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001d64:	2800      	cmp	r0, #0
 8001d66:	f000 809b 	beq.w	8001ea0 <HAL_RCC_ClockConfig+0x13c>
{
 8001d6a:	b570      	push	{r4, r5, r6, lr}
 8001d6c:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d6e:	4b4e      	ldr	r3, [pc, #312]	; (8001ea8 <HAL_RCC_ClockConfig+0x144>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	428b      	cmp	r3, r1
 8001d78:	d20c      	bcs.n	8001d94 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7a:	4a4b      	ldr	r2, [pc, #300]	; (8001ea8 <HAL_RCC_ClockConfig+0x144>)
 8001d7c:	6813      	ldr	r3, [r2, #0]
 8001d7e:	f023 0307 	bic.w	r3, r3, #7
 8001d82:	430b      	orrs	r3, r1
 8001d84:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d86:	6813      	ldr	r3, [r2, #0]
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	428b      	cmp	r3, r1
 8001d8e:	d001      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8001d90:	2001      	movs	r0, #1
}
 8001d92:	bd70      	pop	{r4, r5, r6, pc}
 8001d94:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d96:	6823      	ldr	r3, [r4, #0]
 8001d98:	f013 0f01 	tst.w	r3, #1
 8001d9c:	d039      	beq.n	8001e12 <HAL_RCC_ClockConfig+0xae>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d9e:	6863      	ldr	r3, [r4, #4]
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	d009      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x54>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d026      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x92>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001da8:	bb63      	cbnz	r3, 8001e04 <HAL_RCC_ClockConfig+0xa0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001daa:	4a40      	ldr	r2, [pc, #256]	; (8001eac <HAL_RCC_ClockConfig+0x148>)
 8001dac:	6812      	ldr	r2, [r2, #0]
 8001dae:	f012 0f02 	tst.w	r2, #2
 8001db2:	d106      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 8001db4:	2001      	movs	r0, #1
 8001db6:	e7ec      	b.n	8001d92 <HAL_RCC_ClockConfig+0x2e>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db8:	4a3c      	ldr	r2, [pc, #240]	; (8001eac <HAL_RCC_ClockConfig+0x148>)
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001dc0:	d070      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x140>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dc2:	493a      	ldr	r1, [pc, #232]	; (8001eac <HAL_RCC_ClockConfig+0x148>)
 8001dc4:	688a      	ldr	r2, [r1, #8]
 8001dc6:	f022 0203 	bic.w	r2, r2, #3
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001dce:	f7ff f92f 	bl	8001030 <HAL_GetTick>
 8001dd2:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd4:	4b35      	ldr	r3, [pc, #212]	; (8001eac <HAL_RCC_ClockConfig+0x148>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 030c 	and.w	r3, r3, #12
 8001ddc:	6862      	ldr	r2, [r4, #4]
 8001dde:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001de2:	d016      	beq.n	8001e12 <HAL_RCC_ClockConfig+0xae>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de4:	f7ff f924 	bl	8001030 <HAL_GetTick>
 8001de8:	1b80      	subs	r0, r0, r6
 8001dea:	f241 3388 	movw	r3, #5000	; 0x1388
 8001dee:	4298      	cmp	r0, r3
 8001df0:	d9f0      	bls.n	8001dd4 <HAL_RCC_ClockConfig+0x70>
        return HAL_TIMEOUT;
 8001df2:	2003      	movs	r0, #3
 8001df4:	e7cd      	b.n	8001d92 <HAL_RCC_ClockConfig+0x2e>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001df6:	4a2d      	ldr	r2, [pc, #180]	; (8001eac <HAL_RCC_ClockConfig+0x148>)
 8001df8:	6812      	ldr	r2, [r2, #0]
 8001dfa:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001dfe:	d1e0      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 8001e00:	2001      	movs	r0, #1
 8001e02:	e7c6      	b.n	8001d92 <HAL_RCC_ClockConfig+0x2e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e04:	4a29      	ldr	r2, [pc, #164]	; (8001eac <HAL_RCC_ClockConfig+0x148>)
 8001e06:	6812      	ldr	r2, [r2, #0]
 8001e08:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001e0c:	d1d9      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 8001e0e:	2001      	movs	r0, #1
 8001e10:	e7bf      	b.n	8001d92 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e12:	6823      	ldr	r3, [r4, #0]
 8001e14:	f013 0f02 	tst.w	r3, #2
 8001e18:	d006      	beq.n	8001e28 <HAL_RCC_ClockConfig+0xc4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e1a:	4a24      	ldr	r2, [pc, #144]	; (8001eac <HAL_RCC_ClockConfig+0x148>)
 8001e1c:	6893      	ldr	r3, [r2, #8]
 8001e1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e22:	68a1      	ldr	r1, [r4, #8]
 8001e24:	430b      	orrs	r3, r1
 8001e26:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e28:	4b1f      	ldr	r3, [pc, #124]	; (8001ea8 <HAL_RCC_ClockConfig+0x144>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	42ab      	cmp	r3, r5
 8001e32:	d90c      	bls.n	8001e4e <HAL_RCC_ClockConfig+0xea>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e34:	4a1c      	ldr	r2, [pc, #112]	; (8001ea8 <HAL_RCC_ClockConfig+0x144>)
 8001e36:	6813      	ldr	r3, [r2, #0]
 8001e38:	f023 0307 	bic.w	r3, r3, #7
 8001e3c:	432b      	orrs	r3, r5
 8001e3e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e40:	6813      	ldr	r3, [r2, #0]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	42ab      	cmp	r3, r5
 8001e48:	d001      	beq.n	8001e4e <HAL_RCC_ClockConfig+0xea>
      return HAL_ERROR;
 8001e4a:	2001      	movs	r0, #1
 8001e4c:	e7a1      	b.n	8001d92 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e4e:	6823      	ldr	r3, [r4, #0]
 8001e50:	f013 0f04 	tst.w	r3, #4
 8001e54:	d006      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x100>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e56:	4a15      	ldr	r2, [pc, #84]	; (8001eac <HAL_RCC_ClockConfig+0x148>)
 8001e58:	6893      	ldr	r3, [r2, #8]
 8001e5a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e5e:	68e1      	ldr	r1, [r4, #12]
 8001e60:	430b      	orrs	r3, r1
 8001e62:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e64:	6823      	ldr	r3, [r4, #0]
 8001e66:	f013 0f08 	tst.w	r3, #8
 8001e6a:	d007      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x118>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e6c:	4a0f      	ldr	r2, [pc, #60]	; (8001eac <HAL_RCC_ClockConfig+0x148>)
 8001e6e:	6893      	ldr	r3, [r2, #8]
 8001e70:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001e74:	6921      	ldr	r1, [r4, #16]
 8001e76:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001e7a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e7c:	f7ff fbd2 	bl	8001624 <HAL_RCC_GetSysClockFreq>
 8001e80:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <HAL_RCC_ClockConfig+0x148>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001e88:	4a09      	ldr	r2, [pc, #36]	; (8001eb0 <HAL_RCC_ClockConfig+0x14c>)
 8001e8a:	5cd3      	ldrb	r3, [r2, r3]
 8001e8c:	f003 031f 	and.w	r3, r3, #31
 8001e90:	40d8      	lsrs	r0, r3
 8001e92:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <HAL_RCC_ClockConfig+0x150>)
 8001e94:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8001e96:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <HAL_RCC_ClockConfig+0x154>)
 8001e98:	6818      	ldr	r0, [r3, #0]
 8001e9a:	f7ff f887 	bl	8000fac <HAL_InitTick>
  return status;
 8001e9e:	e778      	b.n	8001d92 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001ea0:	2001      	movs	r0, #1
}
 8001ea2:	4770      	bx	lr
        return HAL_ERROR;
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	e774      	b.n	8001d92 <HAL_RCC_ClockConfig+0x2e>
 8001ea8:	40022000 	.word	0x40022000
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	080034f8 	.word	0x080034f8
 8001eb4:	20000000 	.word	0x20000000
 8001eb8:	20000008 	.word	0x20000008

08001ebc <HAL_RCC_GetHCLKFreq>:
}
 8001ebc:	4b01      	ldr	r3, [pc, #4]	; (8001ec4 <HAL_RCC_GetHCLKFreq+0x8>)
 8001ebe:	6818      	ldr	r0, [r3, #0]
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	20000000 	.word	0x20000000

08001ec8 <HAL_RCC_GetPCLK1Freq>:
{
 8001ec8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001eca:	f7ff fff7 	bl	8001ebc <HAL_RCC_GetHCLKFreq>
 8001ece:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001ed6:	4a04      	ldr	r2, [pc, #16]	; (8001ee8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ed8:	5cd3      	ldrb	r3, [r2, r3]
 8001eda:	f003 031f 	and.w	r3, r3, #31
}
 8001ede:	40d8      	lsrs	r0, r3
 8001ee0:	bd08      	pop	{r3, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	08003508 	.word	0x08003508

08001eec <HAL_RCC_GetPCLK2Freq>:
{
 8001eec:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001eee:	f7ff ffe5 	bl	8001ebc <HAL_RCC_GetHCLKFreq>
 8001ef2:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001efa:	4a04      	ldr	r2, [pc, #16]	; (8001f0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001efc:	5cd3      	ldrb	r3, [r2, r3]
 8001efe:	f003 031f 	and.w	r3, r3, #31
}
 8001f02:	40d8      	lsrs	r0, r3
 8001f04:	bd08      	pop	{r3, pc}
 8001f06:	bf00      	nop
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	08003508 	.word	0x08003508

08001f10 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001f12:	4b59      	ldr	r3, [pc, #356]	; (8002078 <RCCEx_PLLSAI1_Config+0x168>)
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	f013 0f03 	tst.w	r3, #3
 8001f1a:	d018      	beq.n	8001f4e <RCCEx_PLLSAI1_Config+0x3e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001f1c:	4b56      	ldr	r3, [pc, #344]	; (8002078 <RCCEx_PLLSAI1_Config+0x168>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	6802      	ldr	r2, [r0, #0]
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d002      	beq.n	8001f30 <RCCEx_PLLSAI1_Config+0x20>
 8001f2a:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 8001f2c:	4628      	mov	r0, r5
 8001f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8001f30:	2a00      	cmp	r2, #0
 8001f32:	f000 809f 	beq.w	8002074 <RCCEx_PLLSAI1_Config+0x164>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001f36:	4b50      	ldr	r3, [pc, #320]	; (8002078 <RCCEx_PLLSAI1_Config+0x168>)
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001f3e:	3301      	adds	r3, #1
 8001f40:	6842      	ldr	r2, [r0, #4]
       ||
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d001      	beq.n	8001f4a <RCCEx_PLLSAI1_Config+0x3a>
 8001f46:	2501      	movs	r5, #1
 8001f48:	e7f0      	b.n	8001f2c <RCCEx_PLLSAI1_Config+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 8001f4a:	2500      	movs	r5, #0
 8001f4c:	e01a      	b.n	8001f84 <RCCEx_PLLSAI1_Config+0x74>
    switch(PllSai1->PLLSAI1Source)
 8001f4e:	6803      	ldr	r3, [r0, #0]
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d058      	beq.n	8002006 <RCCEx_PLLSAI1_Config+0xf6>
 8001f54:	2b03      	cmp	r3, #3
 8001f56:	d05d      	beq.n	8002014 <RCCEx_PLLSAI1_Config+0x104>
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d001      	beq.n	8001f60 <RCCEx_PLLSAI1_Config+0x50>
      status = HAL_ERROR;
 8001f5c:	2501      	movs	r5, #1
 8001f5e:	e00f      	b.n	8001f80 <RCCEx_PLLSAI1_Config+0x70>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001f60:	4a45      	ldr	r2, [pc, #276]	; (8002078 <RCCEx_PLLSAI1_Config+0x168>)
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	f012 0f02 	tst.w	r2, #2
 8001f68:	d060      	beq.n	800202c <RCCEx_PLLSAI1_Config+0x11c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001f6a:	4d43      	ldr	r5, [pc, #268]	; (8002078 <RCCEx_PLLSAI1_Config+0x168>)
 8001f6c:	68ea      	ldr	r2, [r5, #12]
 8001f6e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8001f72:	6844      	ldr	r4, [r0, #4]
 8001f74:	3c01      	subs	r4, #1
 8001f76:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	60eb      	str	r3, [r5, #12]
 8001f7e:	2500      	movs	r5, #0
  if(status == HAL_OK)
 8001f80:	2d00      	cmp	r5, #0
 8001f82:	d1d3      	bne.n	8001f2c <RCCEx_PLLSAI1_Config+0x1c>
 8001f84:	460f      	mov	r7, r1
 8001f86:	4604      	mov	r4, r0
    __HAL_RCC_PLLSAI1_DISABLE();
 8001f88:	4a3b      	ldr	r2, [pc, #236]	; (8002078 <RCCEx_PLLSAI1_Config+0x168>)
 8001f8a:	6813      	ldr	r3, [r2, #0]
 8001f8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001f90:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001f92:	f7ff f84d 	bl	8001030 <HAL_GetTick>
 8001f96:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001f98:	4b37      	ldr	r3, [pc, #220]	; (8002078 <RCCEx_PLLSAI1_Config+0x168>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001fa0:	d005      	beq.n	8001fae <RCCEx_PLLSAI1_Config+0x9e>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001fa2:	f7ff f845 	bl	8001030 <HAL_GetTick>
 8001fa6:	1b80      	subs	r0, r0, r6
 8001fa8:	2802      	cmp	r0, #2
 8001faa:	d9f5      	bls.n	8001f98 <RCCEx_PLLSAI1_Config+0x88>
        status = HAL_TIMEOUT;
 8001fac:	2503      	movs	r5, #3
    if(status == HAL_OK)
 8001fae:	2d00      	cmp	r5, #0
 8001fb0:	d1bc      	bne.n	8001f2c <RCCEx_PLLSAI1_Config+0x1c>
      if(Divider == DIVIDER_P_UPDATE)
 8001fb2:	2f00      	cmp	r7, #0
 8001fb4:	d13c      	bne.n	8002030 <RCCEx_PLLSAI1_Config+0x120>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001fb6:	4930      	ldr	r1, [pc, #192]	; (8002078 <RCCEx_PLLSAI1_Config+0x168>)
 8001fb8:	690b      	ldr	r3, [r1, #16]
 8001fba:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8001fbe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001fc2:	68a0      	ldr	r0, [r4, #8]
 8001fc4:	68e2      	ldr	r2, [r4, #12]
 8001fc6:	06d2      	lsls	r2, r2, #27
 8001fc8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8001fd0:	4a29      	ldr	r2, [pc, #164]	; (8002078 <RCCEx_PLLSAI1_Config+0x168>)
 8001fd2:	6813      	ldr	r3, [r2, #0]
 8001fd4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001fd8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001fda:	f7ff f829 	bl	8001030 <HAL_GetTick>
 8001fde:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001fe0:	4b25      	ldr	r3, [pc, #148]	; (8002078 <RCCEx_PLLSAI1_Config+0x168>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001fe8:	d105      	bne.n	8001ff6 <RCCEx_PLLSAI1_Config+0xe6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001fea:	f7ff f821 	bl	8001030 <HAL_GetTick>
 8001fee:	1b80      	subs	r0, r0, r6
 8001ff0:	2802      	cmp	r0, #2
 8001ff2:	d9f5      	bls.n	8001fe0 <RCCEx_PLLSAI1_Config+0xd0>
          status = HAL_TIMEOUT;
 8001ff4:	2503      	movs	r5, #3
      if(status == HAL_OK)
 8001ff6:	2d00      	cmp	r5, #0
 8001ff8:	d198      	bne.n	8001f2c <RCCEx_PLLSAI1_Config+0x1c>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001ffa:	4a1f      	ldr	r2, [pc, #124]	; (8002078 <RCCEx_PLLSAI1_Config+0x168>)
 8001ffc:	6913      	ldr	r3, [r2, #16]
 8001ffe:	69a1      	ldr	r1, [r4, #24]
 8002000:	430b      	orrs	r3, r1
 8002002:	6113      	str	r3, [r2, #16]
 8002004:	e792      	b.n	8001f2c <RCCEx_PLLSAI1_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002006:	4a1c      	ldr	r2, [pc, #112]	; (8002078 <RCCEx_PLLSAI1_Config+0x168>)
 8002008:	6812      	ldr	r2, [r2, #0]
 800200a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800200e:	d1ac      	bne.n	8001f6a <RCCEx_PLLSAI1_Config+0x5a>
        status = HAL_ERROR;
 8002010:	2501      	movs	r5, #1
 8002012:	e7b5      	b.n	8001f80 <RCCEx_PLLSAI1_Config+0x70>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002014:	4a18      	ldr	r2, [pc, #96]	; (8002078 <RCCEx_PLLSAI1_Config+0x168>)
 8002016:	6812      	ldr	r2, [r2, #0]
 8002018:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800201c:	d1a5      	bne.n	8001f6a <RCCEx_PLLSAI1_Config+0x5a>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800201e:	4a16      	ldr	r2, [pc, #88]	; (8002078 <RCCEx_PLLSAI1_Config+0x168>)
 8002020:	6812      	ldr	r2, [r2, #0]
 8002022:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002026:	d1a0      	bne.n	8001f6a <RCCEx_PLLSAI1_Config+0x5a>
          status = HAL_ERROR;
 8002028:	2501      	movs	r5, #1
 800202a:	e7a9      	b.n	8001f80 <RCCEx_PLLSAI1_Config+0x70>
        status = HAL_ERROR;
 800202c:	2501      	movs	r5, #1
 800202e:	e7a7      	b.n	8001f80 <RCCEx_PLLSAI1_Config+0x70>
      else if(Divider == DIVIDER_Q_UPDATE)
 8002030:	2f01      	cmp	r7, #1
 8002032:	d00f      	beq.n	8002054 <RCCEx_PLLSAI1_Config+0x144>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002034:	4810      	ldr	r0, [pc, #64]	; (8002078 <RCCEx_PLLSAI1_Config+0x168>)
 8002036:	6902      	ldr	r2, [r0, #16]
 8002038:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 800203c:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002040:	68a1      	ldr	r1, [r4, #8]
 8002042:	6963      	ldr	r3, [r4, #20]
 8002044:	085b      	lsrs	r3, r3, #1
 8002046:	3b01      	subs	r3, #1
 8002048:	065b      	lsls	r3, r3, #25
 800204a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800204e:	4313      	orrs	r3, r2
 8002050:	6103      	str	r3, [r0, #16]
 8002052:	e7bd      	b.n	8001fd0 <RCCEx_PLLSAI1_Config+0xc0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002054:	4808      	ldr	r0, [pc, #32]	; (8002078 <RCCEx_PLLSAI1_Config+0x168>)
 8002056:	6902      	ldr	r2, [r0, #16]
 8002058:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800205c:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002060:	68a1      	ldr	r1, [r4, #8]
 8002062:	6923      	ldr	r3, [r4, #16]
 8002064:	085b      	lsrs	r3, r3, #1
 8002066:	3b01      	subs	r3, #1
 8002068:	055b      	lsls	r3, r3, #21
 800206a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800206e:	4313      	orrs	r3, r2
 8002070:	6103      	str	r3, [r0, #16]
 8002072:	e7ad      	b.n	8001fd0 <RCCEx_PLLSAI1_Config+0xc0>
 8002074:	2501      	movs	r5, #1
 8002076:	e759      	b.n	8001f2c <RCCEx_PLLSAI1_Config+0x1c>
 8002078:	40021000 	.word	0x40021000

0800207c <HAL_RCCEx_PeriphCLKConfig>:
{
 800207c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002084:	6803      	ldr	r3, [r0, #0]
 8002086:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800208a:	d026      	beq.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x5e>
    switch(PeriphClkInit->Sai1ClockSelection)
 800208c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800208e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002092:	d006      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002094:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002098:	d01d      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800209a:	b19b      	cbz	r3, 80020c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      ret = HAL_ERROR;
 800209c:	2601      	movs	r6, #1
 800209e:	4637      	mov	r7, r6
 80020a0:	e01d      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x62>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80020a2:	4aae      	ldr	r2, [pc, #696]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80020a4:	68d3      	ldr	r3, [r2, #12]
 80020a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020aa:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020ac:	2700      	movs	r7, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020ae:	4aab      	ldr	r2, [pc, #684]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80020b0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80020b4:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80020b8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80020ba:	430b      	orrs	r3, r1
 80020bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020c0:	2600      	movs	r6, #0
 80020c2:	e00c      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x62>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020c4:	2100      	movs	r1, #0
 80020c6:	3004      	adds	r0, #4
 80020c8:	f7ff ff22 	bl	8001f10 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 80020cc:	4607      	mov	r7, r0
 80020ce:	2800      	cmp	r0, #0
 80020d0:	d0ed      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x32>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020d2:	4606      	mov	r6, r0
 80020d4:	e003      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x62>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020d6:	2700      	movs	r7, #0
 80020d8:	e7e9      	b.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x32>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020da:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020dc:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020de:	6823      	ldr	r3, [r4, #0]
 80020e0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80020e4:	d06b      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x142>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020e6:	4b9d      	ldr	r3, [pc, #628]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80020e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ea:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80020ee:	d14c      	bne.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80020f0:	4b9a      	ldr	r3, [pc, #616]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80020f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80020f8:	659a      	str	r2, [r3, #88]	; 0x58
 80020fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002100:	9301      	str	r3, [sp, #4]
 8002102:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002104:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002108:	4a95      	ldr	r2, [pc, #596]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800210a:	6813      	ldr	r3, [r2, #0]
 800210c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002110:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002112:	f7fe ff8d 	bl	8001030 <HAL_GetTick>
 8002116:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002118:	4b91      	ldr	r3, [pc, #580]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002120:	d105      	bne.n	800212e <HAL_RCCEx_PeriphCLKConfig+0xb2>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002122:	f7fe ff85 	bl	8001030 <HAL_GetTick>
 8002126:	1b40      	subs	r0, r0, r5
 8002128:	2802      	cmp	r0, #2
 800212a:	d9f5      	bls.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x9c>
        ret = HAL_TIMEOUT;
 800212c:	2703      	movs	r7, #3
    if(ret == HAL_OK)
 800212e:	2f00      	cmp	r7, #0
 8002130:	d140      	bne.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x138>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002132:	4b8a      	ldr	r3, [pc, #552]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002138:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800213c:	d015      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0xee>
 800213e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002140:	429a      	cmp	r2, r3
 8002142:	d012      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0xee>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002144:	4a85      	ldr	r2, [pc, #532]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002146:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800214a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800214e:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8002152:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8002156:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800215a:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 800215e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002162:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8002166:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800216a:	f013 0f01 	tst.w	r3, #1
 800216e:	d10f      	bne.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x114>
      if(ret == HAL_OK)
 8002170:	2f00      	cmp	r7, #0
 8002172:	f040 80c9 	bne.w	8002308 <HAL_RCCEx_PeriphCLKConfig+0x28c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002176:	4a79      	ldr	r2, [pc, #484]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002178:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800217c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002180:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002182:	430b      	orrs	r3, r1
 8002184:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002188:	e015      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    FlagStatus       pwrclkchanged = RESET;
 800218a:	f04f 0800 	mov.w	r8, #0
 800218e:	e7bb      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        tickstart = HAL_GetTick();
 8002190:	f7fe ff4e 	bl	8001030 <HAL_GetTick>
 8002194:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002196:	4b71      	ldr	r3, [pc, #452]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219c:	f013 0f02 	tst.w	r3, #2
 80021a0:	d1e6      	bne.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a2:	f7fe ff45 	bl	8001030 <HAL_GetTick>
 80021a6:	1b40      	subs	r0, r0, r5
 80021a8:	f241 3388 	movw	r3, #5000	; 0x1388
 80021ac:	4298      	cmp	r0, r3
 80021ae:	d9f2      	bls.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x11a>
            ret = HAL_TIMEOUT;
 80021b0:	2703      	movs	r7, #3
 80021b2:	e7dd      	b.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      status = ret;
 80021b4:	463e      	mov	r6, r7
    if(pwrclkchanged == SET)
 80021b6:	f1b8 0f00 	cmp.w	r8, #0
 80021ba:	f040 80a7 	bne.w	800230c <HAL_RCCEx_PeriphCLKConfig+0x290>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021be:	6823      	ldr	r3, [r4, #0]
 80021c0:	f013 0f01 	tst.w	r3, #1
 80021c4:	d008      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021c6:	4a65      	ldr	r2, [pc, #404]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80021c8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80021cc:	f023 0303 	bic.w	r3, r3, #3
 80021d0:	6a21      	ldr	r1, [r4, #32]
 80021d2:	430b      	orrs	r3, r1
 80021d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021d8:	6823      	ldr	r3, [r4, #0]
 80021da:	f013 0f02 	tst.w	r3, #2
 80021de:	d008      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x176>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021e0:	4a5e      	ldr	r2, [pc, #376]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80021e2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80021e6:	f023 030c 	bic.w	r3, r3, #12
 80021ea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80021ec:	430b      	orrs	r3, r1
 80021ee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021f2:	6823      	ldr	r3, [r4, #0]
 80021f4:	f013 0f20 	tst.w	r3, #32
 80021f8:	d008      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x190>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021fa:	4a58      	ldr	r2, [pc, #352]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80021fc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002200:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002204:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002206:	430b      	orrs	r3, r1
 8002208:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800220c:	6823      	ldr	r3, [r4, #0]
 800220e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002212:	d008      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002214:	4a51      	ldr	r2, [pc, #324]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002216:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800221a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800221e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002220:	430b      	orrs	r3, r1
 8002222:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002226:	6823      	ldr	r3, [r4, #0]
 8002228:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800222c:	d008      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800222e:	4a4b      	ldr	r2, [pc, #300]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002230:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002234:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002238:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800223a:	430b      	orrs	r3, r1
 800223c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002240:	6823      	ldr	r3, [r4, #0]
 8002242:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002246:	d008      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002248:	4a44      	ldr	r2, [pc, #272]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800224a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800224e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002252:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002254:	430b      	orrs	r3, r1
 8002256:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800225a:	6823      	ldr	r3, [r4, #0]
 800225c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002260:	d008      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002262:	4a3e      	ldr	r2, [pc, #248]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002264:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002268:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800226c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800226e:	430b      	orrs	r3, r1
 8002270:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002274:	6823      	ldr	r3, [r4, #0]
 8002276:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800227a:	d00f      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800227c:	4a37      	ldr	r2, [pc, #220]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800227e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002282:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002286:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002288:	430b      	orrs	r3, r1
 800228a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800228e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002290:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002294:	d040      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002296:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800229a:	d042      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800229c:	6823      	ldr	r3, [r4, #0]
 800229e:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80022a2:	d00f      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x248>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022a4:	4a2d      	ldr	r2, [pc, #180]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80022a6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80022aa:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80022ae:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80022b0:	430b      	orrs	r3, r1
 80022b2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80022b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022bc:	d039      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80022be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022c2:	d03b      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022c4:	6823      	ldr	r3, [r4, #0]
 80022c6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80022ca:	d00c      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022cc:	4a23      	ldr	r2, [pc, #140]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80022ce:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80022d2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80022d6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80022d8:	430b      	orrs	r3, r1
 80022da:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022de:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80022e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022e4:	d032      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80022e6:	6823      	ldr	r3, [r4, #0]
 80022e8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80022ec:	d008      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80022ee:	4a1b      	ldr	r2, [pc, #108]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80022f0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80022f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022f8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80022fa:	430b      	orrs	r3, r1
 80022fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002300:	4630      	mov	r0, r6
 8002302:	b002      	add	sp, #8
 8002304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 8002308:	463e      	mov	r6, r7
 800230a:	e754      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
      __HAL_RCC_PWR_CLK_DISABLE();
 800230c:	4a13      	ldr	r2, [pc, #76]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800230e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002314:	6593      	str	r3, [r2, #88]	; 0x58
 8002316:	e752      	b.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x142>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002318:	68d3      	ldr	r3, [r2, #12]
 800231a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800231e:	60d3      	str	r3, [r2, #12]
 8002320:	e7bc      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x220>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002322:	2101      	movs	r1, #1
 8002324:	1d20      	adds	r0, r4, #4
 8002326:	f7ff fdf3 	bl	8001f10 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 800232a:	2800      	cmp	r0, #0
 800232c:	d0b6      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x220>
          status = ret;
 800232e:	4606      	mov	r6, r0
 8002330:	e7b4      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x220>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002332:	68d3      	ldr	r3, [r2, #12]
 8002334:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002338:	60d3      	str	r3, [r2, #12]
 800233a:	e7c3      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x248>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800233c:	2101      	movs	r1, #1
 800233e:	1d20      	adds	r0, r4, #4
 8002340:	f7ff fde6 	bl	8001f10 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002344:	2800      	cmp	r0, #0
 8002346:	d0bd      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x248>
        status = ret;
 8002348:	4606      	mov	r6, r0
 800234a:	e7bb      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x248>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800234c:	2102      	movs	r1, #2
 800234e:	1d20      	adds	r0, r4, #4
 8002350:	f7ff fdde 	bl	8001f10 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002354:	2800      	cmp	r0, #0
 8002356:	d0c6      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
        status = ret;
 8002358:	4606      	mov	r6, r0
 800235a:	e7c4      	b.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800235c:	40021000 	.word	0x40021000
 8002360:	40007000 	.word	0x40007000

08002364 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002364:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002366:	6a03      	ldr	r3, [r0, #32]
 8002368:	f023 0301 	bic.w	r3, r3, #1
 800236c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800236e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002370:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002372:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002374:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002378:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800237c:	680d      	ldr	r5, [r1, #0]
 800237e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002380:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002384:	688d      	ldr	r5, [r1, #8]
 8002386:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002388:	4d14      	ldr	r5, [pc, #80]	; (80023dc <TIM_OC1_SetConfig+0x78>)
 800238a:	42a8      	cmp	r0, r5
 800238c:	d007      	beq.n	800239e <TIM_OC1_SetConfig+0x3a>
 800238e:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8002392:	42a8      	cmp	r0, r5
 8002394:	d003      	beq.n	800239e <TIM_OC1_SetConfig+0x3a>
 8002396:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800239a:	42a8      	cmp	r0, r5
 800239c:	d105      	bne.n	80023aa <TIM_OC1_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800239e:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80023a2:	68cd      	ldr	r5, [r1, #12]
 80023a4:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80023a6:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023aa:	4d0c      	ldr	r5, [pc, #48]	; (80023dc <TIM_OC1_SetConfig+0x78>)
 80023ac:	42a8      	cmp	r0, r5
 80023ae:	d007      	beq.n	80023c0 <TIM_OC1_SetConfig+0x5c>
 80023b0:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80023b4:	42a8      	cmp	r0, r5
 80023b6:	d003      	beq.n	80023c0 <TIM_OC1_SetConfig+0x5c>
 80023b8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80023bc:	42a8      	cmp	r0, r5
 80023be:	d105      	bne.n	80023cc <TIM_OC1_SetConfig+0x68>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80023c0:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80023c4:	694c      	ldr	r4, [r1, #20]
 80023c6:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80023c8:	698d      	ldr	r5, [r1, #24]
 80023ca:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023cc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023ce:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80023d0:	684a      	ldr	r2, [r1, #4]
 80023d2:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023d4:	6203      	str	r3, [r0, #32]
}
 80023d6:	bc30      	pop	{r4, r5}
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40012c00 	.word	0x40012c00

080023e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023e0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023e2:	6a03      	ldr	r3, [r0, #32]
 80023e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023e8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023ea:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023ec:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023ee:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80023f0:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80023f4:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023f8:	680d      	ldr	r5, [r1, #0]
 80023fa:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80023fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002400:	688d      	ldr	r5, [r1, #8]
 8002402:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002406:	4d12      	ldr	r5, [pc, #72]	; (8002450 <TIM_OC3_SetConfig+0x70>)
 8002408:	42a8      	cmp	r0, r5
 800240a:	d019      	beq.n	8002440 <TIM_OC3_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800240c:	4d10      	ldr	r5, [pc, #64]	; (8002450 <TIM_OC3_SetConfig+0x70>)
 800240e:	42a8      	cmp	r0, r5
 8002410:	d007      	beq.n	8002422 <TIM_OC3_SetConfig+0x42>
 8002412:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8002416:	42a8      	cmp	r0, r5
 8002418:	d003      	beq.n	8002422 <TIM_OC3_SetConfig+0x42>
 800241a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800241e:	42a8      	cmp	r0, r5
 8002420:	d107      	bne.n	8002432 <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002422:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002426:	694d      	ldr	r5, [r1, #20]
 8002428:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800242c:	698d      	ldr	r5, [r1, #24]
 800242e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002432:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002434:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002436:	684a      	ldr	r2, [r1, #4]
 8002438:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800243a:	6203      	str	r3, [r0, #32]
}
 800243c:	bc30      	pop	{r4, r5}
 800243e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8002440:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002444:	68cd      	ldr	r5, [r1, #12]
 8002446:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800244a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800244e:	e7dd      	b.n	800240c <TIM_OC3_SetConfig+0x2c>
 8002450:	40012c00 	.word	0x40012c00

08002454 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002454:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002456:	6a03      	ldr	r3, [r0, #32]
 8002458:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800245c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800245e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002460:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002462:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002464:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002468:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800246c:	680d      	ldr	r5, [r1, #0]
 800246e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002472:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002476:	688d      	ldr	r5, [r1, #8]
 8002478:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800247c:	4d0b      	ldr	r5, [pc, #44]	; (80024ac <TIM_OC4_SetConfig+0x58>)
 800247e:	42a8      	cmp	r0, r5
 8002480:	d007      	beq.n	8002492 <TIM_OC4_SetConfig+0x3e>
 8002482:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8002486:	42a8      	cmp	r0, r5
 8002488:	d003      	beq.n	8002492 <TIM_OC4_SetConfig+0x3e>
 800248a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800248e:	42a8      	cmp	r0, r5
 8002490:	d104      	bne.n	800249c <TIM_OC4_SetConfig+0x48>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002492:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002496:	694d      	ldr	r5, [r1, #20]
 8002498:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800249c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800249e:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80024a0:	684b      	ldr	r3, [r1, #4]
 80024a2:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024a4:	6202      	str	r2, [r0, #32]
}
 80024a6:	bc30      	pop	{r4, r5}
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	40012c00 	.word	0x40012c00

080024b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80024b0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80024b2:	6a03      	ldr	r3, [r0, #32]
 80024b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024b8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024ba:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024bc:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80024be:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80024c0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80024c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024c8:	680d      	ldr	r5, [r1, #0]
 80024ca:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80024cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80024d0:	688d      	ldr	r5, [r1, #8]
 80024d2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024d6:	4d0b      	ldr	r5, [pc, #44]	; (8002504 <TIM_OC5_SetConfig+0x54>)
 80024d8:	42a8      	cmp	r0, r5
 80024da:	d007      	beq.n	80024ec <TIM_OC5_SetConfig+0x3c>
 80024dc:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80024e0:	42a8      	cmp	r0, r5
 80024e2:	d003      	beq.n	80024ec <TIM_OC5_SetConfig+0x3c>
 80024e4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80024e8:	42a8      	cmp	r0, r5
 80024ea:	d104      	bne.n	80024f6 <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80024ec:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80024f0:	694d      	ldr	r5, [r1, #20]
 80024f2:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024f6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80024f8:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80024fa:	684a      	ldr	r2, [r1, #4]
 80024fc:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024fe:	6203      	str	r3, [r0, #32]
}
 8002500:	bc30      	pop	{r4, r5}
 8002502:	4770      	bx	lr
 8002504:	40012c00 	.word	0x40012c00

08002508 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002508:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800250a:	6a03      	ldr	r3, [r0, #32]
 800250c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002510:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002512:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002514:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002516:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002518:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800251c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002520:	680d      	ldr	r5, [r1, #0]
 8002522:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002526:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800252a:	688d      	ldr	r5, [r1, #8]
 800252c:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002530:	4d0b      	ldr	r5, [pc, #44]	; (8002560 <TIM_OC6_SetConfig+0x58>)
 8002532:	42a8      	cmp	r0, r5
 8002534:	d007      	beq.n	8002546 <TIM_OC6_SetConfig+0x3e>
 8002536:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800253a:	42a8      	cmp	r0, r5
 800253c:	d003      	beq.n	8002546 <TIM_OC6_SetConfig+0x3e>
 800253e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002542:	42a8      	cmp	r0, r5
 8002544:	d104      	bne.n	8002550 <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002546:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800254a:	694d      	ldr	r5, [r1, #20]
 800254c:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002550:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002552:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002554:	684b      	ldr	r3, [r1, #4]
 8002556:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002558:	6202      	str	r2, [r0, #32]
}
 800255a:	bc30      	pop	{r4, r5}
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	40012c00 	.word	0x40012c00

08002564 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002564:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002566:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002568:	6a04      	ldr	r4, [r0, #32]
 800256a:	f024 0401 	bic.w	r4, r4, #1
 800256e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002570:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002572:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002576:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800257a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800257e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002580:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002582:	6203      	str	r3, [r0, #32]
}
 8002584:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002588:	4770      	bx	lr

0800258a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800258a:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800258c:	6a03      	ldr	r3, [r0, #32]
 800258e:	f023 0310 	bic.w	r3, r3, #16
 8002592:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002594:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002596:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002598:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800259c:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80025a4:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025a8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80025aa:	6203      	str	r3, [r0, #32]
}
 80025ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025b2:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025b8:	4319      	orrs	r1, r3
 80025ba:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025be:	6081      	str	r1, [r0, #8]
}
 80025c0:	4770      	bx	lr

080025c2 <HAL_TIM_Base_Stop>:
  __HAL_TIM_DISABLE(htim);
 80025c2:	6803      	ldr	r3, [r0, #0]
 80025c4:	6a19      	ldr	r1, [r3, #32]
 80025c6:	f241 1211 	movw	r2, #4369	; 0x1111
 80025ca:	4211      	tst	r1, r2
 80025cc:	d108      	bne.n	80025e0 <HAL_TIM_Base_Stop+0x1e>
 80025ce:	6a19      	ldr	r1, [r3, #32]
 80025d0:	f240 4244 	movw	r2, #1092	; 0x444
 80025d4:	4211      	tst	r1, r2
 80025d6:	d103      	bne.n	80025e0 <HAL_TIM_Base_Stop+0x1e>
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	f022 0201 	bic.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80025e0:	2301      	movs	r3, #1
 80025e2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80025e6:	2000      	movs	r0, #0
 80025e8:	4770      	bx	lr

080025ea <HAL_TIM_PWM_MspInit>:
}
 80025ea:	4770      	bx	lr

080025ec <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80025ec:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025ee:	4a1a      	ldr	r2, [pc, #104]	; (8002658 <TIM_Base_SetConfig+0x6c>)
 80025f0:	4290      	cmp	r0, r2
 80025f2:	d002      	beq.n	80025fa <TIM_Base_SetConfig+0xe>
 80025f4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80025f8:	d103      	bne.n	8002602 <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80025fe:	684a      	ldr	r2, [r1, #4]
 8002600:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002602:	4a15      	ldr	r2, [pc, #84]	; (8002658 <TIM_Base_SetConfig+0x6c>)
 8002604:	4290      	cmp	r0, r2
 8002606:	d00a      	beq.n	800261e <TIM_Base_SetConfig+0x32>
 8002608:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800260c:	d007      	beq.n	800261e <TIM_Base_SetConfig+0x32>
 800260e:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8002612:	4290      	cmp	r0, r2
 8002614:	d003      	beq.n	800261e <TIM_Base_SetConfig+0x32>
 8002616:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800261a:	4290      	cmp	r0, r2
 800261c:	d103      	bne.n	8002626 <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~TIM_CR1_CKD;
 800261e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002622:	68ca      	ldr	r2, [r1, #12]
 8002624:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002626:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800262a:	694a      	ldr	r2, [r1, #20]
 800262c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800262e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002630:	688b      	ldr	r3, [r1, #8]
 8002632:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002634:	680b      	ldr	r3, [r1, #0]
 8002636:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002638:	4b07      	ldr	r3, [pc, #28]	; (8002658 <TIM_Base_SetConfig+0x6c>)
 800263a:	4298      	cmp	r0, r3
 800263c:	d007      	beq.n	800264e <TIM_Base_SetConfig+0x62>
 800263e:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8002642:	4298      	cmp	r0, r3
 8002644:	d003      	beq.n	800264e <TIM_Base_SetConfig+0x62>
 8002646:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800264a:	4298      	cmp	r0, r3
 800264c:	d101      	bne.n	8002652 <TIM_Base_SetConfig+0x66>
    TIMx->RCR = Structure->RepetitionCounter;
 800264e:	690b      	ldr	r3, [r1, #16]
 8002650:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002652:	2301      	movs	r3, #1
 8002654:	6143      	str	r3, [r0, #20]
}
 8002656:	4770      	bx	lr
 8002658:	40012c00 	.word	0x40012c00

0800265c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800265c:	b358      	cbz	r0, 80026b6 <HAL_TIM_Base_Init+0x5a>
{
 800265e:	b510      	push	{r4, lr}
 8002660:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002662:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002666:	b30b      	cbz	r3, 80026ac <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8002668:	2302      	movs	r3, #2
 800266a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800266e:	1d21      	adds	r1, r4, #4
 8002670:	6820      	ldr	r0, [r4, #0]
 8002672:	f7ff ffbb 	bl	80025ec <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002676:	2301      	movs	r3, #1
 8002678:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800267c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002680:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002684:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002688:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800268c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002690:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002694:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002698:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800269c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80026a0:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80026a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80026a8:	2000      	movs	r0, #0
}
 80026aa:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80026ac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80026b0:	f7fe f902 	bl	80008b8 <HAL_TIM_Base_MspInit>
 80026b4:	e7d8      	b.n	8002668 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80026b6:	2001      	movs	r0, #1
}
 80026b8:	4770      	bx	lr

080026ba <HAL_TIM_OC_Init>:
  if (htim == NULL)
 80026ba:	b358      	cbz	r0, 8002714 <HAL_TIM_OC_Init+0x5a>
{
 80026bc:	b510      	push	{r4, lr}
 80026be:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80026c0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80026c4:	b30b      	cbz	r3, 800270a <HAL_TIM_OC_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 80026c6:	2302      	movs	r3, #2
 80026c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80026cc:	1d21      	adds	r1, r4, #4
 80026ce:	6820      	ldr	r0, [r4, #0]
 80026d0:	f7ff ff8c 	bl	80025ec <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026d4:	2301      	movs	r3, #1
 80026d6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026da:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80026de:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80026e2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80026e6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80026ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80026ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026f2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80026f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80026fa:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80026fe:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8002702:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002706:	2000      	movs	r0, #0
}
 8002708:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800270a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 800270e:	f7fe f8bd 	bl	800088c <HAL_TIM_OC_MspInit>
 8002712:	e7d8      	b.n	80026c6 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8002714:	2001      	movs	r0, #1
}
 8002716:	4770      	bx	lr

08002718 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8002718:	b358      	cbz	r0, 8002772 <HAL_TIM_PWM_Init+0x5a>
{
 800271a:	b510      	push	{r4, lr}
 800271c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800271e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002722:	b30b      	cbz	r3, 8002768 <HAL_TIM_PWM_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8002724:	2302      	movs	r3, #2
 8002726:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800272a:	1d21      	adds	r1, r4, #4
 800272c:	6820      	ldr	r0, [r4, #0]
 800272e:	f7ff ff5d 	bl	80025ec <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002732:	2301      	movs	r3, #1
 8002734:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002738:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800273c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002740:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002744:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8002748:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800274c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002750:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002754:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002758:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800275c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8002760:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002764:	2000      	movs	r0, #0
}
 8002766:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002768:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800276c:	f7ff ff3d 	bl	80025ea <HAL_TIM_PWM_MspInit>
 8002770:	e7d8      	b.n	8002724 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8002772:	2001      	movs	r0, #1
}
 8002774:	4770      	bx	lr
	...

08002778 <TIM_OC2_SetConfig>:
{
 8002778:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800277a:	6a03      	ldr	r3, [r0, #32]
 800277c:	f023 0310 	bic.w	r3, r3, #16
 8002780:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002782:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002784:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002786:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002788:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800278c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002790:	680d      	ldr	r5, [r1, #0]
 8002792:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8002796:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800279a:	688d      	ldr	r5, [r1, #8]
 800279c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027a0:	4d12      	ldr	r5, [pc, #72]	; (80027ec <TIM_OC2_SetConfig+0x74>)
 80027a2:	42a8      	cmp	r0, r5
 80027a4:	d019      	beq.n	80027da <TIM_OC2_SetConfig+0x62>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027a6:	4d11      	ldr	r5, [pc, #68]	; (80027ec <TIM_OC2_SetConfig+0x74>)
 80027a8:	42a8      	cmp	r0, r5
 80027aa:	d007      	beq.n	80027bc <TIM_OC2_SetConfig+0x44>
 80027ac:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80027b0:	42a8      	cmp	r0, r5
 80027b2:	d003      	beq.n	80027bc <TIM_OC2_SetConfig+0x44>
 80027b4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80027b8:	42a8      	cmp	r0, r5
 80027ba:	d107      	bne.n	80027cc <TIM_OC2_SetConfig+0x54>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80027bc:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80027c0:	694d      	ldr	r5, [r1, #20]
 80027c2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80027c6:	698d      	ldr	r5, [r1, #24]
 80027c8:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80027cc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80027ce:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80027d0:	684a      	ldr	r2, [r1, #4]
 80027d2:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80027d4:	6203      	str	r3, [r0, #32]
}
 80027d6:	bc30      	pop	{r4, r5}
 80027d8:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80027da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027de:	68cd      	ldr	r5, [r1, #12]
 80027e0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80027e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027e8:	e7dd      	b.n	80027a6 <TIM_OC2_SetConfig+0x2e>
 80027ea:	bf00      	nop
 80027ec:	40012c00 	.word	0x40012c00

080027f0 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 80027f0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d02e      	beq.n	8002856 <HAL_TIM_OC_ConfigChannel+0x66>
{
 80027f8:	b510      	push	{r4, lr}
 80027fa:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80027fc:	2301      	movs	r3, #1
 80027fe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8002802:	2a14      	cmp	r2, #20
 8002804:	d80f      	bhi.n	8002826 <HAL_TIM_OC_ConfigChannel+0x36>
 8002806:	e8df f002 	tbb	[pc, r2]
 800280a:	0e0b      	.short	0x0e0b
 800280c:	0e120e0e 	.word	0x0e120e0e
 8002810:	0e160e0e 	.word	0x0e160e0e
 8002814:	0e1a0e0e 	.word	0x0e1a0e0e
 8002818:	0e1e0e0e 	.word	0x0e1e0e0e
 800281c:	0e0e      	.short	0x0e0e
 800281e:	22          	.byte	0x22
 800281f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002820:	6800      	ldr	r0, [r0, #0]
 8002822:	f7ff fd9f 	bl	8002364 <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 8002826:	2000      	movs	r0, #0
 8002828:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800282c:	bd10      	pop	{r4, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800282e:	6800      	ldr	r0, [r0, #0]
 8002830:	f7ff ffa2 	bl	8002778 <TIM_OC2_SetConfig>
      break;
 8002834:	e7f7      	b.n	8002826 <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002836:	6800      	ldr	r0, [r0, #0]
 8002838:	f7ff fdd2 	bl	80023e0 <TIM_OC3_SetConfig>
      break;
 800283c:	e7f3      	b.n	8002826 <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800283e:	6800      	ldr	r0, [r0, #0]
 8002840:	f7ff fe08 	bl	8002454 <TIM_OC4_SetConfig>
      break;
 8002844:	e7ef      	b.n	8002826 <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002846:	6800      	ldr	r0, [r0, #0]
 8002848:	f7ff fe32 	bl	80024b0 <TIM_OC5_SetConfig>
      break;
 800284c:	e7eb      	b.n	8002826 <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800284e:	6800      	ldr	r0, [r0, #0]
 8002850:	f7ff fe5a 	bl	8002508 <TIM_OC6_SetConfig>
      break;
 8002854:	e7e7      	b.n	8002826 <HAL_TIM_OC_ConfigChannel+0x36>
  __HAL_LOCK(htim);
 8002856:	2002      	movs	r0, #2
}
 8002858:	4770      	bx	lr

0800285a <HAL_TIM_PWM_ConfigChannel>:
{
 800285a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800285c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002860:	2b01      	cmp	r3, #1
 8002862:	f000 808c 	beq.w	800297e <HAL_TIM_PWM_ConfigChannel+0x124>
 8002866:	460d      	mov	r5, r1
 8002868:	4604      	mov	r4, r0
 800286a:	2301      	movs	r3, #1
 800286c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8002870:	2a14      	cmp	r2, #20
 8002872:	d81e      	bhi.n	80028b2 <HAL_TIM_PWM_ConfigChannel+0x58>
 8002874:	e8df f002 	tbb	[pc, r2]
 8002878:	1d1d1d0b 	.word	0x1d1d1d0b
 800287c:	1d1d1d21 	.word	0x1d1d1d21
 8002880:	1d1d1d35 	.word	0x1d1d1d35
 8002884:	1d1d1d48 	.word	0x1d1d1d48
 8002888:	1d1d1d5c 	.word	0x1d1d1d5c
 800288c:	6f          	.byte	0x6f
 800288d:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800288e:	6800      	ldr	r0, [r0, #0]
 8002890:	f7ff fd68 	bl	8002364 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002894:	6822      	ldr	r2, [r4, #0]
 8002896:	6993      	ldr	r3, [r2, #24]
 8002898:	f043 0308 	orr.w	r3, r3, #8
 800289c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800289e:	6822      	ldr	r2, [r4, #0]
 80028a0:	6993      	ldr	r3, [r2, #24]
 80028a2:	f023 0304 	bic.w	r3, r3, #4
 80028a6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028a8:	6822      	ldr	r2, [r4, #0]
 80028aa:	6993      	ldr	r3, [r2, #24]
 80028ac:	6929      	ldr	r1, [r5, #16]
 80028ae:	430b      	orrs	r3, r1
 80028b0:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 80028b2:	2000      	movs	r0, #0
 80028b4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80028b8:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028ba:	6800      	ldr	r0, [r0, #0]
 80028bc:	f7ff ff5c 	bl	8002778 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80028c0:	6822      	ldr	r2, [r4, #0]
 80028c2:	6993      	ldr	r3, [r2, #24]
 80028c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028c8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80028ca:	6822      	ldr	r2, [r4, #0]
 80028cc:	6993      	ldr	r3, [r2, #24]
 80028ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028d2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80028d4:	6822      	ldr	r2, [r4, #0]
 80028d6:	6993      	ldr	r3, [r2, #24]
 80028d8:	6929      	ldr	r1, [r5, #16]
 80028da:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80028de:	6193      	str	r3, [r2, #24]
      break;
 80028e0:	e7e7      	b.n	80028b2 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80028e2:	6800      	ldr	r0, [r0, #0]
 80028e4:	f7ff fd7c 	bl	80023e0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80028e8:	6822      	ldr	r2, [r4, #0]
 80028ea:	69d3      	ldr	r3, [r2, #28]
 80028ec:	f043 0308 	orr.w	r3, r3, #8
 80028f0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80028f2:	6822      	ldr	r2, [r4, #0]
 80028f4:	69d3      	ldr	r3, [r2, #28]
 80028f6:	f023 0304 	bic.w	r3, r3, #4
 80028fa:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028fc:	6822      	ldr	r2, [r4, #0]
 80028fe:	69d3      	ldr	r3, [r2, #28]
 8002900:	6929      	ldr	r1, [r5, #16]
 8002902:	430b      	orrs	r3, r1
 8002904:	61d3      	str	r3, [r2, #28]
      break;
 8002906:	e7d4      	b.n	80028b2 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002908:	6800      	ldr	r0, [r0, #0]
 800290a:	f7ff fda3 	bl	8002454 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800290e:	6822      	ldr	r2, [r4, #0]
 8002910:	69d3      	ldr	r3, [r2, #28]
 8002912:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002916:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002918:	6822      	ldr	r2, [r4, #0]
 800291a:	69d3      	ldr	r3, [r2, #28]
 800291c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002920:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002922:	6822      	ldr	r2, [r4, #0]
 8002924:	69d3      	ldr	r3, [r2, #28]
 8002926:	6929      	ldr	r1, [r5, #16]
 8002928:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800292c:	61d3      	str	r3, [r2, #28]
      break;
 800292e:	e7c0      	b.n	80028b2 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002930:	6800      	ldr	r0, [r0, #0]
 8002932:	f7ff fdbd 	bl	80024b0 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002936:	6822      	ldr	r2, [r4, #0]
 8002938:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800293a:	f043 0308 	orr.w	r3, r3, #8
 800293e:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002940:	6822      	ldr	r2, [r4, #0]
 8002942:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002944:	f023 0304 	bic.w	r3, r3, #4
 8002948:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800294a:	6822      	ldr	r2, [r4, #0]
 800294c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800294e:	6929      	ldr	r1, [r5, #16]
 8002950:	430b      	orrs	r3, r1
 8002952:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 8002954:	e7ad      	b.n	80028b2 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002956:	6800      	ldr	r0, [r0, #0]
 8002958:	f7ff fdd6 	bl	8002508 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800295c:	6822      	ldr	r2, [r4, #0]
 800295e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002960:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002964:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002966:	6822      	ldr	r2, [r4, #0]
 8002968:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800296a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800296e:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002970:	6822      	ldr	r2, [r4, #0]
 8002972:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002974:	6929      	ldr	r1, [r5, #16]
 8002976:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800297a:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 800297c:	e799      	b.n	80028b2 <HAL_TIM_PWM_ConfigChannel+0x58>
  __HAL_LOCK(htim);
 800297e:	2002      	movs	r0, #2
 8002980:	e79a      	b.n	80028b8 <HAL_TIM_PWM_ConfigChannel+0x5e>

08002982 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002982:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002984:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002986:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800298a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800298e:	430b      	orrs	r3, r1
 8002990:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002992:	6083      	str	r3, [r0, #8]
}
 8002994:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002998:	4770      	bx	lr
	...

0800299c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800299c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d064      	beq.n	8002a6e <HAL_TIM_ConfigClockSource+0xd2>
{
 80029a4:	b510      	push	{r4, lr}
 80029a6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80029a8:	2301      	movs	r3, #1
 80029aa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80029ae:	2302      	movs	r3, #2
 80029b0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80029b4:	6802      	ldr	r2, [r0, #0]
 80029b6:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029b8:	4b2e      	ldr	r3, [pc, #184]	; (8002a74 <HAL_TIM_ConfigClockSource+0xd8>)
 80029ba:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 80029bc:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80029be:	680b      	ldr	r3, [r1, #0]
 80029c0:	2b40      	cmp	r3, #64	; 0x40
 80029c2:	d04a      	beq.n	8002a5a <HAL_TIM_ConfigClockSource+0xbe>
 80029c4:	d913      	bls.n	80029ee <HAL_TIM_ConfigClockSource+0x52>
 80029c6:	2b60      	cmp	r3, #96	; 0x60
 80029c8:	d03d      	beq.n	8002a46 <HAL_TIM_ConfigClockSource+0xaa>
 80029ca:	d91e      	bls.n	8002a0a <HAL_TIM_ConfigClockSource+0x6e>
 80029cc:	2b70      	cmp	r3, #112	; 0x70
 80029ce:	d028      	beq.n	8002a22 <HAL_TIM_ConfigClockSource+0x86>
 80029d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029d4:	d130      	bne.n	8002a38 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 80029d6:	68cb      	ldr	r3, [r1, #12]
 80029d8:	684a      	ldr	r2, [r1, #4]
 80029da:	6889      	ldr	r1, [r1, #8]
 80029dc:	6820      	ldr	r0, [r4, #0]
 80029de:	f7ff ffd0 	bl	8002982 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029e2:	6822      	ldr	r2, [r4, #0]
 80029e4:	6893      	ldr	r3, [r2, #8]
 80029e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029ea:	6093      	str	r3, [r2, #8]
      break;
 80029ec:	e024      	b.n	8002a38 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 80029ee:	2b10      	cmp	r3, #16
 80029f0:	d006      	beq.n	8002a00 <HAL_TIM_ConfigClockSource+0x64>
 80029f2:	d904      	bls.n	80029fe <HAL_TIM_ConfigClockSource+0x62>
 80029f4:	2b20      	cmp	r3, #32
 80029f6:	d003      	beq.n	8002a00 <HAL_TIM_ConfigClockSource+0x64>
 80029f8:	2b30      	cmp	r3, #48	; 0x30
 80029fa:	d001      	beq.n	8002a00 <HAL_TIM_ConfigClockSource+0x64>
 80029fc:	e01c      	b.n	8002a38 <HAL_TIM_ConfigClockSource+0x9c>
 80029fe:	b9db      	cbnz	r3, 8002a38 <HAL_TIM_ConfigClockSource+0x9c>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a00:	4619      	mov	r1, r3
 8002a02:	6820      	ldr	r0, [r4, #0]
 8002a04:	f7ff fdd5 	bl	80025b2 <TIM_ITRx_SetConfig>
        break;
 8002a08:	e016      	b.n	8002a38 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 8002a0a:	2b50      	cmp	r3, #80	; 0x50
 8002a0c:	d114      	bne.n	8002a38 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a0e:	68ca      	ldr	r2, [r1, #12]
 8002a10:	6849      	ldr	r1, [r1, #4]
 8002a12:	6820      	ldr	r0, [r4, #0]
 8002a14:	f7ff fda6 	bl	8002564 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a18:	2150      	movs	r1, #80	; 0x50
 8002a1a:	6820      	ldr	r0, [r4, #0]
 8002a1c:	f7ff fdc9 	bl	80025b2 <TIM_ITRx_SetConfig>
      break;
 8002a20:	e00a      	b.n	8002a38 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 8002a22:	68cb      	ldr	r3, [r1, #12]
 8002a24:	684a      	ldr	r2, [r1, #4]
 8002a26:	6889      	ldr	r1, [r1, #8]
 8002a28:	6820      	ldr	r0, [r4, #0]
 8002a2a:	f7ff ffaa 	bl	8002982 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002a2e:	6822      	ldr	r2, [r4, #0]
 8002a30:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a32:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002a36:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002a3e:	2000      	movs	r0, #0
 8002a40:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002a44:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a46:	68ca      	ldr	r2, [r1, #12]
 8002a48:	6849      	ldr	r1, [r1, #4]
 8002a4a:	6820      	ldr	r0, [r4, #0]
 8002a4c:	f7ff fd9d 	bl	800258a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a50:	2160      	movs	r1, #96	; 0x60
 8002a52:	6820      	ldr	r0, [r4, #0]
 8002a54:	f7ff fdad 	bl	80025b2 <TIM_ITRx_SetConfig>
      break;
 8002a58:	e7ee      	b.n	8002a38 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a5a:	68ca      	ldr	r2, [r1, #12]
 8002a5c:	6849      	ldr	r1, [r1, #4]
 8002a5e:	6820      	ldr	r0, [r4, #0]
 8002a60:	f7ff fd80 	bl	8002564 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a64:	2140      	movs	r1, #64	; 0x40
 8002a66:	6820      	ldr	r0, [r4, #0]
 8002a68:	f7ff fda3 	bl	80025b2 <TIM_ITRx_SetConfig>
      break;
 8002a6c:	e7e4      	b.n	8002a38 <HAL_TIM_ConfigClockSource+0x9c>
  __HAL_LOCK(htim);
 8002a6e:	2002      	movs	r0, #2
}
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	fffe0088 	.word	0xfffe0088

08002a78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a78:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a7a:	f001 011f 	and.w	r1, r1, #31
 8002a7e:	2301      	movs	r3, #1
 8002a80:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a84:	6a03      	ldr	r3, [r0, #32]
 8002a86:	ea23 0304 	bic.w	r3, r3, r4
 8002a8a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a8c:	6a03      	ldr	r3, [r0, #32]
 8002a8e:	408a      	lsls	r2, r1
 8002a90:	4313      	orrs	r3, r2
 8002a92:	6203      	str	r3, [r0, #32]
}
 8002a94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a98:	4770      	bx	lr
	...

08002a9c <HAL_TIM_OC_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a9c:	460a      	mov	r2, r1
 8002a9e:	2900      	cmp	r1, #0
 8002aa0:	d136      	bne.n	8002b10 <HAL_TIM_OC_Start+0x74>
 8002aa2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002aac:	bf18      	it	ne
 8002aae:	2301      	movne	r3, #1
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f040 8087 	bne.w	8002bc4 <HAL_TIM_OC_Start+0x128>
{
 8002ab6:	b510      	push	{r4, lr}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ab8:	2a00      	cmp	r2, #0
 8002aba:	d159      	bne.n	8002b70 <HAL_TIM_OC_Start+0xd4>
 8002abc:	2302      	movs	r3, #2
 8002abe:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	6800      	ldr	r0, [r0, #0]
 8002aca:	f7ff ffd5 	bl	8002a78 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ace:	6823      	ldr	r3, [r4, #0]
 8002ad0:	4a3f      	ldr	r2, [pc, #252]	; (8002bd0 <HAL_TIM_OC_Start+0x134>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d007      	beq.n	8002ae6 <HAL_TIM_OC_Start+0x4a>
 8002ad6:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d003      	beq.n	8002ae6 <HAL_TIM_OC_Start+0x4a>
 8002ade:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d103      	bne.n	8002aee <HAL_TIM_OC_Start+0x52>
    __HAL_TIM_MOE_ENABLE(htim);
 8002ae6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ae8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aec:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aee:	6823      	ldr	r3, [r4, #0]
 8002af0:	4a37      	ldr	r2, [pc, #220]	; (8002bd0 <HAL_TIM_OC_Start+0x134>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d058      	beq.n	8002ba8 <HAL_TIM_OC_Start+0x10c>
 8002af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002afa:	d055      	beq.n	8002ba8 <HAL_TIM_OC_Start+0x10c>
 8002afc:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d051      	beq.n	8002ba8 <HAL_TIM_OC_Start+0x10c>
    __HAL_TIM_ENABLE(htim);
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	f042 0201 	orr.w	r2, r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002b0c:	2000      	movs	r0, #0
}
 8002b0e:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b10:	2904      	cmp	r1, #4
 8002b12:	d00d      	beq.n	8002b30 <HAL_TIM_OC_Start+0x94>
 8002b14:	2908      	cmp	r1, #8
 8002b16:	d013      	beq.n	8002b40 <HAL_TIM_OC_Start+0xa4>
 8002b18:	290c      	cmp	r1, #12
 8002b1a:	d019      	beq.n	8002b50 <HAL_TIM_OC_Start+0xb4>
 8002b1c:	2910      	cmp	r1, #16
 8002b1e:	d01f      	beq.n	8002b60 <HAL_TIM_OC_Start+0xc4>
 8002b20:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002b2a:	bf18      	it	ne
 8002b2c:	2301      	movne	r3, #1
 8002b2e:	e7bf      	b.n	8002ab0 <HAL_TIM_OC_Start+0x14>
 8002b30:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002b3a:	bf18      	it	ne
 8002b3c:	2301      	movne	r3, #1
 8002b3e:	e7b7      	b.n	8002ab0 <HAL_TIM_OC_Start+0x14>
 8002b40:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002b4a:	bf18      	it	ne
 8002b4c:	2301      	movne	r3, #1
 8002b4e:	e7af      	b.n	8002ab0 <HAL_TIM_OC_Start+0x14>
 8002b50:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002b5a:	bf18      	it	ne
 8002b5c:	2301      	movne	r3, #1
 8002b5e:	e7a7      	b.n	8002ab0 <HAL_TIM_OC_Start+0x14>
 8002b60:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002b6a:	bf18      	it	ne
 8002b6c:	2301      	movne	r3, #1
 8002b6e:	e79f      	b.n	8002ab0 <HAL_TIM_OC_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b70:	2a04      	cmp	r2, #4
 8002b72:	d009      	beq.n	8002b88 <HAL_TIM_OC_Start+0xec>
 8002b74:	2a08      	cmp	r2, #8
 8002b76:	d00b      	beq.n	8002b90 <HAL_TIM_OC_Start+0xf4>
 8002b78:	2a0c      	cmp	r2, #12
 8002b7a:	d00d      	beq.n	8002b98 <HAL_TIM_OC_Start+0xfc>
 8002b7c:	2a10      	cmp	r2, #16
 8002b7e:	d00f      	beq.n	8002ba0 <HAL_TIM_OC_Start+0x104>
 8002b80:	2302      	movs	r3, #2
 8002b82:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8002b86:	e79c      	b.n	8002ac2 <HAL_TIM_OC_Start+0x26>
 8002b88:	2302      	movs	r3, #2
 8002b8a:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8002b8e:	e798      	b.n	8002ac2 <HAL_TIM_OC_Start+0x26>
 8002b90:	2302      	movs	r3, #2
 8002b92:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8002b96:	e794      	b.n	8002ac2 <HAL_TIM_OC_Start+0x26>
 8002b98:	2302      	movs	r3, #2
 8002b9a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8002b9e:	e790      	b.n	8002ac2 <HAL_TIM_OC_Start+0x26>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8002ba6:	e78c      	b.n	8002ac2 <HAL_TIM_OC_Start+0x26>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ba8:	6899      	ldr	r1, [r3, #8]
 8002baa:	4a0a      	ldr	r2, [pc, #40]	; (8002bd4 <HAL_TIM_OC_Start+0x138>)
 8002bac:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bae:	2a06      	cmp	r2, #6
 8002bb0:	d00a      	beq.n	8002bc8 <HAL_TIM_OC_Start+0x12c>
 8002bb2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002bb6:	d009      	beq.n	8002bcc <HAL_TIM_OC_Start+0x130>
      __HAL_TIM_ENABLE(htim);
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	f042 0201 	orr.w	r2, r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	e7a4      	b.n	8002b0e <HAL_TIM_OC_Start+0x72>
    return HAL_ERROR;
 8002bc4:	2001      	movs	r0, #1
}
 8002bc6:	4770      	bx	lr
  return HAL_OK;
 8002bc8:	2000      	movs	r0, #0
 8002bca:	e7a0      	b.n	8002b0e <HAL_TIM_OC_Start+0x72>
 8002bcc:	2000      	movs	r0, #0
 8002bce:	e79e      	b.n	8002b0e <HAL_TIM_OC_Start+0x72>
 8002bd0:	40012c00 	.word	0x40012c00
 8002bd4:	00010007 	.word	0x00010007

08002bd8 <HAL_TIM_PWM_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002bd8:	460a      	mov	r2, r1
 8002bda:	2900      	cmp	r1, #0
 8002bdc:	d136      	bne.n	8002c4c <HAL_TIM_PWM_Start+0x74>
 8002bde:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002be8:	bf18      	it	ne
 8002bea:	2301      	movne	r3, #1
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f040 8087 	bne.w	8002d00 <HAL_TIM_PWM_Start+0x128>
{
 8002bf2:	b510      	push	{r4, lr}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bf4:	2a00      	cmp	r2, #0
 8002bf6:	d159      	bne.n	8002cac <HAL_TIM_PWM_Start+0xd4>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8002bfe:	4611      	mov	r1, r2
 8002c00:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c02:	2201      	movs	r2, #1
 8002c04:	6800      	ldr	r0, [r0, #0]
 8002c06:	f7ff ff37 	bl	8002a78 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c0a:	6823      	ldr	r3, [r4, #0]
 8002c0c:	4a3f      	ldr	r2, [pc, #252]	; (8002d0c <HAL_TIM_PWM_Start+0x134>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d007      	beq.n	8002c22 <HAL_TIM_PWM_Start+0x4a>
 8002c12:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d003      	beq.n	8002c22 <HAL_TIM_PWM_Start+0x4a>
 8002c1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d103      	bne.n	8002c2a <HAL_TIM_PWM_Start+0x52>
    __HAL_TIM_MOE_ENABLE(htim);
 8002c22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c28:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c2a:	6823      	ldr	r3, [r4, #0]
 8002c2c:	4a37      	ldr	r2, [pc, #220]	; (8002d0c <HAL_TIM_PWM_Start+0x134>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d058      	beq.n	8002ce4 <HAL_TIM_PWM_Start+0x10c>
 8002c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c36:	d055      	beq.n	8002ce4 <HAL_TIM_PWM_Start+0x10c>
 8002c38:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d051      	beq.n	8002ce4 <HAL_TIM_PWM_Start+0x10c>
    __HAL_TIM_ENABLE(htim);
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002c48:	2000      	movs	r0, #0
}
 8002c4a:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c4c:	2904      	cmp	r1, #4
 8002c4e:	d00d      	beq.n	8002c6c <HAL_TIM_PWM_Start+0x94>
 8002c50:	2908      	cmp	r1, #8
 8002c52:	d013      	beq.n	8002c7c <HAL_TIM_PWM_Start+0xa4>
 8002c54:	290c      	cmp	r1, #12
 8002c56:	d019      	beq.n	8002c8c <HAL_TIM_PWM_Start+0xb4>
 8002c58:	2910      	cmp	r1, #16
 8002c5a:	d01f      	beq.n	8002c9c <HAL_TIM_PWM_Start+0xc4>
 8002c5c:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002c66:	bf18      	it	ne
 8002c68:	2301      	movne	r3, #1
 8002c6a:	e7bf      	b.n	8002bec <HAL_TIM_PWM_Start+0x14>
 8002c6c:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002c76:	bf18      	it	ne
 8002c78:	2301      	movne	r3, #1
 8002c7a:	e7b7      	b.n	8002bec <HAL_TIM_PWM_Start+0x14>
 8002c7c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002c86:	bf18      	it	ne
 8002c88:	2301      	movne	r3, #1
 8002c8a:	e7af      	b.n	8002bec <HAL_TIM_PWM_Start+0x14>
 8002c8c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002c96:	bf18      	it	ne
 8002c98:	2301      	movne	r3, #1
 8002c9a:	e7a7      	b.n	8002bec <HAL_TIM_PWM_Start+0x14>
 8002c9c:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002ca6:	bf18      	it	ne
 8002ca8:	2301      	movne	r3, #1
 8002caa:	e79f      	b.n	8002bec <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cac:	2a04      	cmp	r2, #4
 8002cae:	d009      	beq.n	8002cc4 <HAL_TIM_PWM_Start+0xec>
 8002cb0:	2a08      	cmp	r2, #8
 8002cb2:	d00b      	beq.n	8002ccc <HAL_TIM_PWM_Start+0xf4>
 8002cb4:	2a0c      	cmp	r2, #12
 8002cb6:	d00d      	beq.n	8002cd4 <HAL_TIM_PWM_Start+0xfc>
 8002cb8:	2a10      	cmp	r2, #16
 8002cba:	d00f      	beq.n	8002cdc <HAL_TIM_PWM_Start+0x104>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8002cc2:	e79c      	b.n	8002bfe <HAL_TIM_PWM_Start+0x26>
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8002cca:	e798      	b.n	8002bfe <HAL_TIM_PWM_Start+0x26>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8002cd2:	e794      	b.n	8002bfe <HAL_TIM_PWM_Start+0x26>
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8002cda:	e790      	b.n	8002bfe <HAL_TIM_PWM_Start+0x26>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8002ce2:	e78c      	b.n	8002bfe <HAL_TIM_PWM_Start+0x26>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ce4:	6899      	ldr	r1, [r3, #8]
 8002ce6:	4a0a      	ldr	r2, [pc, #40]	; (8002d10 <HAL_TIM_PWM_Start+0x138>)
 8002ce8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cea:	2a06      	cmp	r2, #6
 8002cec:	d00a      	beq.n	8002d04 <HAL_TIM_PWM_Start+0x12c>
 8002cee:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002cf2:	d009      	beq.n	8002d08 <HAL_TIM_PWM_Start+0x130>
      __HAL_TIM_ENABLE(htim);
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	f042 0201 	orr.w	r2, r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	e7a4      	b.n	8002c4a <HAL_TIM_PWM_Start+0x72>
    return HAL_ERROR;
 8002d00:	2001      	movs	r0, #1
}
 8002d02:	4770      	bx	lr
  return HAL_OK;
 8002d04:	2000      	movs	r0, #0
 8002d06:	e7a0      	b.n	8002c4a <HAL_TIM_PWM_Start+0x72>
 8002d08:	2000      	movs	r0, #0
 8002d0a:	e79e      	b.n	8002c4a <HAL_TIM_PWM_Start+0x72>
 8002d0c:	40012c00 	.word	0x40012c00
 8002d10:	00010007 	.word	0x00010007

08002d14 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d14:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d02f      	beq.n	8002d7c <HAL_TIMEx_MasterConfigSynchronization+0x68>
{
 8002d1c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8002d1e:	2301      	movs	r3, #1
 8002d20:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d24:	2302      	movs	r3, #2
 8002d26:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d2a:	6802      	ldr	r2, [r0, #0]
 8002d2c:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d2e:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002d30:	4c13      	ldr	r4, [pc, #76]	; (8002d80 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8002d32:	42a2      	cmp	r2, r4
 8002d34:	d01d      	beq.n	8002d72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d3a:	680c      	ldr	r4, [r1, #0]
 8002d3c:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d3e:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d40:	6803      	ldr	r3, [r0, #0]
 8002d42:	4a0f      	ldr	r2, [pc, #60]	; (8002d80 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d006      	beq.n	8002d56 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8002d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d4c:	d003      	beq.n	8002d56 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8002d4e:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d104      	bne.n	8002d60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d56:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d5a:	688a      	ldr	r2, [r1, #8]
 8002d5c:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d5e:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d60:	2301      	movs	r3, #1
 8002d62:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d66:	2300      	movs	r3, #0
 8002d68:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002d6c:	4618      	mov	r0, r3
}
 8002d6e:	bc30      	pop	{r4, r5}
 8002d70:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002d72:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002d76:	684c      	ldr	r4, [r1, #4]
 8002d78:	4323      	orrs	r3, r4
 8002d7a:	e7dc      	b.n	8002d36 <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 8002d7c:	2002      	movs	r0, #2
}
 8002d7e:	4770      	bx	lr
 8002d80:	40012c00 	.word	0x40012c00

08002d84 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d84:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d03b      	beq.n	8002e04 <HAL_TIMEx_ConfigBreakDeadTime+0x80>
{
 8002d8c:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8002d8e:	2301      	movs	r3, #1
 8002d90:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002d94:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d9a:	688a      	ldr	r2, [r1, #8]
 8002d9c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002d9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002da2:	684a      	ldr	r2, [r1, #4]
 8002da4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002da6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002daa:	680a      	ldr	r2, [r1, #0]
 8002dac:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002dae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002db2:	690a      	ldr	r2, [r1, #16]
 8002db4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002db6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002dba:	694a      	ldr	r2, [r1, #20]
 8002dbc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002dbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dc2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8002dc4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002dc6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002dca:	698a      	ldr	r2, [r1, #24]
 8002dcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002dd0:	6802      	ldr	r2, [r0, #0]
 8002dd2:	4c0d      	ldr	r4, [pc, #52]	; (8002e08 <HAL_TIMEx_ConfigBreakDeadTime+0x84>)
 8002dd4:	42a2      	cmp	r2, r4
 8002dd6:	d007      	beq.n	8002de8 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002dd8:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002dda:	2300      	movs	r3, #0
 8002ddc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002de0:	4618      	mov	r0, r3
}
 8002de2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002de6:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002de8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002dec:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8002dee:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002df2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002df6:	69cc      	ldr	r4, [r1, #28]
 8002df8:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002dfa:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002dfe:	6a09      	ldr	r1, [r1, #32]
 8002e00:	430b      	orrs	r3, r1
 8002e02:	e7e9      	b.n	8002dd8 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
  __HAL_LOCK(htim);
 8002e04:	2002      	movs	r0, #2
}
 8002e06:	4770      	bx	lr
 8002e08:	40012c00 	.word	0x40012c00

08002e0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e0c:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 8002e10:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e12:	6801      	ldr	r1, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e14:	6883      	ldr	r3, [r0, #8]
 8002e16:	6902      	ldr	r2, [r0, #16]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	6942      	ldr	r2, [r0, #20]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	69c2      	ldr	r2, [r0, #28]
 8002e20:	4313      	orrs	r3, r2
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e22:	6808      	ldr	r0, [r1, #0]
 8002e24:	4a8c      	ldr	r2, [pc, #560]	; (8003058 <UART_SetConfig+0x24c>)
 8002e26:	4002      	ands	r2, r0
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e2c:	6822      	ldr	r2, [r4, #0]
 8002e2e:	6853      	ldr	r3, [r2, #4]
 8002e30:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e34:	68e1      	ldr	r1, [r4, #12]
 8002e36:	430b      	orrs	r3, r1
 8002e38:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e3a:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e3c:	6822      	ldr	r2, [r4, #0]
 8002e3e:	4b87      	ldr	r3, [pc, #540]	; (800305c <UART_SetConfig+0x250>)
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d001      	beq.n	8002e48 <UART_SetConfig+0x3c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e44:	6a23      	ldr	r3, [r4, #32]
 8002e46:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e48:	6893      	ldr	r3, [r2, #8]
 8002e4a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002e4e:	430b      	orrs	r3, r1
 8002e50:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e52:	6823      	ldr	r3, [r4, #0]
 8002e54:	4a82      	ldr	r2, [pc, #520]	; (8003060 <UART_SetConfig+0x254>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d01c      	beq.n	8002e94 <UART_SetConfig+0x88>
 8002e5a:	4a82      	ldr	r2, [pc, #520]	; (8003064 <UART_SetConfig+0x258>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d02d      	beq.n	8002ebc <UART_SetConfig+0xb0>
 8002e60:	4a7e      	ldr	r2, [pc, #504]	; (800305c <UART_SetConfig+0x250>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d043      	beq.n	8002eee <UART_SetConfig+0xe2>
 8002e66:	2210      	movs	r2, #16

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e68:	497c      	ldr	r1, [pc, #496]	; (800305c <UART_SetConfig+0x250>)
 8002e6a:	428b      	cmp	r3, r1
 8002e6c:	d05e      	beq.n	8002f2c <UART_SetConfig+0x120>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e6e:	69e3      	ldr	r3, [r4, #28]
 8002e70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e74:	f000 808c 	beq.w	8002f90 <UART_SetConfig+0x184>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e78:	2a08      	cmp	r2, #8
 8002e7a:	f200 80e7 	bhi.w	800304c <UART_SetConfig+0x240>
 8002e7e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002e82:	00b7      	.short	0x00b7
 8002e84:	00b500ce 	.word	0x00b500ce
 8002e88:	00d100e5 	.word	0x00d100e5
 8002e8c:	00e500e5 	.word	0x00e500e5
 8002e90:	00d400e5 	.word	0x00d400e5
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e94:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8002e98:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002e9c:	f002 0203 	and.w	r2, r2, #3
 8002ea0:	2a03      	cmp	r2, #3
 8002ea2:	d809      	bhi.n	8002eb8 <UART_SetConfig+0xac>
 8002ea4:	e8df f002 	tbb	[pc, r2]
 8002ea8:	063c0402 	.word	0x063c0402
 8002eac:	2201      	movs	r2, #1
 8002eae:	e7db      	b.n	8002e68 <UART_SetConfig+0x5c>
 8002eb0:	2204      	movs	r2, #4
 8002eb2:	e7d9      	b.n	8002e68 <UART_SetConfig+0x5c>
 8002eb4:	2208      	movs	r2, #8
 8002eb6:	e7d7      	b.n	8002e68 <UART_SetConfig+0x5c>
 8002eb8:	2210      	movs	r2, #16
 8002eba:	e7d5      	b.n	8002e68 <UART_SetConfig+0x5c>
 8002ebc:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8002ec0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002ec4:	f002 020c 	and.w	r2, r2, #12
 8002ec8:	2a0c      	cmp	r2, #12
 8002eca:	d80e      	bhi.n	8002eea <UART_SetConfig+0xde>
 8002ecc:	e8df f002 	tbb	[pc, r2]
 8002ed0:	0d0d0d07 	.word	0x0d0d0d07
 8002ed4:	0d0d0d09 	.word	0x0d0d0d09
 8002ed8:	0d0d0d2a 	.word	0x0d0d0d2a
 8002edc:	0b          	.byte	0x0b
 8002edd:	00          	.byte	0x00
 8002ede:	2200      	movs	r2, #0
 8002ee0:	e7c2      	b.n	8002e68 <UART_SetConfig+0x5c>
 8002ee2:	2204      	movs	r2, #4
 8002ee4:	e7c0      	b.n	8002e68 <UART_SetConfig+0x5c>
 8002ee6:	2208      	movs	r2, #8
 8002ee8:	e7be      	b.n	8002e68 <UART_SetConfig+0x5c>
 8002eea:	2210      	movs	r2, #16
 8002eec:	e7bc      	b.n	8002e68 <UART_SetConfig+0x5c>
 8002eee:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 8002ef2:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002ef6:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8002efa:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002efe:	d00b      	beq.n	8002f18 <UART_SetConfig+0x10c>
 8002f00:	d907      	bls.n	8002f12 <UART_SetConfig+0x106>
 8002f02:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002f06:	d00f      	beq.n	8002f28 <UART_SetConfig+0x11c>
 8002f08:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8002f0c:	d106      	bne.n	8002f1c <UART_SetConfig+0x110>
 8002f0e:	2208      	movs	r2, #8
 8002f10:	e7aa      	b.n	8002e68 <UART_SetConfig+0x5c>
 8002f12:	b91a      	cbnz	r2, 8002f1c <UART_SetConfig+0x110>
 8002f14:	2200      	movs	r2, #0
 8002f16:	e7a7      	b.n	8002e68 <UART_SetConfig+0x5c>
 8002f18:	2204      	movs	r2, #4
 8002f1a:	e7a5      	b.n	8002e68 <UART_SetConfig+0x5c>
 8002f1c:	2210      	movs	r2, #16
 8002f1e:	e7a3      	b.n	8002e68 <UART_SetConfig+0x5c>
 8002f20:	2202      	movs	r2, #2
 8002f22:	e7a1      	b.n	8002e68 <UART_SetConfig+0x5c>
 8002f24:	2202      	movs	r2, #2
 8002f26:	e79f      	b.n	8002e68 <UART_SetConfig+0x5c>
 8002f28:	2202      	movs	r2, #2
 8002f2a:	e79d      	b.n	8002e68 <UART_SetConfig+0x5c>
    switch (clocksource)
 8002f2c:	2a08      	cmp	r2, #8
 8002f2e:	d87f      	bhi.n	8003030 <UART_SetConfig+0x224>
 8002f30:	e8df f002 	tbb	[pc, r2]
 8002f34:	7e107e08 	.word	0x7e107e08
 8002f38:	7e7e7e0d 	.word	0x7e7e7e0d
 8002f3c:	05          	.byte	0x05
 8002f3d:	00          	.byte	0x00
        pclk = (uint32_t) LSE_VALUE;
 8002f3e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002f42:	e008      	b.n	8002f56 <UART_SetConfig+0x14a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f44:	f7fe ffc0 	bl	8001ec8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002f48:	b928      	cbnz	r0, 8002f56 <UART_SetConfig+0x14a>
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	e062      	b.n	8003014 <UART_SetConfig+0x208>
        pclk = HAL_RCC_GetSysClockFreq();
 8002f4e:	f7fe fb69 	bl	8001624 <HAL_RCC_GetSysClockFreq>
        break;
 8002f52:	e7f9      	b.n	8002f48 <UART_SetConfig+0x13c>
        pclk = (uint32_t) HSI_VALUE;
 8002f54:	4844      	ldr	r0, [pc, #272]	; (8003068 <UART_SetConfig+0x25c>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f56:	6862      	ldr	r2, [r4, #4]
 8002f58:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002f5c:	4283      	cmp	r3, r0
 8002f5e:	d869      	bhi.n	8003034 <UART_SetConfig+0x228>
 8002f60:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002f64:	d868      	bhi.n	8003038 <UART_SetConfig+0x22c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8002f66:	2300      	movs	r3, #0
 8002f68:	0e07      	lsrs	r7, r0, #24
 8002f6a:	0206      	lsls	r6, r0, #8
 8002f6c:	0850      	lsrs	r0, r2, #1
 8002f6e:	eb16 0b00 	adds.w	fp, r6, r0
 8002f72:	f147 0c00 	adc.w	ip, r7, #0
 8002f76:	4658      	mov	r0, fp
 8002f78:	4661      	mov	r1, ip
 8002f7a:	f7fd f929 	bl	80001d0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f7e:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8002f82:	4b3a      	ldr	r3, [pc, #232]	; (800306c <UART_SetConfig+0x260>)
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d859      	bhi.n	800303c <UART_SetConfig+0x230>
          huart->Instance->BRR = usartdiv;
 8002f88:	6823      	ldr	r3, [r4, #0]
 8002f8a:	60d8      	str	r0, [r3, #12]
 8002f8c:	2000      	movs	r0, #0
 8002f8e:	e041      	b.n	8003014 <UART_SetConfig+0x208>
    switch (clocksource)
 8002f90:	2a08      	cmp	r2, #8
 8002f92:	d855      	bhi.n	8003040 <UART_SetConfig+0x234>
 8002f94:	e8df f002 	tbb	[pc, r2]
 8002f98:	54052107 	.word	0x54052107
 8002f9c:	54545424 	.word	0x54545424
 8002fa0:	27          	.byte	0x27
 8002fa1:	00          	.byte	0x00
        pclk = (uint32_t) HSI_VALUE;
 8002fa2:	4831      	ldr	r0, [pc, #196]	; (8003068 <UART_SetConfig+0x25c>)
 8002fa4:	e003      	b.n	8002fae <UART_SetConfig+0x1a2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fa6:	f7fe ff8f 	bl	8001ec8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002faa:	2800      	cmp	r0, #0
 8002fac:	d04a      	beq.n	8003044 <UART_SetConfig+0x238>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fae:	6862      	ldr	r2, [r4, #4]
 8002fb0:	0853      	lsrs	r3, r2, #1
 8002fb2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002fb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002fba:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fbc:	f1a3 0110 	sub.w	r1, r3, #16
 8002fc0:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002fc4:	4291      	cmp	r1, r2
 8002fc6:	d83f      	bhi.n	8003048 <UART_SetConfig+0x23c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fc8:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fcc:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8002fd0:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8002fd2:	6822      	ldr	r2, [r4, #0]
 8002fd4:	60d3      	str	r3, [r2, #12]
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	e01c      	b.n	8003014 <UART_SetConfig+0x208>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fda:	f7fe ff87 	bl	8001eec <HAL_RCC_GetPCLK2Freq>
        break;
 8002fde:	e7e4      	b.n	8002faa <UART_SetConfig+0x19e>
        pclk = HAL_RCC_GetSysClockFreq();
 8002fe0:	f7fe fb20 	bl	8001624 <HAL_RCC_GetSysClockFreq>
        break;
 8002fe4:	e7e1      	b.n	8002faa <UART_SetConfig+0x19e>
        pclk = (uint32_t) LSE_VALUE;
 8002fe6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002fea:	e7e0      	b.n	8002fae <UART_SetConfig+0x1a2>
        break;
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
        break;
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fec:	481e      	ldr	r0, [pc, #120]	; (8003068 <UART_SetConfig+0x25c>)
 8002fee:	e002      	b.n	8002ff6 <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ff0:	f7fe ff6a 	bl	8001ec8 <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 8002ff4:	b360      	cbz	r0, 8003050 <UART_SetConfig+0x244>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ff6:	6863      	ldr	r3, [r4, #4]
 8002ff8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002ffc:	fbb0 f0f3 	udiv	r0, r0, r3
 8003000:	b280      	uxth	r0, r0
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003002:	f1a0 0210 	sub.w	r2, r0, #16
 8003006:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800300a:	429a      	cmp	r2, r3
 800300c:	d822      	bhi.n	8003054 <UART_SetConfig+0x248>
      {
        huart->Instance->BRR = usartdiv;
 800300e:	6823      	ldr	r3, [r4, #0]
 8003010:	60d8      	str	r0, [r3, #12]
 8003012:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003014:	2300      	movs	r3, #0
 8003016:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8003018:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 800301a:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800301e:	f7fe ff65 	bl	8001eec <HAL_RCC_GetPCLK2Freq>
        break;
 8003022:	e7e7      	b.n	8002ff4 <UART_SetConfig+0x1e8>
        pclk = HAL_RCC_GetSysClockFreq();
 8003024:	f7fe fafe 	bl	8001624 <HAL_RCC_GetSysClockFreq>
        break;
 8003028:	e7e4      	b.n	8002ff4 <UART_SetConfig+0x1e8>
        pclk = (uint32_t) LSE_VALUE;
 800302a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800302e:	e7e2      	b.n	8002ff6 <UART_SetConfig+0x1ea>
        ret = HAL_ERROR;
 8003030:	2001      	movs	r0, #1
 8003032:	e7ef      	b.n	8003014 <UART_SetConfig+0x208>
        ret = HAL_ERROR;
 8003034:	2001      	movs	r0, #1
 8003036:	e7ed      	b.n	8003014 <UART_SetConfig+0x208>
 8003038:	2001      	movs	r0, #1
 800303a:	e7eb      	b.n	8003014 <UART_SetConfig+0x208>
          ret = HAL_ERROR;
 800303c:	2001      	movs	r0, #1
 800303e:	e7e9      	b.n	8003014 <UART_SetConfig+0x208>
        ret = HAL_ERROR;
 8003040:	2001      	movs	r0, #1
 8003042:	e7e7      	b.n	8003014 <UART_SetConfig+0x208>
 8003044:	2000      	movs	r0, #0
 8003046:	e7e5      	b.n	8003014 <UART_SetConfig+0x208>
        ret = HAL_ERROR;
 8003048:	2001      	movs	r0, #1
 800304a:	e7e3      	b.n	8003014 <UART_SetConfig+0x208>
        ret = HAL_ERROR;
 800304c:	2001      	movs	r0, #1
 800304e:	e7e1      	b.n	8003014 <UART_SetConfig+0x208>
 8003050:	2000      	movs	r0, #0
 8003052:	e7df      	b.n	8003014 <UART_SetConfig+0x208>
        ret = HAL_ERROR;
 8003054:	2001      	movs	r0, #1
 8003056:	e7dd      	b.n	8003014 <UART_SetConfig+0x208>
 8003058:	efff69f3 	.word	0xefff69f3
 800305c:	40008000 	.word	0x40008000
 8003060:	40013800 	.word	0x40013800
 8003064:	40004400 	.word	0x40004400
 8003068:	00f42400 	.word	0x00f42400
 800306c:	000ffcff 	.word	0x000ffcff

08003070 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003070:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003072:	f013 0f01 	tst.w	r3, #1
 8003076:	d006      	beq.n	8003086 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003078:	6802      	ldr	r2, [r0, #0]
 800307a:	6853      	ldr	r3, [r2, #4]
 800307c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003080:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8003082:	430b      	orrs	r3, r1
 8003084:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003086:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003088:	f013 0f02 	tst.w	r3, #2
 800308c:	d006      	beq.n	800309c <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800308e:	6802      	ldr	r2, [r0, #0]
 8003090:	6853      	ldr	r3, [r2, #4]
 8003092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003096:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003098:	430b      	orrs	r3, r1
 800309a:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800309c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800309e:	f013 0f04 	tst.w	r3, #4
 80030a2:	d006      	beq.n	80030b2 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030a4:	6802      	ldr	r2, [r0, #0]
 80030a6:	6853      	ldr	r3, [r2, #4]
 80030a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ac:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80030ae:	430b      	orrs	r3, r1
 80030b0:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030b2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80030b4:	f013 0f08 	tst.w	r3, #8
 80030b8:	d006      	beq.n	80030c8 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030ba:	6802      	ldr	r2, [r0, #0]
 80030bc:	6853      	ldr	r3, [r2, #4]
 80030be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80030c2:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80030c4:	430b      	orrs	r3, r1
 80030c6:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80030ca:	f013 0f10 	tst.w	r3, #16
 80030ce:	d006      	beq.n	80030de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030d0:	6802      	ldr	r2, [r0, #0]
 80030d2:	6893      	ldr	r3, [r2, #8]
 80030d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030d8:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80030da:	430b      	orrs	r3, r1
 80030dc:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030de:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80030e0:	f013 0f20 	tst.w	r3, #32
 80030e4:	d006      	beq.n	80030f4 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030e6:	6802      	ldr	r2, [r0, #0]
 80030e8:	6893      	ldr	r3, [r2, #8]
 80030ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030ee:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80030f0:	430b      	orrs	r3, r1
 80030f2:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80030f6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80030fa:	d00a      	beq.n	8003112 <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030fc:	6802      	ldr	r2, [r0, #0]
 80030fe:	6853      	ldr	r3, [r2, #4]
 8003100:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003104:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003106:	430b      	orrs	r3, r1
 8003108:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800310a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800310c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003110:	d00b      	beq.n	800312a <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003112:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003114:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003118:	d006      	beq.n	8003128 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800311a:	6802      	ldr	r2, [r0, #0]
 800311c:	6853      	ldr	r3, [r2, #4]
 800311e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003122:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003124:	430b      	orrs	r3, r1
 8003126:	6053      	str	r3, [r2, #4]
  }
}
 8003128:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800312a:	6802      	ldr	r2, [r0, #0]
 800312c:	6853      	ldr	r3, [r2, #4]
 800312e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003132:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8003134:	430b      	orrs	r3, r1
 8003136:	6053      	str	r3, [r2, #4]
 8003138:	e7eb      	b.n	8003112 <UART_AdvFeatureConfig+0xa2>

0800313a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800313a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800313e:	4604      	mov	r4, r0
 8003140:	460f      	mov	r7, r1
 8003142:	4616      	mov	r6, r2
 8003144:	4698      	mov	r8, r3
 8003146:	9d06      	ldr	r5, [sp, #24]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003148:	6823      	ldr	r3, [r4, #0]
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	ea37 0303 	bics.w	r3, r7, r3
 8003150:	bf0c      	ite	eq
 8003152:	2301      	moveq	r3, #1
 8003154:	2300      	movne	r3, #0
 8003156:	42b3      	cmp	r3, r6
 8003158:	d13a      	bne.n	80031d0 <UART_WaitOnFlagUntilTimeout+0x96>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800315a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800315e:	d0f3      	beq.n	8003148 <UART_WaitOnFlagUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003160:	f7fd ff66 	bl	8001030 <HAL_GetTick>
 8003164:	eba0 0008 	sub.w	r0, r0, r8
 8003168:	42a8      	cmp	r0, r5
 800316a:	d81f      	bhi.n	80031ac <UART_WaitOnFlagUntilTimeout+0x72>
 800316c:	b1f5      	cbz	r5, 80031ac <UART_WaitOnFlagUntilTimeout+0x72>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800316e:	6823      	ldr	r3, [r4, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	f012 0f04 	tst.w	r2, #4
 8003176:	d0e7      	beq.n	8003148 <UART_WaitOnFlagUntilTimeout+0xe>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003178:	69da      	ldr	r2, [r3, #28]
 800317a:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800317e:	d0e3      	beq.n	8003148 <UART_WaitOnFlagUntilTimeout+0xe>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003180:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003184:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003186:	6822      	ldr	r2, [r4, #0]
 8003188:	6813      	ldr	r3, [r2, #0]
 800318a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800318e:	6013      	str	r3, [r2, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003190:	6822      	ldr	r2, [r4, #0]
 8003192:	6893      	ldr	r3, [r2, #8]
 8003194:	f023 0301 	bic.w	r3, r3, #1
 8003198:	6093      	str	r3, [r2, #8]

          huart->gState = HAL_UART_STATE_READY;
 800319a:	2320      	movs	r3, #32
 800319c:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800319e:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031a0:	67e3      	str	r3, [r4, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031a2:	2300      	movs	r3, #0
 80031a4:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70

          return HAL_TIMEOUT;
 80031a8:	2003      	movs	r0, #3
 80031aa:	e012      	b.n	80031d2 <UART_WaitOnFlagUntilTimeout+0x98>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031ac:	6822      	ldr	r2, [r4, #0]
 80031ae:	6813      	ldr	r3, [r2, #0]
 80031b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031b4:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031b6:	6822      	ldr	r2, [r4, #0]
 80031b8:	6893      	ldr	r3, [r2, #8]
 80031ba:	f023 0301 	bic.w	r3, r3, #1
 80031be:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 80031c0:	2320      	movs	r3, #32
 80031c2:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80031c4:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 80031c6:	2300      	movs	r3, #0
 80031c8:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        return HAL_TIMEOUT;
 80031cc:	2003      	movs	r0, #3
 80031ce:	e000      	b.n	80031d2 <UART_WaitOnFlagUntilTimeout+0x98>
        }
      }
    }
  }
  return HAL_OK;
 80031d0:	2000      	movs	r0, #0
}
 80031d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080031d6 <UART_CheckIdleState>:
{
 80031d6:	b530      	push	{r4, r5, lr}
 80031d8:	b083      	sub	sp, #12
 80031da:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031dc:	2300      	movs	r3, #0
 80031de:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80031e0:	f7fd ff26 	bl	8001030 <HAL_GetTick>
 80031e4:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031e6:	6823      	ldr	r3, [r4, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f013 0f08 	tst.w	r3, #8
 80031ee:	d10c      	bne.n	800320a <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031f0:	6823      	ldr	r3, [r4, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f013 0f04 	tst.w	r3, #4
 80031f8:	d115      	bne.n	8003226 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 80031fa:	2320      	movs	r3, #32
 80031fc:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80031fe:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8003200:	2000      	movs	r0, #0
 8003202:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8003206:	b003      	add	sp, #12
 8003208:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800320a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	4603      	mov	r3, r0
 8003212:	2200      	movs	r2, #0
 8003214:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003218:	4620      	mov	r0, r4
 800321a:	f7ff ff8e 	bl	800313a <UART_WaitOnFlagUntilTimeout>
 800321e:	2800      	cmp	r0, #0
 8003220:	d0e6      	beq.n	80031f0 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8003222:	2003      	movs	r0, #3
 8003224:	e7ef      	b.n	8003206 <UART_CheckIdleState+0x30>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003226:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	462b      	mov	r3, r5
 800322e:	2200      	movs	r2, #0
 8003230:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003234:	4620      	mov	r0, r4
 8003236:	f7ff ff80 	bl	800313a <UART_WaitOnFlagUntilTimeout>
 800323a:	2800      	cmp	r0, #0
 800323c:	d0dd      	beq.n	80031fa <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 800323e:	2003      	movs	r0, #3
 8003240:	e7e1      	b.n	8003206 <UART_CheckIdleState+0x30>

08003242 <HAL_UART_Init>:
  if (huart == NULL)
 8003242:	b368      	cbz	r0, 80032a0 <HAL_UART_Init+0x5e>
{
 8003244:	b510      	push	{r4, lr}
 8003246:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003248:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800324a:	b303      	cbz	r3, 800328e <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 800324c:	2324      	movs	r3, #36	; 0x24
 800324e:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8003250:	6822      	ldr	r2, [r4, #0]
 8003252:	6813      	ldr	r3, [r2, #0]
 8003254:	f023 0301 	bic.w	r3, r3, #1
 8003258:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800325a:	4620      	mov	r0, r4
 800325c:	f7ff fdd6 	bl	8002e0c <UART_SetConfig>
 8003260:	2801      	cmp	r0, #1
 8003262:	d013      	beq.n	800328c <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003264:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003266:	b9bb      	cbnz	r3, 8003298 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003268:	6822      	ldr	r2, [r4, #0]
 800326a:	6853      	ldr	r3, [r2, #4]
 800326c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003270:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003272:	6822      	ldr	r2, [r4, #0]
 8003274:	6893      	ldr	r3, [r2, #8]
 8003276:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800327a:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800327c:	6822      	ldr	r2, [r4, #0]
 800327e:	6813      	ldr	r3, [r2, #0]
 8003280:	f043 0301 	orr.w	r3, r3, #1
 8003284:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8003286:	4620      	mov	r0, r4
 8003288:	f7ff ffa5 	bl	80031d6 <UART_CheckIdleState>
}
 800328c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800328e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8003292:	f7fd fb93 	bl	80009bc <HAL_UART_MspInit>
 8003296:	e7d9      	b.n	800324c <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8003298:	4620      	mov	r0, r4
 800329a:	f7ff fee9 	bl	8003070 <UART_AdvFeatureConfig>
 800329e:	e7e3      	b.n	8003268 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 80032a0:	2001      	movs	r0, #1
}
 80032a2:	4770      	bx	lr

080032a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80032a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80032a8:	f7fd fbee 	bl	8000a88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80032ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80032ae:	e003      	b.n	80032b8 <LoopCopyDataInit>

080032b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80032b0:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80032b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80032b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80032b6:	3104      	adds	r1, #4

080032b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80032b8:	480a      	ldr	r0, [pc, #40]	; (80032e4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80032ba:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80032bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80032be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80032c0:	d3f6      	bcc.n	80032b0 <CopyDataInit>
	ldr	r2, =_sbss
 80032c2:	4a0a      	ldr	r2, [pc, #40]	; (80032ec <LoopForever+0x12>)
	b	LoopFillZerobss
 80032c4:	e002      	b.n	80032cc <LoopFillZerobss>

080032c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80032c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80032c8:	f842 3b04 	str.w	r3, [r2], #4

080032cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80032cc:	4b08      	ldr	r3, [pc, #32]	; (80032f0 <LoopForever+0x16>)
	cmp	r2, r3
 80032ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80032d0:	d3f9      	bcc.n	80032c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80032d2:	f000 f817 	bl	8003304 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80032d6:	f7fd faad 	bl	8000834 <main>

080032da <LoopForever>:

LoopForever:
    b LoopForever
 80032da:	e7fe      	b.n	80032da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80032dc:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80032e0:	08003628 	.word	0x08003628
	ldr	r0, =_sdata
 80032e4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80032e8:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80032ec:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80032f0:	20000414 	.word	0x20000414

080032f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80032f4:	e7fe      	b.n	80032f4 <ADC1_IRQHandler>
	...

080032f8 <__errno>:
 80032f8:	4b01      	ldr	r3, [pc, #4]	; (8003300 <__errno+0x8>)
 80032fa:	6818      	ldr	r0, [r3, #0]
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	2000000c 	.word	0x2000000c

08003304 <__libc_init_array>:
 8003304:	b570      	push	{r4, r5, r6, lr}
 8003306:	4e0d      	ldr	r6, [pc, #52]	; (800333c <__libc_init_array+0x38>)
 8003308:	4c0d      	ldr	r4, [pc, #52]	; (8003340 <__libc_init_array+0x3c>)
 800330a:	1ba4      	subs	r4, r4, r6
 800330c:	10a4      	asrs	r4, r4, #2
 800330e:	2500      	movs	r5, #0
 8003310:	42a5      	cmp	r5, r4
 8003312:	d109      	bne.n	8003328 <__libc_init_array+0x24>
 8003314:	4e0b      	ldr	r6, [pc, #44]	; (8003344 <__libc_init_array+0x40>)
 8003316:	4c0c      	ldr	r4, [pc, #48]	; (8003348 <__libc_init_array+0x44>)
 8003318:	f000 f8c8 	bl	80034ac <_init>
 800331c:	1ba4      	subs	r4, r4, r6
 800331e:	10a4      	asrs	r4, r4, #2
 8003320:	2500      	movs	r5, #0
 8003322:	42a5      	cmp	r5, r4
 8003324:	d105      	bne.n	8003332 <__libc_init_array+0x2e>
 8003326:	bd70      	pop	{r4, r5, r6, pc}
 8003328:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800332c:	4798      	blx	r3
 800332e:	3501      	adds	r5, #1
 8003330:	e7ee      	b.n	8003310 <__libc_init_array+0xc>
 8003332:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003336:	4798      	blx	r3
 8003338:	3501      	adds	r5, #1
 800333a:	e7f2      	b.n	8003322 <__libc_init_array+0x1e>
 800333c:	08003618 	.word	0x08003618
 8003340:	08003618 	.word	0x08003618
 8003344:	08003618 	.word	0x08003618
 8003348:	0800361c 	.word	0x0800361c

0800334c <memset>:
 800334c:	4402      	add	r2, r0
 800334e:	4603      	mov	r3, r0
 8003350:	4293      	cmp	r3, r2
 8003352:	d100      	bne.n	8003356 <memset+0xa>
 8003354:	4770      	bx	lr
 8003356:	f803 1b01 	strb.w	r1, [r3], #1
 800335a:	e7f9      	b.n	8003350 <memset+0x4>

0800335c <rand>:
 800335c:	b538      	push	{r3, r4, r5, lr}
 800335e:	4b13      	ldr	r3, [pc, #76]	; (80033ac <rand+0x50>)
 8003360:	681c      	ldr	r4, [r3, #0]
 8003362:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003364:	b97b      	cbnz	r3, 8003386 <rand+0x2a>
 8003366:	2018      	movs	r0, #24
 8003368:	f000 f82c 	bl	80033c4 <malloc>
 800336c:	4a10      	ldr	r2, [pc, #64]	; (80033b0 <rand+0x54>)
 800336e:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <rand+0x58>)
 8003370:	63a0      	str	r0, [r4, #56]	; 0x38
 8003372:	e9c0 2300 	strd	r2, r3, [r0]
 8003376:	4b10      	ldr	r3, [pc, #64]	; (80033b8 <rand+0x5c>)
 8003378:	6083      	str	r3, [r0, #8]
 800337a:	230b      	movs	r3, #11
 800337c:	8183      	strh	r3, [r0, #12]
 800337e:	2201      	movs	r2, #1
 8003380:	2300      	movs	r3, #0
 8003382:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003386:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003388:	480c      	ldr	r0, [pc, #48]	; (80033bc <rand+0x60>)
 800338a:	690a      	ldr	r2, [r1, #16]
 800338c:	694b      	ldr	r3, [r1, #20]
 800338e:	4c0c      	ldr	r4, [pc, #48]	; (80033c0 <rand+0x64>)
 8003390:	4350      	muls	r0, r2
 8003392:	fb04 0003 	mla	r0, r4, r3, r0
 8003396:	fba2 2304 	umull	r2, r3, r2, r4
 800339a:	4403      	add	r3, r0
 800339c:	1c54      	adds	r4, r2, #1
 800339e:	f143 0500 	adc.w	r5, r3, #0
 80033a2:	e9c1 4504 	strd	r4, r5, [r1, #16]
 80033a6:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 80033aa:	bd38      	pop	{r3, r4, r5, pc}
 80033ac:	2000000c 	.word	0x2000000c
 80033b0:	abcd330e 	.word	0xabcd330e
 80033b4:	e66d1234 	.word	0xe66d1234
 80033b8:	0005deec 	.word	0x0005deec
 80033bc:	5851f42d 	.word	0x5851f42d
 80033c0:	4c957f2d 	.word	0x4c957f2d

080033c4 <malloc>:
 80033c4:	4b02      	ldr	r3, [pc, #8]	; (80033d0 <malloc+0xc>)
 80033c6:	4601      	mov	r1, r0
 80033c8:	6818      	ldr	r0, [r3, #0]
 80033ca:	f000 b803 	b.w	80033d4 <_malloc_r>
 80033ce:	bf00      	nop
 80033d0:	2000000c 	.word	0x2000000c

080033d4 <_malloc_r>:
 80033d4:	b570      	push	{r4, r5, r6, lr}
 80033d6:	1ccd      	adds	r5, r1, #3
 80033d8:	f025 0503 	bic.w	r5, r5, #3
 80033dc:	3508      	adds	r5, #8
 80033de:	2d0c      	cmp	r5, #12
 80033e0:	bf38      	it	cc
 80033e2:	250c      	movcc	r5, #12
 80033e4:	2d00      	cmp	r5, #0
 80033e6:	4606      	mov	r6, r0
 80033e8:	db01      	blt.n	80033ee <_malloc_r+0x1a>
 80033ea:	42a9      	cmp	r1, r5
 80033ec:	d903      	bls.n	80033f6 <_malloc_r+0x22>
 80033ee:	230c      	movs	r3, #12
 80033f0:	6033      	str	r3, [r6, #0]
 80033f2:	2000      	movs	r0, #0
 80033f4:	bd70      	pop	{r4, r5, r6, pc}
 80033f6:	f000 f857 	bl	80034a8 <__malloc_lock>
 80033fa:	4a21      	ldr	r2, [pc, #132]	; (8003480 <_malloc_r+0xac>)
 80033fc:	6814      	ldr	r4, [r2, #0]
 80033fe:	4621      	mov	r1, r4
 8003400:	b991      	cbnz	r1, 8003428 <_malloc_r+0x54>
 8003402:	4c20      	ldr	r4, [pc, #128]	; (8003484 <_malloc_r+0xb0>)
 8003404:	6823      	ldr	r3, [r4, #0]
 8003406:	b91b      	cbnz	r3, 8003410 <_malloc_r+0x3c>
 8003408:	4630      	mov	r0, r6
 800340a:	f000 f83d 	bl	8003488 <_sbrk_r>
 800340e:	6020      	str	r0, [r4, #0]
 8003410:	4629      	mov	r1, r5
 8003412:	4630      	mov	r0, r6
 8003414:	f000 f838 	bl	8003488 <_sbrk_r>
 8003418:	1c43      	adds	r3, r0, #1
 800341a:	d124      	bne.n	8003466 <_malloc_r+0x92>
 800341c:	230c      	movs	r3, #12
 800341e:	6033      	str	r3, [r6, #0]
 8003420:	4630      	mov	r0, r6
 8003422:	f000 f842 	bl	80034aa <__malloc_unlock>
 8003426:	e7e4      	b.n	80033f2 <_malloc_r+0x1e>
 8003428:	680b      	ldr	r3, [r1, #0]
 800342a:	1b5b      	subs	r3, r3, r5
 800342c:	d418      	bmi.n	8003460 <_malloc_r+0x8c>
 800342e:	2b0b      	cmp	r3, #11
 8003430:	d90f      	bls.n	8003452 <_malloc_r+0x7e>
 8003432:	600b      	str	r3, [r1, #0]
 8003434:	50cd      	str	r5, [r1, r3]
 8003436:	18cc      	adds	r4, r1, r3
 8003438:	4630      	mov	r0, r6
 800343a:	f000 f836 	bl	80034aa <__malloc_unlock>
 800343e:	f104 000b 	add.w	r0, r4, #11
 8003442:	1d23      	adds	r3, r4, #4
 8003444:	f020 0007 	bic.w	r0, r0, #7
 8003448:	1ac3      	subs	r3, r0, r3
 800344a:	d0d3      	beq.n	80033f4 <_malloc_r+0x20>
 800344c:	425a      	negs	r2, r3
 800344e:	50e2      	str	r2, [r4, r3]
 8003450:	e7d0      	b.n	80033f4 <_malloc_r+0x20>
 8003452:	428c      	cmp	r4, r1
 8003454:	684b      	ldr	r3, [r1, #4]
 8003456:	bf16      	itet	ne
 8003458:	6063      	strne	r3, [r4, #4]
 800345a:	6013      	streq	r3, [r2, #0]
 800345c:	460c      	movne	r4, r1
 800345e:	e7eb      	b.n	8003438 <_malloc_r+0x64>
 8003460:	460c      	mov	r4, r1
 8003462:	6849      	ldr	r1, [r1, #4]
 8003464:	e7cc      	b.n	8003400 <_malloc_r+0x2c>
 8003466:	1cc4      	adds	r4, r0, #3
 8003468:	f024 0403 	bic.w	r4, r4, #3
 800346c:	42a0      	cmp	r0, r4
 800346e:	d005      	beq.n	800347c <_malloc_r+0xa8>
 8003470:	1a21      	subs	r1, r4, r0
 8003472:	4630      	mov	r0, r6
 8003474:	f000 f808 	bl	8003488 <_sbrk_r>
 8003478:	3001      	adds	r0, #1
 800347a:	d0cf      	beq.n	800341c <_malloc_r+0x48>
 800347c:	6025      	str	r5, [r4, #0]
 800347e:	e7db      	b.n	8003438 <_malloc_r+0x64>
 8003480:	2000009c 	.word	0x2000009c
 8003484:	200000a0 	.word	0x200000a0

08003488 <_sbrk_r>:
 8003488:	b538      	push	{r3, r4, r5, lr}
 800348a:	4c06      	ldr	r4, [pc, #24]	; (80034a4 <_sbrk_r+0x1c>)
 800348c:	2300      	movs	r3, #0
 800348e:	4605      	mov	r5, r0
 8003490:	4608      	mov	r0, r1
 8003492:	6023      	str	r3, [r4, #0]
 8003494:	f7fd fada 	bl	8000a4c <_sbrk>
 8003498:	1c43      	adds	r3, r0, #1
 800349a:	d102      	bne.n	80034a2 <_sbrk_r+0x1a>
 800349c:	6823      	ldr	r3, [r4, #0]
 800349e:	b103      	cbz	r3, 80034a2 <_sbrk_r+0x1a>
 80034a0:	602b      	str	r3, [r5, #0]
 80034a2:	bd38      	pop	{r3, r4, r5, pc}
 80034a4:	20000410 	.word	0x20000410

080034a8 <__malloc_lock>:
 80034a8:	4770      	bx	lr

080034aa <__malloc_unlock>:
 80034aa:	4770      	bx	lr

080034ac <_init>:
 80034ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ae:	bf00      	nop
 80034b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034b2:	bc08      	pop	{r3}
 80034b4:	469e      	mov	lr, r3
 80034b6:	4770      	bx	lr

080034b8 <_fini>:
 80034b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ba:	bf00      	nop
 80034bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034be:	bc08      	pop	{r3}
 80034c0:	469e      	mov	lr, r3
 80034c2:	4770      	bx	lr
 80034c4:	0000      	movs	r0, r0
	...

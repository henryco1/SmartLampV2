
SmartLampV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000190  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cc0  08000190  08000190  00010190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001e50  08001e50  00011e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e98  08001e98  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08001e98  08001e98  00011e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001ea0  08001ea0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08001ea0  08001ea0  00011ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08001ea8  08001ea8  00011ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08001eb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000010  08001ec0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08001ec0  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a7a5  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018e6  00000000  00000000  0002a7e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008a0  00000000  00000000  0002c0d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000858  00000000  00000000  0002c970  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f268  00000000  00000000  0002d1c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000799b  00000000  00000000  0004c430  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bc835  00000000  00000000  00053dcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00110600  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001400  00000000  00000000  0011067c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000047bc  00000000  00000000  00111a7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001e38 	.word	0x08001e38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08001e38 	.word	0x08001e38

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d4:	2400      	movs	r4, #0
 80004d6:	9403      	str	r4, [sp, #12]
 80004d8:	9404      	str	r4, [sp, #16]
 80004da:	9405      	str	r4, [sp, #20]
 80004dc:	9406      	str	r4, [sp, #24]
 80004de:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e0:	4b16      	ldr	r3, [pc, #88]	; (800053c <MX_GPIO_Init+0x6c>)
 80004e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004e4:	f042 0204 	orr.w	r2, r2, #4
 80004e8:	64da      	str	r2, [r3, #76]	; 0x4c
 80004ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ec:	f002 0204 	and.w	r2, r2, #4
 80004f0:	9200      	str	r2, [sp, #0]
 80004f2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004f6:	f042 0201 	orr.w	r2, r2, #1
 80004fa:	64da      	str	r2, [r3, #76]	; 0x4c
 80004fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004fe:	f002 0201 	and.w	r2, r2, #1
 8000502:	9201      	str	r2, [sp, #4]
 8000504:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000506:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000508:	f042 0202 	orr.w	r2, r2, #2
 800050c:	64da      	str	r2, [r3, #76]	; 0x4c
 800050e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000510:	f003 0302 	and.w	r3, r3, #2
 8000514:	9302      	str	r3, [sp, #8]
 8000516:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000518:	4d09      	ldr	r5, [pc, #36]	; (8000540 <MX_GPIO_Init+0x70>)
 800051a:	4622      	mov	r2, r4
 800051c:	2108      	movs	r1, #8
 800051e:	4628      	mov	r0, r5
 8000520:	f000 fa9a 	bl	8000a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000524:	2308      	movs	r3, #8
 8000526:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000528:	2301      	movs	r3, #1
 800052a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000530:	a903      	add	r1, sp, #12
 8000532:	4628      	mov	r0, r5
 8000534:	f000 f9d0 	bl	80008d8 <HAL_GPIO_Init>
}
 8000538:	b009      	add	sp, #36	; 0x24
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	40021000 	.word	0x40021000
 8000540:	48000400 	.word	0x48000400

08000544 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000544:	b672      	cpsid	i
 8000546:	e7fe      	b.n	8000546 <Error_Handler+0x2>

08000548 <MX_USART2_UART_Init>:
{
 8000548:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 800054a:	480b      	ldr	r0, [pc, #44]	; (8000578 <MX_USART2_UART_Init+0x30>)
 800054c:	4b0b      	ldr	r3, [pc, #44]	; (800057c <MX_USART2_UART_Init+0x34>)
 800054e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000550:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000554:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000556:	2300      	movs	r3, #0
 8000558:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800055a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800055c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800055e:	220c      	movs	r2, #12
 8000560:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000562:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000564:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000566:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000568:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800056a:	f001 fbde 	bl	8001d2a <HAL_UART_Init>
 800056e:	b900      	cbnz	r0, 8000572 <MX_USART2_UART_Init+0x2a>
}
 8000570:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000572:	f7ff ffe7 	bl	8000544 <Error_Handler>
 8000576:	bf00      	nop
 8000578:	2000002c 	.word	0x2000002c
 800057c:	40004400 	.word	0x40004400

08000580 <SystemClock_Config>:
{
 8000580:	b510      	push	{r4, lr}
 8000582:	b0ac      	sub	sp, #176	; 0xb0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000584:	2244      	movs	r2, #68	; 0x44
 8000586:	2100      	movs	r1, #0
 8000588:	a81b      	add	r0, sp, #108	; 0x6c
 800058a:	f001 fc4d 	bl	8001e28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058e:	2400      	movs	r4, #0
 8000590:	9416      	str	r4, [sp, #88]	; 0x58
 8000592:	9417      	str	r4, [sp, #92]	; 0x5c
 8000594:	9418      	str	r4, [sp, #96]	; 0x60
 8000596:	9419      	str	r4, [sp, #100]	; 0x64
 8000598:	941a      	str	r4, [sp, #104]	; 0x68
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800059a:	2254      	movs	r2, #84	; 0x54
 800059c:	4621      	mov	r1, r4
 800059e:	a801      	add	r0, sp, #4
 80005a0:	f001 fc42 	bl	8001e28 <memset>
  HAL_PWR_EnableBkUpAccess();
 80005a4:	f000 fa5e 	bl	8000a64 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005a8:	4a21      	ldr	r2, [pc, #132]	; (8000630 <SystemClock_Config+0xb0>)
 80005aa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80005ae:	f023 0318 	bic.w	r3, r3, #24
 80005b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005b6:	2314      	movs	r3, #20
 80005b8:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005ba:	2301      	movs	r3, #1
 80005bc:	931d      	str	r3, [sp, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005be:	9321      	str	r3, [sp, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005c0:	9422      	str	r4, [sp, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005c2:	2260      	movs	r2, #96	; 0x60
 80005c4:	9223      	str	r2, [sp, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2202      	movs	r2, #2
 80005c8:	9225      	str	r2, [sp, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005ca:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005cc:	9327      	str	r3, [sp, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 80005ce:	2310      	movs	r3, #16
 80005d0:	9328      	str	r3, [sp, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005d2:	2307      	movs	r3, #7
 80005d4:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005d6:	922a      	str	r2, [sp, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005d8:	922b      	str	r2, [sp, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005da:	a81b      	add	r0, sp, #108	; 0x6c
 80005dc:	f000 fb3c 	bl	8000c58 <HAL_RCC_OscConfig>
 80005e0:	b9e8      	cbnz	r0, 800061e <SystemClock_Config+0x9e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e2:	230f      	movs	r3, #15
 80005e4:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e6:	2303      	movs	r3, #3
 80005e8:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ee:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f0:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005f2:	2101      	movs	r1, #1
 80005f4:	a816      	add	r0, sp, #88	; 0x58
 80005f6:	f000 fe75 	bl	80012e4 <HAL_RCC_ClockConfig>
 80005fa:	b990      	cbnz	r0, 8000622 <SystemClock_Config+0xa2>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	9301      	str	r3, [sp, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000600:	2300      	movs	r3, #0
 8000602:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000604:	a801      	add	r0, sp, #4
 8000606:	f000 fff9 	bl	80015fc <HAL_RCCEx_PeriphCLKConfig>
 800060a:	b960      	cbnz	r0, 8000626 <SystemClock_Config+0xa6>
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800060c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000610:	f000 fa38 	bl	8000a84 <HAL_PWREx_ControlVoltageScaling>
 8000614:	b948      	cbnz	r0, 800062a <SystemClock_Config+0xaa>
  HAL_RCCEx_EnableMSIPLLMode();
 8000616:	f001 f965 	bl	80018e4 <HAL_RCCEx_EnableMSIPLLMode>
}
 800061a:	b02c      	add	sp, #176	; 0xb0
 800061c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800061e:	f7ff ff91 	bl	8000544 <Error_Handler>
    Error_Handler();
 8000622:	f7ff ff8f 	bl	8000544 <Error_Handler>
    Error_Handler();
 8000626:	f7ff ff8d 	bl	8000544 <Error_Handler>
    Error_Handler();
 800062a:	f7ff ff8b 	bl	8000544 <Error_Handler>
 800062e:	bf00      	nop
 8000630:	40021000 	.word	0x40021000

08000634 <main>:
{
 8000634:	b508      	push	{r3, lr}
  HAL_Init();
 8000636:	f000 f8d1 	bl	80007dc <HAL_Init>
  SystemClock_Config();
 800063a:	f7ff ffa1 	bl	8000580 <SystemClock_Config>
  MX_GPIO_Init();
 800063e:	f7ff ff47 	bl	80004d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000642:	f7ff ff81 	bl	8000548 <MX_USART2_UART_Init>
  LED_Init();
 8000646:	f000 f889 	bl	800075c <LED_Init>
 800064a:	e7fe      	b.n	800064a <main+0x16>

0800064c <HAL_MspInit>:

/* Includes ------------------------------------------------------------------*/
#include "main.h"

void HAL_MspInit(void)
{
 800064c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064e:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <HAL_MspInit+0x2c>)
 8000650:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000652:	f042 0201 	orr.w	r2, r2, #1
 8000656:	661a      	str	r2, [r3, #96]	; 0x60
 8000658:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800065a:	f002 0201 	and.w	r2, r2, #1
 800065e:	9200      	str	r2, [sp, #0]
 8000660:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000662:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000664:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000668:	659a      	str	r2, [r3, #88]	; 0x58
 800066a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800066c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000670:	9301      	str	r3, [sp, #4]
 8000672:	9b01      	ldr	r3, [sp, #4]
}
 8000674:	b002      	add	sp, #8
 8000676:	4770      	bx	lr
 8000678:	40021000 	.word	0x40021000

0800067c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800067c:	b530      	push	{r4, r5, lr}
 800067e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000680:	2300      	movs	r3, #0
 8000682:	9303      	str	r3, [sp, #12]
 8000684:	9304      	str	r3, [sp, #16]
 8000686:	9305      	str	r3, [sp, #20]
 8000688:	9306      	str	r3, [sp, #24]
 800068a:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 800068c:	6802      	ldr	r2, [r0, #0]
 800068e:	4b1a      	ldr	r3, [pc, #104]	; (80006f8 <HAL_UART_MspInit+0x7c>)
 8000690:	429a      	cmp	r2, r3
 8000692:	d001      	beq.n	8000698 <HAL_UART_MspInit+0x1c>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
  }

}
 8000694:	b009      	add	sp, #36	; 0x24
 8000696:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8000698:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 800069c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800069e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80006a2:	659a      	str	r2, [r3, #88]	; 0x58
 80006a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80006a6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80006aa:	9201      	str	r2, [sp, #4]
 80006ac:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006b0:	f042 0201 	orr.w	r2, r2, #1
 80006b4:	64da      	str	r2, [r3, #76]	; 0x4c
 80006b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b8:	f003 0301 	and.w	r3, r3, #1
 80006bc:	9302      	str	r3, [sp, #8]
 80006be:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80006c0:	2304      	movs	r3, #4
 80006c2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c4:	2502      	movs	r5, #2
 80006c6:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c8:	2403      	movs	r4, #3
 80006ca:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006cc:	2307      	movs	r3, #7
 80006ce:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80006d0:	a903      	add	r1, sp, #12
 80006d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d6:	f000 f8ff 	bl	80008d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80006da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006de:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e0:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e6:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80006e8:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80006ea:	a903      	add	r1, sp, #12
 80006ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f0:	f000 f8f2 	bl	80008d8 <HAL_GPIO_Init>
}
 80006f4:	e7ce      	b.n	8000694 <HAL_UART_MspInit+0x18>
 80006f6:	bf00      	nop
 80006f8:	40004400 	.word	0x40004400

080006fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006fc:	e7fe      	b.n	80006fc <NMI_Handler>

080006fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fe:	e7fe      	b.n	80006fe <HardFault_Handler>

08000700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000700:	e7fe      	b.n	8000700 <MemManage_Handler>

08000702 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000702:	e7fe      	b.n	8000702 <BusFault_Handler>

08000704 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000704:	e7fe      	b.n	8000704 <UsageFault_Handler>

08000706 <SVC_Handler>:
/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
}
 8000706:	4770      	bx	lr

08000708 <DebugMon_Handler>:
/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
}
 8000708:	4770      	bx	lr

0800070a <PendSV_Handler>:
/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
}
 800070a:	4770      	bx	lr

0800070c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800070c:	b508      	push	{r3, lr}
  HAL_IncTick();
 800070e:	f000 f875 	bl	80007fc <HAL_IncTick>
}
 8000712:	bd08      	pop	{r3, pc}

08000714 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000714:	490f      	ldr	r1, [pc, #60]	; (8000754 <SystemInit+0x40>)
 8000716:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800071a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800071e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000722:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <SystemInit+0x44>)
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	f042 0201 	orr.w	r2, r2, #1
 800072a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800072c:	2000      	movs	r0, #0
 800072e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8000736:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800073a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800073c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000740:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000748:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800074a:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800074c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000750:	608b      	str	r3, [r1, #8]
#endif
}
 8000752:	4770      	bx	lr
 8000754:	e000ed00 	.word	0xe000ed00
 8000758:	40021000 	.word	0x40021000

0800075c <LED_Init>:
 */

#include "ws2812b.h"

void LED_Init(void)
{
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	b086      	sub	sp, #24
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	2300      	movs	r3, #0
 8000762:	9305      	str	r3, [sp, #20]

	  /*Configure GPIO pin : LD3_Pin */
	  GPIO_InitStruct.Pin = LD3_Pin;
 8000764:	2608      	movs	r6, #8
 8000766:	9601      	str	r6, [sp, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000768:	2401      	movs	r4, #1
 800076a:	9402      	str	r4, [sp, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800076c:	9403      	str	r4, [sp, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800076e:	2302      	movs	r3, #2
 8000770:	9304      	str	r3, [sp, #16]
	  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000772:	4d06      	ldr	r5, [pc, #24]	; (800078c <LED_Init+0x30>)
 8000774:	a901      	add	r1, sp, #4
 8000776:	4628      	mov	r0, r5
 8000778:	f000 f8ae 	bl	80008d8 <HAL_GPIO_Init>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800077c:	4622      	mov	r2, r4
 800077e:	4631      	mov	r1, r6
 8000780:	4628      	mov	r0, r5
 8000782:	f000 f969 	bl	8000a58 <HAL_GPIO_WritePin>
}
 8000786:	b006      	add	sp, #24
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	bf00      	nop
 800078c:	48000400 	.word	0x48000400

08000790 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000790:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <HAL_InitTick+0x44>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	b90b      	cbnz	r3, 800079a <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000796:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000798:	4770      	bx	lr
{
 800079a:	b510      	push	{r4, lr}
 800079c:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800079e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80007a6:	4a0c      	ldr	r2, [pc, #48]	; (80007d8 <HAL_InitTick+0x48>)
 80007a8:	6810      	ldr	r0, [r2, #0]
 80007aa:	fbb0 f0f3 	udiv	r0, r0, r3
 80007ae:	f000 f87d 	bl	80008ac <HAL_SYSTICK_Config>
 80007b2:	b968      	cbnz	r0, 80007d0 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007b4:	2c0f      	cmp	r4, #15
 80007b6:	d901      	bls.n	80007bc <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 80007b8:	2001      	movs	r0, #1
 80007ba:	e00a      	b.n	80007d2 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007bc:	2200      	movs	r2, #0
 80007be:	4621      	mov	r1, r4
 80007c0:	f04f 30ff 	mov.w	r0, #4294967295
 80007c4:	f000 f83e 	bl	8000844 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007c8:	4b02      	ldr	r3, [pc, #8]	; (80007d4 <HAL_InitTick+0x44>)
 80007ca:	605c      	str	r4, [r3, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007cc:	2000      	movs	r0, #0
 80007ce:	e000      	b.n	80007d2 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 80007d0:	2001      	movs	r0, #1
}
 80007d2:	bd10      	pop	{r4, pc}
 80007d4:	20000004 	.word	0x20000004
 80007d8:	20000000 	.word	0x20000000

080007dc <HAL_Init>:
{
 80007dc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007de:	2003      	movs	r0, #3
 80007e0:	f000 f81e 	bl	8000820 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007e4:	2000      	movs	r0, #0
 80007e6:	f7ff ffd3 	bl	8000790 <HAL_InitTick>
 80007ea:	b110      	cbz	r0, 80007f2 <HAL_Init+0x16>
    status = HAL_ERROR;
 80007ec:	2401      	movs	r4, #1
}
 80007ee:	4620      	mov	r0, r4
 80007f0:	bd10      	pop	{r4, pc}
 80007f2:	4604      	mov	r4, r0
    HAL_MspInit();
 80007f4:	f7ff ff2a 	bl	800064c <HAL_MspInit>
 80007f8:	e7f9      	b.n	80007ee <HAL_Init+0x12>
	...

080007fc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80007fc:	4b03      	ldr	r3, [pc, #12]	; (800080c <HAL_IncTick+0x10>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	4a03      	ldr	r2, [pc, #12]	; (8000810 <HAL_IncTick+0x14>)
 8000802:	6811      	ldr	r1, [r2, #0]
 8000804:	440b      	add	r3, r1
 8000806:	6013      	str	r3, [r2, #0]
}
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	20000004 	.word	0x20000004
 8000810:	200000ac 	.word	0x200000ac

08000814 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000814:	4b01      	ldr	r3, [pc, #4]	; (800081c <HAL_GetTick+0x8>)
 8000816:	6818      	ldr	r0, [r3, #0]
}
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	200000ac 	.word	0x200000ac

08000820 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000820:	4a07      	ldr	r2, [pc, #28]	; (8000840 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000822:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000824:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000828:	041b      	lsls	r3, r3, #16
 800082a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800082c:	0200      	lsls	r0, r0, #8
 800082e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000832:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000834:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000838:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800083c:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800083e:	4770      	bx	lr
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000844:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000846:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <HAL_NVIC_SetPriority+0x60>)
 8000848:	68db      	ldr	r3, [r3, #12]
 800084a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800084e:	f1c3 0407 	rsb	r4, r3, #7
 8000852:	2c04      	cmp	r4, #4
 8000854:	bf28      	it	cs
 8000856:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000858:	1d1d      	adds	r5, r3, #4
 800085a:	2d06      	cmp	r5, #6
 800085c:	d918      	bls.n	8000890 <HAL_NVIC_SetPriority+0x4c>
 800085e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000860:	f04f 35ff 	mov.w	r5, #4294967295
 8000864:	fa05 f404 	lsl.w	r4, r5, r4
 8000868:	ea21 0104 	bic.w	r1, r1, r4
 800086c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800086e:	fa05 f303 	lsl.w	r3, r5, r3
 8000872:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000876:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000878:	2800      	cmp	r0, #0
 800087a:	db0b      	blt.n	8000894 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800087c:	0109      	lsls	r1, r1, #4
 800087e:	b2c9      	uxtb	r1, r1
 8000880:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000884:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000888:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800088c:	bc30      	pop	{r4, r5}
 800088e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000890:	2300      	movs	r3, #0
 8000892:	e7e5      	b.n	8000860 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000894:	f000 000f 	and.w	r0, r0, #15
 8000898:	0109      	lsls	r1, r1, #4
 800089a:	b2c9      	uxtb	r1, r1
 800089c:	4b02      	ldr	r3, [pc, #8]	; (80008a8 <HAL_NVIC_SetPriority+0x64>)
 800089e:	5419      	strb	r1, [r3, r0]
 80008a0:	e7f4      	b.n	800088c <HAL_NVIC_SetPriority+0x48>
 80008a2:	bf00      	nop
 80008a4:	e000ed00 	.word	0xe000ed00
 80008a8:	e000ed14 	.word	0xe000ed14

080008ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008ac:	3801      	subs	r0, #1
 80008ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80008b2:	d20a      	bcs.n	80008ca <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <HAL_SYSTICK_Config+0x24>)
 80008b6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b8:	4a06      	ldr	r2, [pc, #24]	; (80008d4 <HAL_SYSTICK_Config+0x28>)
 80008ba:	21f0      	movs	r1, #240	; 0xf0
 80008bc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008c0:	2000      	movs	r0, #0
 80008c2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008c4:	2207      	movs	r2, #7
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80008ca:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	e000e010 	.word	0xe000e010
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008da:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 80008dc:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008de:	e096      	b.n	8000a0e <HAL_GPIO_Init+0x136>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008e0:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008e2:	005f      	lsls	r7, r3, #1
 80008e4:	2503      	movs	r5, #3
 80008e6:	40bd      	lsls	r5, r7
 80008e8:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008ec:	68cd      	ldr	r5, [r1, #12]
 80008ee:	40bd      	lsls	r5, r7
 80008f0:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80008f2:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008f4:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008f6:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80008fa:	684d      	ldr	r5, [r1, #4]
 80008fc:	f3c5 1400 	ubfx	r4, r5, #4, #1
 8000900:	409c      	lsls	r4, r3
 8000902:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 8000904:	6044      	str	r4, [r0, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000906:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000908:	005f      	lsls	r7, r3, #1
 800090a:	2403      	movs	r4, #3
 800090c:	40bc      	lsls	r4, r7
 800090e:	43e4      	mvns	r4, r4
 8000910:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000912:	688e      	ldr	r6, [r1, #8]
 8000914:	40be      	lsls	r6, r7
 8000916:	432e      	orrs	r6, r5
      GPIOx->PUPDR = temp;
 8000918:	60c6      	str	r6, [r0, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800091a:	684d      	ldr	r5, [r1, #4]
 800091c:	2d02      	cmp	r5, #2
 800091e:	d001      	beq.n	8000924 <HAL_GPIO_Init+0x4c>
 8000920:	2d12      	cmp	r5, #18
 8000922:	d113      	bne.n	800094c <HAL_GPIO_Init+0x74>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000924:	08de      	lsrs	r6, r3, #3
 8000926:	3608      	adds	r6, #8
 8000928:	f850 e026 	ldr.w	lr, [r0, r6, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800092c:	f003 0507 	and.w	r5, r3, #7
 8000930:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 8000934:	250f      	movs	r5, #15
 8000936:	fa05 f50c 	lsl.w	r5, r5, ip
 800093a:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800093e:	690d      	ldr	r5, [r1, #16]
 8000940:	fa05 f50c 	lsl.w	r5, r5, ip
 8000944:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3u] = temp;
 8000948:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800094c:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800094e:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000950:	684d      	ldr	r5, [r1, #4]
 8000952:	f005 0503 	and.w	r5, r5, #3
 8000956:	40bd      	lsls	r5, r7
 8000958:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 800095a:	6004      	str	r4, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800095c:	684c      	ldr	r4, [r1, #4]
 800095e:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8000962:	d053      	beq.n	8000a0c <HAL_GPIO_Init+0x134>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000964:	4c38      	ldr	r4, [pc, #224]	; (8000a48 <HAL_GPIO_Init+0x170>)
 8000966:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8000968:	f045 0501 	orr.w	r5, r5, #1
 800096c:	6625      	str	r5, [r4, #96]	; 0x60
 800096e:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8000970:	f004 0401 	and.w	r4, r4, #1
 8000974:	9401      	str	r4, [sp, #4]
 8000976:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000978:	089d      	lsrs	r5, r3, #2
 800097a:	1cae      	adds	r6, r5, #2
 800097c:	4c33      	ldr	r4, [pc, #204]	; (8000a4c <HAL_GPIO_Init+0x174>)
 800097e:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000982:	f003 0403 	and.w	r4, r3, #3
 8000986:	00a6      	lsls	r6, r4, #2
 8000988:	240f      	movs	r4, #15
 800098a:	40b4      	lsls	r4, r6
 800098c:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000990:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8000994:	d051      	beq.n	8000a3a <HAL_GPIO_Init+0x162>
 8000996:	4c2e      	ldr	r4, [pc, #184]	; (8000a50 <HAL_GPIO_Init+0x178>)
 8000998:	42a0      	cmp	r0, r4
 800099a:	d050      	beq.n	8000a3e <HAL_GPIO_Init+0x166>
 800099c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80009a0:	42a0      	cmp	r0, r4
 80009a2:	d048      	beq.n	8000a36 <HAL_GPIO_Init+0x15e>
 80009a4:	2407      	movs	r4, #7
 80009a6:	40b4      	lsls	r4, r6
 80009a8:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009aa:	3502      	adds	r5, #2
 80009ac:	4e27      	ldr	r6, [pc, #156]	; (8000a4c <HAL_GPIO_Init+0x174>)
 80009ae:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80009b2:	4c28      	ldr	r4, [pc, #160]	; (8000a54 <HAL_GPIO_Init+0x17c>)
 80009b4:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80009b6:	43d4      	mvns	r4, r2
 80009b8:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009bc:	684f      	ldr	r7, [r1, #4]
 80009be:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80009c2:	d001      	beq.n	80009c8 <HAL_GPIO_Init+0xf0>
        {
          temp |= iocurrent;
 80009c4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 80009c8:	4d22      	ldr	r5, [pc, #136]	; (8000a54 <HAL_GPIO_Init+0x17c>)
 80009ca:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 80009cc:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80009ce:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009d2:	684f      	ldr	r7, [r1, #4]
 80009d4:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80009d8:	d001      	beq.n	80009de <HAL_GPIO_Init+0x106>
        {
          temp |= iocurrent;
 80009da:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 80009de:	4d1d      	ldr	r5, [pc, #116]	; (8000a54 <HAL_GPIO_Init+0x17c>)
 80009e0:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80009e2:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 80009e4:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009e8:	684f      	ldr	r7, [r1, #4]
 80009ea:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80009ee:	d001      	beq.n	80009f4 <HAL_GPIO_Init+0x11c>
        {
          temp |= iocurrent;
 80009f0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80009f4:	4d17      	ldr	r5, [pc, #92]	; (8000a54 <HAL_GPIO_Init+0x17c>)
 80009f6:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 80009f8:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 80009fa:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009fc:	684e      	ldr	r6, [r1, #4]
 80009fe:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000a02:	d001      	beq.n	8000a08 <HAL_GPIO_Init+0x130>
        {
          temp |= iocurrent;
 8000a04:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8000a08:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <HAL_GPIO_Init+0x17c>)
 8000a0a:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 8000a0c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a0e:	680a      	ldr	r2, [r1, #0]
 8000a10:	fa32 f403 	lsrs.w	r4, r2, r3
 8000a14:	d015      	beq.n	8000a42 <HAL_GPIO_Init+0x16a>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a16:	2401      	movs	r4, #1
 8000a18:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 8000a1a:	4022      	ands	r2, r4
 8000a1c:	d0f6      	beq.n	8000a0c <HAL_GPIO_Init+0x134>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a1e:	684d      	ldr	r5, [r1, #4]
 8000a20:	1e6e      	subs	r6, r5, #1
 8000a22:	2e01      	cmp	r6, #1
 8000a24:	f67f af5c 	bls.w	80008e0 <HAL_GPIO_Init+0x8>
 8000a28:	2d11      	cmp	r5, #17
 8000a2a:	f43f af59 	beq.w	80008e0 <HAL_GPIO_Init+0x8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a2e:	2d12      	cmp	r5, #18
 8000a30:	f47f af69 	bne.w	8000906 <HAL_GPIO_Init+0x2e>
 8000a34:	e754      	b.n	80008e0 <HAL_GPIO_Init+0x8>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a36:	2402      	movs	r4, #2
 8000a38:	e7b5      	b.n	80009a6 <HAL_GPIO_Init+0xce>
 8000a3a:	2400      	movs	r4, #0
 8000a3c:	e7b3      	b.n	80009a6 <HAL_GPIO_Init+0xce>
 8000a3e:	2401      	movs	r4, #1
 8000a40:	e7b1      	b.n	80009a6 <HAL_GPIO_Init+0xce>
  }
}
 8000a42:	b003      	add	sp, #12
 8000a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	40010000 	.word	0x40010000
 8000a50:	48000400 	.word	0x48000400
 8000a54:	40010400 	.word	0x40010400

08000a58 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a58:	b90a      	cbnz	r2, 8000a5e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a5a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8000a5c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a5e:	6181      	str	r1, [r0, #24]
 8000a60:	4770      	bx	lr
	...

08000a64 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000a64:	4a02      	ldr	r2, [pc, #8]	; (8000a70 <HAL_PWR_EnableBkUpAccess+0xc>)
 8000a66:	6813      	ldr	r3, [r2, #0]
 8000a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a6c:	6013      	str	r3, [r2, #0]
}
 8000a6e:	4770      	bx	lr
 8000a70:	40007000 	.word	0x40007000

08000a74 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000a74:	4b02      	ldr	r3, [pc, #8]	; (8000a80 <HAL_PWREx_GetVoltageRange+0xc>)
 8000a76:	6818      	ldr	r0, [r3, #0]
#endif
}
 8000a78:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	40007000 	.word	0x40007000

08000a84 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000a84:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000a88:	d00f      	beq.n	8000aaa <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000a8a:	4b1f      	ldr	r3, [pc, #124]	; (8000b08 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000a92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a96:	d034      	beq.n	8000b02 <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a98:	4a1b      	ldr	r2, [pc, #108]	; (8000b08 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8000a9a:	6813      	ldr	r3, [r2, #0]
 8000a9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000aa0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aa4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000aaa:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ab2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ab6:	d022      	beq.n	8000afe <HAL_PWREx_ControlVoltageScaling+0x7a>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ab8:	4a13      	ldr	r2, [pc, #76]	; (8000b08 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8000aba:	6813      	ldr	r3, [r2, #0]
 8000abc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ac0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ac4:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ac6:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <HAL_PWREx_ControlVoltageScaling+0x88>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	2332      	movs	r3, #50	; 0x32
 8000acc:	fb03 f302 	mul.w	r3, r3, r2
 8000ad0:	4a0f      	ldr	r2, [pc, #60]	; (8000b10 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8000ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad6:	0c9b      	lsrs	r3, r3, #18
 8000ad8:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ada:	e000      	b.n	8000ade <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 8000adc:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8000ae0:	6952      	ldr	r2, [r2, #20]
 8000ae2:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000ae6:	d001      	beq.n	8000aec <HAL_PWREx_ControlVoltageScaling+0x68>
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d1f7      	bne.n	8000adc <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8000aee:	695b      	ldr	r3, [r3, #20]
 8000af0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000af4:	d101      	bne.n	8000afa <HAL_PWREx_ControlVoltageScaling+0x76>
  return HAL_OK;
 8000af6:	2000      	movs	r0, #0
 8000af8:	4770      	bx	lr
        return HAL_TIMEOUT;
 8000afa:	2003      	movs	r0, #3
 8000afc:	4770      	bx	lr
  return HAL_OK;
 8000afe:	2000      	movs	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	2000      	movs	r0, #0
}
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	40007000 	.word	0x40007000
 8000b0c:	20000000 	.word	0x20000000
 8000b10:	431bde83 	.word	0x431bde83

08000b14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000b14:	b530      	push	{r4, r5, lr}
 8000b16:	b083      	sub	sp, #12
 8000b18:	4605      	mov	r5, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000b1a:	4b20      	ldr	r3, [pc, #128]	; (8000b9c <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8000b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000b22:	d00b      	beq.n	8000b3c <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000b24:	f7ff ffa6 	bl	8000a74 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b28:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000b2c:	d017      	beq.n	8000b5e <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8000b2e:	2d80      	cmp	r5, #128	; 0x80
 8000b30:	d81f      	bhi.n	8000b72 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8000b32:	d02d      	beq.n	8000b90 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8000b34:	2d70      	cmp	r5, #112	; 0x70
 8000b36:	d02d      	beq.n	8000b94 <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000b38:	2100      	movs	r1, #0
 8000b3a:	e01b      	b.n	8000b74 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 8000b3c:	4c17      	ldr	r4, [pc, #92]	; (8000b9c <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8000b3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b44:	65a3      	str	r3, [r4, #88]	; 0x58
 8000b46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4c:	9301      	str	r3, [sp, #4]
 8000b4e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000b50:	f7ff ff90 	bl	8000a74 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8000b54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000b56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b5a:	65a3      	str	r3, [r4, #88]	; 0x58
 8000b5c:	e7e4      	b.n	8000b28 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8000b5e:	2d80      	cmp	r5, #128	; 0x80
 8000b60:	d903      	bls.n	8000b6a <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 8000b62:	2da0      	cmp	r5, #160	; 0xa0
 8000b64:	d903      	bls.n	8000b6e <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8000b66:	2102      	movs	r1, #2
 8000b68:	e004      	b.n	8000b74 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	e002      	b.n	8000b74 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8000b6e:	2101      	movs	r1, #1
 8000b70:	e000      	b.n	8000b74 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8000b72:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000b74:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8000b76:	6813      	ldr	r3, [r2, #0]
 8000b78:	f023 0307 	bic.w	r3, r3, #7
 8000b7c:	430b      	orrs	r3, r1
 8000b7e:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8000b80:	6813      	ldr	r3, [r2, #0]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d006      	beq.n	8000b98 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
 8000b8a:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8000b8c:	b003      	add	sp, #12
 8000b8e:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8000b90:	2102      	movs	r1, #2
 8000b92:	e7ef      	b.n	8000b74 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8000b94:	2101      	movs	r1, #1
 8000b96:	e7ed      	b.n	8000b74 <RCC_SetFlashLatencyFromMSIRange+0x60>
  return HAL_OK;
 8000b98:	2000      	movs	r0, #0
 8000b9a:	e7f7      	b.n	8000b8c <RCC_SetFlashLatencyFromMSIRange+0x78>
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	40022000 	.word	0x40022000

08000ba4 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ba4:	4a28      	ldr	r2, [pc, #160]	; (8000c48 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000ba6:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ba8:	68d2      	ldr	r2, [r2, #12]
 8000baa:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000bae:	f013 030c 	ands.w	r3, r3, #12
 8000bb2:	d00a      	beq.n	8000bca <HAL_RCC_GetSysClockFreq+0x26>
 8000bb4:	2b0c      	cmp	r3, #12
 8000bb6:	d006      	beq.n	8000bc6 <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8000bb8:	2b04      	cmp	r3, #4
 8000bba:	d01f      	beq.n	8000bfc <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8000bbc:	2b08      	cmp	r3, #8
 8000bbe:	d020      	beq.n	8000c02 <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	4602      	mov	r2, r0
 8000bc4:	e010      	b.n	8000be8 <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000bc6:	2a01      	cmp	r2, #1
 8000bc8:	d1f6      	bne.n	8000bb8 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000bca:	4a1f      	ldr	r2, [pc, #124]	; (8000c48 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000bcc:	6812      	ldr	r2, [r2, #0]
 8000bce:	f012 0f08 	tst.w	r2, #8
 8000bd2:	d10c      	bne.n	8000bee <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000bd4:	4a1c      	ldr	r2, [pc, #112]	; (8000c48 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000bd6:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8000bda:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8000bde:	491b      	ldr	r1, [pc, #108]	; (8000c4c <HAL_RCC_GetSysClockFreq+0xa8>)
 8000be0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000be4:	b143      	cbz	r3, 8000bf8 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000be6:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8000be8:	2b0c      	cmp	r3, #12
 8000bea:	d00d      	beq.n	8000c08 <HAL_RCC_GetSysClockFreq+0x64>
}
 8000bec:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000bee:	4a16      	ldr	r2, [pc, #88]	; (8000c48 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000bf0:	6812      	ldr	r2, [r2, #0]
 8000bf2:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8000bf6:	e7f2      	b.n	8000bde <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	e7f5      	b.n	8000be8 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 8000bfc:	4814      	ldr	r0, [pc, #80]	; (8000c50 <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000bfe:	2200      	movs	r2, #0
 8000c00:	e7f2      	b.n	8000be8 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 8000c02:	4814      	ldr	r0, [pc, #80]	; (8000c54 <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000c04:	2200      	movs	r2, #0
 8000c06:	e7ef      	b.n	8000be8 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000c08:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d015      	beq.n	8000c40 <HAL_RCC_GetSysClockFreq+0x9c>
 8000c14:	2b03      	cmp	r3, #3
 8000c16:	d015      	beq.n	8000c44 <HAL_RCC_GetSysClockFreq+0xa0>
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000c18:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000c1a:	68d8      	ldr	r0, [r3, #12]
 8000c1c:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8000c20:	3001      	adds	r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000c22:	68d9      	ldr	r1, [r3, #12]
 8000c24:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8000c28:	fb02 f201 	mul.w	r2, r2, r1
 8000c2c:	fbb2 f2f0 	udiv	r2, r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000c30:	68d8      	ldr	r0, [r3, #12]
 8000c32:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8000c36:	3001      	adds	r0, #1
 8000c38:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 8000c3a:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 8000c3e:	e7d5      	b.n	8000bec <HAL_RCC_GetSysClockFreq+0x48>
      pllvco = HSI_VALUE;
 8000c40:	4a03      	ldr	r2, [pc, #12]	; (8000c50 <HAL_RCC_GetSysClockFreq+0xac>)
 8000c42:	e7e9      	b.n	8000c18 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = HSE_VALUE;
 8000c44:	4a03      	ldr	r2, [pc, #12]	; (8000c54 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000c46:	e7e7      	b.n	8000c18 <HAL_RCC_GetSysClockFreq+0x74>
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	08001e50 	.word	0x08001e50
 8000c50:	00f42400 	.word	0x00f42400
 8000c54:	007a1200 	.word	0x007a1200

08000c58 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8000c58:	2800      	cmp	r0, #0
 8000c5a:	f000 8327 	beq.w	80012ac <HAL_RCC_OscConfig+0x654>
{
 8000c5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c60:	b083      	sub	sp, #12
 8000c62:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c64:	4baf      	ldr	r3, [pc, #700]	; (8000f24 <HAL_RCC_OscConfig+0x2cc>)
 8000c66:	689d      	ldr	r5, [r3, #8]
 8000c68:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c6c:	68de      	ldr	r6, [r3, #12]
 8000c6e:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c72:	6803      	ldr	r3, [r0, #0]
 8000c74:	f013 0f10 	tst.w	r3, #16
 8000c78:	d05b      	beq.n	8000d32 <HAL_RCC_OscConfig+0xda>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000c7a:	b1e5      	cbz	r5, 8000cb6 <HAL_RCC_OscConfig+0x5e>
 8000c7c:	2d0c      	cmp	r5, #12
 8000c7e:	d018      	beq.n	8000cb2 <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000c80:	69a3      	ldr	r3, [r4, #24]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f000 80bc 	beq.w	8000e00 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_MSI_ENABLE();
 8000c88:	4aa6      	ldr	r2, [pc, #664]	; (8000f24 <HAL_RCC_OscConfig+0x2cc>)
 8000c8a:	6813      	ldr	r3, [r2, #0]
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000c92:	f7ff fdbf 	bl	8000814 <HAL_GetTick>
 8000c96:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000c98:	4ba2      	ldr	r3, [pc, #648]	; (8000f24 <HAL_RCC_OscConfig+0x2cc>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f013 0f02 	tst.w	r3, #2
 8000ca0:	f040 809b 	bne.w	8000dda <HAL_RCC_OscConfig+0x182>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ca4:	f7ff fdb6 	bl	8000814 <HAL_GetTick>
 8000ca8:	1bc0      	subs	r0, r0, r7
 8000caa:	2802      	cmp	r0, #2
 8000cac:	d9f4      	bls.n	8000c98 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	e308      	b.n	80012c4 <HAL_RCC_OscConfig+0x66c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000cb2:	2e01      	cmp	r6, #1
 8000cb4:	d1e4      	bne.n	8000c80 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000cb6:	4b9b      	ldr	r3, [pc, #620]	; (8000f24 <HAL_RCC_OscConfig+0x2cc>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f013 0f02 	tst.w	r3, #2
 8000cbe:	d003      	beq.n	8000cc8 <HAL_RCC_OscConfig+0x70>
 8000cc0:	69a3      	ldr	r3, [r4, #24]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f000 82f5 	beq.w	80012b2 <HAL_RCC_OscConfig+0x65a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000cc8:	6a20      	ldr	r0, [r4, #32]
 8000cca:	4b96      	ldr	r3, [pc, #600]	; (8000f24 <HAL_RCC_OscConfig+0x2cc>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f013 0f08 	tst.w	r3, #8
 8000cd2:	d05c      	beq.n	8000d8e <HAL_RCC_OscConfig+0x136>
 8000cd4:	4b93      	ldr	r3, [pc, #588]	; (8000f24 <HAL_RCC_OscConfig+0x2cc>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cdc:	4298      	cmp	r0, r3
 8000cde:	d85d      	bhi.n	8000d9c <HAL_RCC_OscConfig+0x144>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ce0:	4b90      	ldr	r3, [pc, #576]	; (8000f24 <HAL_RCC_OscConfig+0x2cc>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	f042 0208 	orr.w	r2, r2, #8
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000cf0:	6a21      	ldr	r1, [r4, #32]
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000cf6:	685a      	ldr	r2, [r3, #4]
 8000cf8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000cfc:	69e1      	ldr	r1, [r4, #28]
 8000cfe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000d02:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d04:	2d00      	cmp	r5, #0
 8000d06:	d061      	beq.n	8000dcc <HAL_RCC_OscConfig+0x174>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000d08:	f7ff ff4c 	bl	8000ba4 <HAL_RCC_GetSysClockFreq>
 8000d0c:	4b85      	ldr	r3, [pc, #532]	; (8000f24 <HAL_RCC_OscConfig+0x2cc>)
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000d14:	4a84      	ldr	r2, [pc, #528]	; (8000f28 <HAL_RCC_OscConfig+0x2d0>)
 8000d16:	5cd3      	ldrb	r3, [r2, r3]
 8000d18:	f003 031f 	and.w	r3, r3, #31
 8000d1c:	40d8      	lsrs	r0, r3
 8000d1e:	4b83      	ldr	r3, [pc, #524]	; (8000f2c <HAL_RCC_OscConfig+0x2d4>)
 8000d20:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8000d22:	4b83      	ldr	r3, [pc, #524]	; (8000f30 <HAL_RCC_OscConfig+0x2d8>)
 8000d24:	6818      	ldr	r0, [r3, #0]
 8000d26:	f7ff fd33 	bl	8000790 <HAL_InitTick>
        if(status != HAL_OK)
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2800      	cmp	r0, #0
 8000d2e:	f040 82c9 	bne.w	80012c4 <HAL_RCC_OscConfig+0x66c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d32:	6823      	ldr	r3, [r4, #0]
 8000d34:	f013 0f01 	tst.w	r3, #1
 8000d38:	f000 8081 	beq.w	8000e3e <HAL_RCC_OscConfig+0x1e6>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000d3c:	2d08      	cmp	r5, #8
 8000d3e:	d075      	beq.n	8000e2c <HAL_RCC_OscConfig+0x1d4>
 8000d40:	2d0c      	cmp	r5, #12
 8000d42:	d071      	beq.n	8000e28 <HAL_RCC_OscConfig+0x1d0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d44:	6863      	ldr	r3, [r4, #4]
 8000d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d4a:	f000 8097 	beq.w	8000e7c <HAL_RCC_OscConfig+0x224>
 8000d4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d52:	f000 8099 	beq.w	8000e88 <HAL_RCC_OscConfig+0x230>
 8000d56:	4b73      	ldr	r3, [pc, #460]	; (8000f24 <HAL_RCC_OscConfig+0x2cc>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d66:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d68:	6863      	ldr	r3, [r4, #4]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f000 8099 	beq.w	8000ea2 <HAL_RCC_OscConfig+0x24a>
        tickstart = HAL_GetTick();
 8000d70:	f7ff fd50 	bl	8000814 <HAL_GetTick>
 8000d74:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d76:	4b6b      	ldr	r3, [pc, #428]	; (8000f24 <HAL_RCC_OscConfig+0x2cc>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000d7e:	d15e      	bne.n	8000e3e <HAL_RCC_OscConfig+0x1e6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d80:	f7ff fd48 	bl	8000814 <HAL_GetTick>
 8000d84:	1bc0      	subs	r0, r0, r7
 8000d86:	2864      	cmp	r0, #100	; 0x64
 8000d88:	d9f5      	bls.n	8000d76 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e29a      	b.n	80012c4 <HAL_RCC_OscConfig+0x66c>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d8e:	4b65      	ldr	r3, [pc, #404]	; (8000f24 <HAL_RCC_OscConfig+0x2cc>)
 8000d90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d94:	091b      	lsrs	r3, r3, #4
 8000d96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d9a:	e79f      	b.n	8000cdc <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d9c:	f7ff feba 	bl	8000b14 <RCC_SetFlashLatencyFromMSIRange>
 8000da0:	2800      	cmp	r0, #0
 8000da2:	f040 8288 	bne.w	80012b6 <HAL_RCC_OscConfig+0x65e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000da6:	4b5f      	ldr	r3, [pc, #380]	; (8000f24 <HAL_RCC_OscConfig+0x2cc>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	f042 0208 	orr.w	r2, r2, #8
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000db6:	6a21      	ldr	r1, [r4, #32]
 8000db8:	430a      	orrs	r2, r1
 8000dba:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dbc:	685a      	ldr	r2, [r3, #4]
 8000dbe:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000dc2:	69e1      	ldr	r1, [r4, #28]
 8000dc4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	e79d      	b.n	8000d08 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000dcc:	6a20      	ldr	r0, [r4, #32]
 8000dce:	f7ff fea1 	bl	8000b14 <RCC_SetFlashLatencyFromMSIRange>
 8000dd2:	2800      	cmp	r0, #0
 8000dd4:	d098      	beq.n	8000d08 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e274      	b.n	80012c4 <HAL_RCC_OscConfig+0x66c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dda:	4b52      	ldr	r3, [pc, #328]	; (8000f24 <HAL_RCC_OscConfig+0x2cc>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	f042 0208 	orr.w	r2, r2, #8
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000dea:	6a21      	ldr	r1, [r4, #32]
 8000dec:	430a      	orrs	r2, r1
 8000dee:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000df6:	69e1      	ldr	r1, [r4, #28]
 8000df8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	e798      	b.n	8000d32 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_MSI_DISABLE();
 8000e00:	4a48      	ldr	r2, [pc, #288]	; (8000f24 <HAL_RCC_OscConfig+0x2cc>)
 8000e02:	6813      	ldr	r3, [r2, #0]
 8000e04:	f023 0301 	bic.w	r3, r3, #1
 8000e08:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000e0a:	f7ff fd03 	bl	8000814 <HAL_GetTick>
 8000e0e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e10:	4b44      	ldr	r3, [pc, #272]	; (8000f24 <HAL_RCC_OscConfig+0x2cc>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f013 0f02 	tst.w	r3, #2
 8000e18:	d08b      	beq.n	8000d32 <HAL_RCC_OscConfig+0xda>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e1a:	f7ff fcfb 	bl	8000814 <HAL_GetTick>
 8000e1e:	1bc0      	subs	r0, r0, r7
 8000e20:	2802      	cmp	r0, #2
 8000e22:	d9f5      	bls.n	8000e10 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 8000e24:	2303      	movs	r3, #3
 8000e26:	e24d      	b.n	80012c4 <HAL_RCC_OscConfig+0x66c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e28:	2e03      	cmp	r6, #3
 8000e2a:	d18b      	bne.n	8000d44 <HAL_RCC_OscConfig+0xec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e2c:	4b3d      	ldr	r3, [pc, #244]	; (8000f24 <HAL_RCC_OscConfig+0x2cc>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e34:	d003      	beq.n	8000e3e <HAL_RCC_OscConfig+0x1e6>
 8000e36:	6863      	ldr	r3, [r4, #4]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	f000 823e 	beq.w	80012ba <HAL_RCC_OscConfig+0x662>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e3e:	6823      	ldr	r3, [r4, #0]
 8000e40:	f013 0f02 	tst.w	r3, #2
 8000e44:	d04f      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x28e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000e46:	2d04      	cmp	r5, #4
 8000e48:	d03c      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x26c>
 8000e4a:	2d0c      	cmp	r5, #12
 8000e4c:	d038      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x268>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e4e:	68e3      	ldr	r3, [r4, #12]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d078      	beq.n	8000f46 <HAL_RCC_OscConfig+0x2ee>
        __HAL_RCC_HSI_ENABLE();
 8000e54:	4a33      	ldr	r2, [pc, #204]	; (8000f24 <HAL_RCC_OscConfig+0x2cc>)
 8000e56:	6813      	ldr	r3, [r2, #0]
 8000e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e5c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000e5e:	f7ff fcd9 	bl	8000814 <HAL_GetTick>
 8000e62:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e64:	4b2f      	ldr	r3, [pc, #188]	; (8000f24 <HAL_RCC_OscConfig+0x2cc>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000e6c:	d162      	bne.n	8000f34 <HAL_RCC_OscConfig+0x2dc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e6e:	f7ff fcd1 	bl	8000814 <HAL_GetTick>
 8000e72:	1b80      	subs	r0, r0, r6
 8000e74:	2802      	cmp	r0, #2
 8000e76:	d9f5      	bls.n	8000e64 <HAL_RCC_OscConfig+0x20c>
            return HAL_TIMEOUT;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	e223      	b.n	80012c4 <HAL_RCC_OscConfig+0x66c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e7c:	4a29      	ldr	r2, [pc, #164]	; (8000f24 <HAL_RCC_OscConfig+0x2cc>)
 8000e7e:	6813      	ldr	r3, [r2, #0]
 8000e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e84:	6013      	str	r3, [r2, #0]
 8000e86:	e76f      	b.n	8000d68 <HAL_RCC_OscConfig+0x110>
 8000e88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e8c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	e762      	b.n	8000d68 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8000ea2:	f7ff fcb7 	bl	8000814 <HAL_GetTick>
 8000ea6:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ea8:	4b1e      	ldr	r3, [pc, #120]	; (8000f24 <HAL_RCC_OscConfig+0x2cc>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000eb0:	d0c5      	beq.n	8000e3e <HAL_RCC_OscConfig+0x1e6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000eb2:	f7ff fcaf 	bl	8000814 <HAL_GetTick>
 8000eb6:	1bc0      	subs	r0, r0, r7
 8000eb8:	2864      	cmp	r0, #100	; 0x64
 8000eba:	d9f5      	bls.n	8000ea8 <HAL_RCC_OscConfig+0x250>
            return HAL_TIMEOUT;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	e201      	b.n	80012c4 <HAL_RCC_OscConfig+0x66c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000ec0:	2e02      	cmp	r6, #2
 8000ec2:	d1c4      	bne.n	8000e4e <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ec4:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <HAL_RCC_OscConfig+0x2cc>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000ecc:	d003      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x27e>
 8000ece:	68e3      	ldr	r3, [r4, #12]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	f000 81f4 	beq.w	80012be <HAL_RCC_OscConfig+0x666>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ed6:	4a13      	ldr	r2, [pc, #76]	; (8000f24 <HAL_RCC_OscConfig+0x2cc>)
 8000ed8:	6853      	ldr	r3, [r2, #4]
 8000eda:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8000ede:	6921      	ldr	r1, [r4, #16]
 8000ee0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000ee4:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ee6:	6823      	ldr	r3, [r4, #0]
 8000ee8:	f013 0f08 	tst.w	r3, #8
 8000eec:	d056      	beq.n	8000f9c <HAL_RCC_OscConfig+0x344>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000eee:	6963      	ldr	r3, [r4, #20]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d03c      	beq.n	8000f6e <HAL_RCC_OscConfig+0x316>
      __HAL_RCC_LSI_ENABLE();
 8000ef4:	4a0b      	ldr	r2, [pc, #44]	; (8000f24 <HAL_RCC_OscConfig+0x2cc>)
 8000ef6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000f02:	f7ff fc87 	bl	8000814 <HAL_GetTick>
 8000f06:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_RCC_OscConfig+0x2cc>)
 8000f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f0e:	f013 0f02 	tst.w	r3, #2
 8000f12:	d143      	bne.n	8000f9c <HAL_RCC_OscConfig+0x344>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f14:	f7ff fc7e 	bl	8000814 <HAL_GetTick>
 8000f18:	1b80      	subs	r0, r0, r6
 8000f1a:	2802      	cmp	r0, #2
 8000f1c:	d9f4      	bls.n	8000f08 <HAL_RCC_OscConfig+0x2b0>
          return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e1d0      	b.n	80012c4 <HAL_RCC_OscConfig+0x66c>
 8000f22:	bf00      	nop
 8000f24:	40021000 	.word	0x40021000
 8000f28:	08001e80 	.word	0x08001e80
 8000f2c:	20000000 	.word	0x20000000
 8000f30:	20000008 	.word	0x20000008
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f34:	4ab0      	ldr	r2, [pc, #704]	; (80011f8 <HAL_RCC_OscConfig+0x5a0>)
 8000f36:	6853      	ldr	r3, [r2, #4]
 8000f38:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8000f3c:	6921      	ldr	r1, [r4, #16]
 8000f3e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000f42:	6053      	str	r3, [r2, #4]
 8000f44:	e7cf      	b.n	8000ee6 <HAL_RCC_OscConfig+0x28e>
        __HAL_RCC_HSI_DISABLE();
 8000f46:	4aac      	ldr	r2, [pc, #688]	; (80011f8 <HAL_RCC_OscConfig+0x5a0>)
 8000f48:	6813      	ldr	r3, [r2, #0]
 8000f4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f4e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000f50:	f7ff fc60 	bl	8000814 <HAL_GetTick>
 8000f54:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f56:	4ba8      	ldr	r3, [pc, #672]	; (80011f8 <HAL_RCC_OscConfig+0x5a0>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000f5e:	d0c2      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x28e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f60:	f7ff fc58 	bl	8000814 <HAL_GetTick>
 8000f64:	1b80      	subs	r0, r0, r6
 8000f66:	2802      	cmp	r0, #2
 8000f68:	d9f5      	bls.n	8000f56 <HAL_RCC_OscConfig+0x2fe>
            return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e1aa      	b.n	80012c4 <HAL_RCC_OscConfig+0x66c>
      __HAL_RCC_LSI_DISABLE();
 8000f6e:	4aa2      	ldr	r2, [pc, #648]	; (80011f8 <HAL_RCC_OscConfig+0x5a0>)
 8000f70:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8000f74:	f023 0301 	bic.w	r3, r3, #1
 8000f78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000f7c:	f7ff fc4a 	bl	8000814 <HAL_GetTick>
 8000f80:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f82:	4b9d      	ldr	r3, [pc, #628]	; (80011f8 <HAL_RCC_OscConfig+0x5a0>)
 8000f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f88:	f013 0f02 	tst.w	r3, #2
 8000f8c:	d006      	beq.n	8000f9c <HAL_RCC_OscConfig+0x344>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f8e:	f7ff fc41 	bl	8000814 <HAL_GetTick>
 8000f92:	1b80      	subs	r0, r0, r6
 8000f94:	2802      	cmp	r0, #2
 8000f96:	d9f4      	bls.n	8000f82 <HAL_RCC_OscConfig+0x32a>
          return HAL_TIMEOUT;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e193      	b.n	80012c4 <HAL_RCC_OscConfig+0x66c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f9c:	6823      	ldr	r3, [r4, #0]
 8000f9e:	f013 0f04 	tst.w	r3, #4
 8000fa2:	d07a      	beq.n	800109a <HAL_RCC_OscConfig+0x442>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000fa4:	4b94      	ldr	r3, [pc, #592]	; (80011f8 <HAL_RCC_OscConfig+0x5a0>)
 8000fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000fac:	d10b      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x36e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fae:	4b92      	ldr	r3, [pc, #584]	; (80011f8 <HAL_RCC_OscConfig+0x5a0>)
 8000fb0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000fb2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000fb6:	659a      	str	r2, [r3, #88]	; 0x58
 8000fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fbe:	9301      	str	r3, [sp, #4]
 8000fc0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000fc2:	2601      	movs	r6, #1
 8000fc4:	e000      	b.n	8000fc8 <HAL_RCC_OscConfig+0x370>
    FlagStatus       pwrclkchanged = RESET;
 8000fc6:	2600      	movs	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fc8:	4b8c      	ldr	r3, [pc, #560]	; (80011fc <HAL_RCC_OscConfig+0x5a4>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000fd0:	d026      	beq.n	8001020 <HAL_RCC_OscConfig+0x3c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fd2:	68a3      	ldr	r3, [r4, #8]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d037      	beq.n	8001048 <HAL_RCC_OscConfig+0x3f0>
 8000fd8:	2b05      	cmp	r3, #5
 8000fda:	d03d      	beq.n	8001058 <HAL_RCC_OscConfig+0x400>
 8000fdc:	4b86      	ldr	r3, [pc, #536]	; (80011f8 <HAL_RCC_OscConfig+0x5a0>)
 8000fde:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000fe2:	f022 0201 	bic.w	r2, r2, #1
 8000fe6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8000fea:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000fee:	f022 0204 	bic.w	r2, r2, #4
 8000ff2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ff6:	68a3      	ldr	r3, [r4, #8]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d03b      	beq.n	8001074 <HAL_RCC_OscConfig+0x41c>
      tickstart = HAL_GetTick();
 8000ffc:	f7ff fc0a 	bl	8000814 <HAL_GetTick>
 8001000:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001002:	4b7d      	ldr	r3, [pc, #500]	; (80011f8 <HAL_RCC_OscConfig+0x5a0>)
 8001004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001008:	f013 0f02 	tst.w	r3, #2
 800100c:	d144      	bne.n	8001098 <HAL_RCC_OscConfig+0x440>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800100e:	f7ff fc01 	bl	8000814 <HAL_GetTick>
 8001012:	1bc0      	subs	r0, r0, r7
 8001014:	f241 3388 	movw	r3, #5000	; 0x1388
 8001018:	4298      	cmp	r0, r3
 800101a:	d9f2      	bls.n	8001002 <HAL_RCC_OscConfig+0x3aa>
          return HAL_TIMEOUT;
 800101c:	2303      	movs	r3, #3
 800101e:	e151      	b.n	80012c4 <HAL_RCC_OscConfig+0x66c>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001020:	4a76      	ldr	r2, [pc, #472]	; (80011fc <HAL_RCC_OscConfig+0x5a4>)
 8001022:	6813      	ldr	r3, [r2, #0]
 8001024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001028:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800102a:	f7ff fbf3 	bl	8000814 <HAL_GetTick>
 800102e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001030:	4b72      	ldr	r3, [pc, #456]	; (80011fc <HAL_RCC_OscConfig+0x5a4>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001038:	d1cb      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x37a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800103a:	f7ff fbeb 	bl	8000814 <HAL_GetTick>
 800103e:	1bc0      	subs	r0, r0, r7
 8001040:	2802      	cmp	r0, #2
 8001042:	d9f5      	bls.n	8001030 <HAL_RCC_OscConfig+0x3d8>
          return HAL_TIMEOUT;
 8001044:	2303      	movs	r3, #3
 8001046:	e13d      	b.n	80012c4 <HAL_RCC_OscConfig+0x66c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001048:	4a6b      	ldr	r2, [pc, #428]	; (80011f8 <HAL_RCC_OscConfig+0x5a0>)
 800104a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001056:	e7ce      	b.n	8000ff6 <HAL_RCC_OscConfig+0x39e>
 8001058:	4b67      	ldr	r3, [pc, #412]	; (80011f8 <HAL_RCC_OscConfig+0x5a0>)
 800105a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800105e:	f042 0204 	orr.w	r2, r2, #4
 8001062:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001066:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800106a:	f042 0201 	orr.w	r2, r2, #1
 800106e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001072:	e7c0      	b.n	8000ff6 <HAL_RCC_OscConfig+0x39e>
      tickstart = HAL_GetTick();
 8001074:	f7ff fbce 	bl	8000814 <HAL_GetTick>
 8001078:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800107a:	4b5f      	ldr	r3, [pc, #380]	; (80011f8 <HAL_RCC_OscConfig+0x5a0>)
 800107c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001080:	f013 0f02 	tst.w	r3, #2
 8001084:	d008      	beq.n	8001098 <HAL_RCC_OscConfig+0x440>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001086:	f7ff fbc5 	bl	8000814 <HAL_GetTick>
 800108a:	1bc0      	subs	r0, r0, r7
 800108c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001090:	4298      	cmp	r0, r3
 8001092:	d9f2      	bls.n	800107a <HAL_RCC_OscConfig+0x422>
          return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e115      	b.n	80012c4 <HAL_RCC_OscConfig+0x66c>
    if(pwrclkchanged == SET)
 8001098:	b9e6      	cbnz	r6, 80010d4 <HAL_RCC_OscConfig+0x47c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800109a:	6823      	ldr	r3, [r4, #0]
 800109c:	f013 0f20 	tst.w	r3, #32
 80010a0:	d035      	beq.n	800110e <HAL_RCC_OscConfig+0x4b6>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80010a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80010a4:	b1e3      	cbz	r3, 80010e0 <HAL_RCC_OscConfig+0x488>
      __HAL_RCC_HSI48_ENABLE();
 80010a6:	4a54      	ldr	r2, [pc, #336]	; (80011f8 <HAL_RCC_OscConfig+0x5a0>)
 80010a8:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 80010b4:	f7ff fbae 	bl	8000814 <HAL_GetTick>
 80010b8:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80010ba:	4b4f      	ldr	r3, [pc, #316]	; (80011f8 <HAL_RCC_OscConfig+0x5a0>)
 80010bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80010c0:	f013 0f02 	tst.w	r3, #2
 80010c4:	d123      	bne.n	800110e <HAL_RCC_OscConfig+0x4b6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80010c6:	f7ff fba5 	bl	8000814 <HAL_GetTick>
 80010ca:	1b80      	subs	r0, r0, r6
 80010cc:	2802      	cmp	r0, #2
 80010ce:	d9f4      	bls.n	80010ba <HAL_RCC_OscConfig+0x462>
          return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e0f7      	b.n	80012c4 <HAL_RCC_OscConfig+0x66c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010d4:	4a48      	ldr	r2, [pc, #288]	; (80011f8 <HAL_RCC_OscConfig+0x5a0>)
 80010d6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80010d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010dc:	6593      	str	r3, [r2, #88]	; 0x58
 80010de:	e7dc      	b.n	800109a <HAL_RCC_OscConfig+0x442>
      __HAL_RCC_HSI48_DISABLE();
 80010e0:	4a45      	ldr	r2, [pc, #276]	; (80011f8 <HAL_RCC_OscConfig+0x5a0>)
 80010e2:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 80010e6:	f023 0301 	bic.w	r3, r3, #1
 80010ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 80010ee:	f7ff fb91 	bl	8000814 <HAL_GetTick>
 80010f2:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80010f4:	4b40      	ldr	r3, [pc, #256]	; (80011f8 <HAL_RCC_OscConfig+0x5a0>)
 80010f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80010fa:	f013 0f02 	tst.w	r3, #2
 80010fe:	d006      	beq.n	800110e <HAL_RCC_OscConfig+0x4b6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001100:	f7ff fb88 	bl	8000814 <HAL_GetTick>
 8001104:	1b80      	subs	r0, r0, r6
 8001106:	2802      	cmp	r0, #2
 8001108:	d9f4      	bls.n	80010f4 <HAL_RCC_OscConfig+0x49c>
          return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e0da      	b.n	80012c4 <HAL_RCC_OscConfig+0x66c>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800110e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001110:	2b00      	cmp	r3, #0
 8001112:	f000 80d6 	beq.w	80012c2 <HAL_RCC_OscConfig+0x66a>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001116:	2b02      	cmp	r3, #2
 8001118:	d027      	beq.n	800116a <HAL_RCC_OscConfig+0x512>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800111a:	2d0c      	cmp	r5, #12
 800111c:	f000 80db 	beq.w	80012d6 <HAL_RCC_OscConfig+0x67e>
        __HAL_RCC_PLL_DISABLE();
 8001120:	4b35      	ldr	r3, [pc, #212]	; (80011f8 <HAL_RCC_OscConfig+0x5a0>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001128:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001130:	d104      	bne.n	800113c <HAL_RCC_OscConfig+0x4e4>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001132:	4a31      	ldr	r2, [pc, #196]	; (80011f8 <HAL_RCC_OscConfig+0x5a0>)
 8001134:	68d3      	ldr	r3, [r2, #12]
 8001136:	f023 0303 	bic.w	r3, r3, #3
 800113a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800113c:	4a2e      	ldr	r2, [pc, #184]	; (80011f8 <HAL_RCC_OscConfig+0x5a0>)
 800113e:	68d3      	ldr	r3, [r2, #12]
 8001140:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001148:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 800114a:	f7ff fb63 	bl	8000814 <HAL_GetTick>
 800114e:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001150:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <HAL_RCC_OscConfig+0x5a0>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001158:	f000 80a6 	beq.w	80012a8 <HAL_RCC_OscConfig+0x650>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800115c:	f7ff fb5a 	bl	8000814 <HAL_GetTick>
 8001160:	1b00      	subs	r0, r0, r4
 8001162:	2802      	cmp	r0, #2
 8001164:	d9f4      	bls.n	8001150 <HAL_RCC_OscConfig+0x4f8>
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e0ac      	b.n	80012c4 <HAL_RCC_OscConfig+0x66c>
      pll_config = RCC->PLLCFGR;
 800116a:	4b23      	ldr	r3, [pc, #140]	; (80011f8 <HAL_RCC_OscConfig+0x5a0>)
 800116c:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800116e:	f003 0103 	and.w	r1, r3, #3
 8001172:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001174:	4291      	cmp	r1, r2
 8001176:	d009      	beq.n	800118c <HAL_RCC_OscConfig+0x534>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001178:	2d0c      	cmp	r5, #12
 800117a:	f000 80a6 	beq.w	80012ca <HAL_RCC_OscConfig+0x672>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800117e:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <HAL_RCC_OscConfig+0x5a0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8001186:	d03b      	beq.n	8001200 <HAL_RCC_OscConfig+0x5a8>
            return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e09b      	b.n	80012c4 <HAL_RCC_OscConfig+0x66c>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800118c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001190:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001192:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001194:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8001198:	d1ee      	bne.n	8001178 <HAL_RCC_OscConfig+0x520>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800119a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800119e:	6b61      	ldr	r1, [r4, #52]	; 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80011a0:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80011a4:	d1e8      	bne.n	8001178 <HAL_RCC_OscConfig+0x520>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80011a6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80011aa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80011ac:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80011b0:	d1e2      	bne.n	8001178 <HAL_RCC_OscConfig+0x520>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80011b2:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80011b6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80011b8:	0852      	lsrs	r2, r2, #1
 80011ba:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80011bc:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80011c0:	d1da      	bne.n	8001178 <HAL_RCC_OscConfig+0x520>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80011c2:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80011c6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80011c8:	0852      	lsrs	r2, r2, #1
 80011ca:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80011cc:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80011d0:	d1d2      	bne.n	8001178 <HAL_RCC_OscConfig+0x520>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <HAL_RCC_OscConfig+0x5a0>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80011da:	d178      	bne.n	80012ce <HAL_RCC_OscConfig+0x676>
          __HAL_RCC_PLL_ENABLE();
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_RCC_OscConfig+0x5a0>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80011e4:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80011e6:	68da      	ldr	r2, [r3, #12]
 80011e8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80011ec:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 80011ee:	f7ff fb11 	bl	8000814 <HAL_GetTick>
 80011f2:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011f4:	e051      	b.n	800129a <HAL_RCC_OscConfig+0x642>
 80011f6:	bf00      	nop
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40007000 	.word	0x40007000
            __HAL_RCC_PLL_DISABLE();
 8001200:	4a36      	ldr	r2, [pc, #216]	; (80012dc <HAL_RCC_OscConfig+0x684>)
 8001202:	6813      	ldr	r3, [r2, #0]
 8001204:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001208:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 800120a:	f7ff fb03 	bl	8000814 <HAL_GetTick>
 800120e:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001210:	4b32      	ldr	r3, [pc, #200]	; (80012dc <HAL_RCC_OscConfig+0x684>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001218:	d006      	beq.n	8001228 <HAL_RCC_OscConfig+0x5d0>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800121a:	f7ff fafb 	bl	8000814 <HAL_GetTick>
 800121e:	1b40      	subs	r0, r0, r5
 8001220:	2802      	cmp	r0, #2
 8001222:	d9f5      	bls.n	8001210 <HAL_RCC_OscConfig+0x5b8>
                return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e04d      	b.n	80012c4 <HAL_RCC_OscConfig+0x66c>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001228:	4a2c      	ldr	r2, [pc, #176]	; (80012dc <HAL_RCC_OscConfig+0x684>)
 800122a:	68d3      	ldr	r3, [r2, #12]
 800122c:	492c      	ldr	r1, [pc, #176]	; (80012e0 <HAL_RCC_OscConfig+0x688>)
 800122e:	4019      	ands	r1, r3
 8001230:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001232:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001234:	3801      	subs	r0, #1
 8001236:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800123a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800123c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001240:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001242:	0840      	lsrs	r0, r0, #1
 8001244:	3801      	subs	r0, #1
 8001246:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 800124a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800124c:	0840      	lsrs	r0, r0, #1
 800124e:	3801      	subs	r0, #1
 8001250:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001254:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001256:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 800125a:	430b      	orrs	r3, r1
 800125c:	60d3      	str	r3, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 800125e:	6813      	ldr	r3, [r2, #0]
 8001260:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001264:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001266:	68d3      	ldr	r3, [r2, #12]
 8001268:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800126c:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 800126e:	f7ff fad1 	bl	8000814 <HAL_GetTick>
 8001272:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001274:	4b19      	ldr	r3, [pc, #100]	; (80012dc <HAL_RCC_OscConfig+0x684>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800127c:	d106      	bne.n	800128c <HAL_RCC_OscConfig+0x634>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800127e:	f7ff fac9 	bl	8000814 <HAL_GetTick>
 8001282:	1b00      	subs	r0, r0, r4
 8001284:	2802      	cmp	r0, #2
 8001286:	d9f5      	bls.n	8001274 <HAL_RCC_OscConfig+0x61c>
                return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e01b      	b.n	80012c4 <HAL_RCC_OscConfig+0x66c>
  return HAL_OK;
 800128c:	2300      	movs	r3, #0
 800128e:	e019      	b.n	80012c4 <HAL_RCC_OscConfig+0x66c>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001290:	f7ff fac0 	bl	8000814 <HAL_GetTick>
 8001294:	1b00      	subs	r0, r0, r4
 8001296:	2802      	cmp	r0, #2
 8001298:	d81b      	bhi.n	80012d2 <HAL_RCC_OscConfig+0x67a>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <HAL_RCC_OscConfig+0x684>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80012a2:	d0f5      	beq.n	8001290 <HAL_RCC_OscConfig+0x638>
  return HAL_OK;
 80012a4:	2300      	movs	r3, #0
 80012a6:	e00d      	b.n	80012c4 <HAL_RCC_OscConfig+0x66c>
 80012a8:	2300      	movs	r3, #0
 80012aa:	e00b      	b.n	80012c4 <HAL_RCC_OscConfig+0x66c>
    return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	4770      	bx	lr
        return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e006      	b.n	80012c4 <HAL_RCC_OscConfig+0x66c>
            return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e004      	b.n	80012c4 <HAL_RCC_OscConfig+0x66c>
        return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e002      	b.n	80012c4 <HAL_RCC_OscConfig+0x66c>
        return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e000      	b.n	80012c4 <HAL_RCC_OscConfig+0x66c>
  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	b003      	add	sp, #12
 80012c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e7fa      	b.n	80012c4 <HAL_RCC_OscConfig+0x66c>
  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	e7f8      	b.n	80012c4 <HAL_RCC_OscConfig+0x66c>
              return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e7f6      	b.n	80012c4 <HAL_RCC_OscConfig+0x66c>
        return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e7f4      	b.n	80012c4 <HAL_RCC_OscConfig+0x66c>
 80012da:	bf00      	nop
 80012dc:	40021000 	.word	0x40021000
 80012e0:	019d808c 	.word	0x019d808c

080012e4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80012e4:	2800      	cmp	r0, #0
 80012e6:	f000 809b 	beq.w	8001420 <HAL_RCC_ClockConfig+0x13c>
{
 80012ea:	b570      	push	{r4, r5, r6, lr}
 80012ec:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012ee:	4b4e      	ldr	r3, [pc, #312]	; (8001428 <HAL_RCC_ClockConfig+0x144>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	428b      	cmp	r3, r1
 80012f8:	d20c      	bcs.n	8001314 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012fa:	4a4b      	ldr	r2, [pc, #300]	; (8001428 <HAL_RCC_ClockConfig+0x144>)
 80012fc:	6813      	ldr	r3, [r2, #0]
 80012fe:	f023 0307 	bic.w	r3, r3, #7
 8001302:	430b      	orrs	r3, r1
 8001304:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001306:	6813      	ldr	r3, [r2, #0]
 8001308:	f003 0307 	and.w	r3, r3, #7
 800130c:	428b      	cmp	r3, r1
 800130e:	d001      	beq.n	8001314 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8001310:	2001      	movs	r0, #1
}
 8001312:	bd70      	pop	{r4, r5, r6, pc}
 8001314:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001316:	6823      	ldr	r3, [r4, #0]
 8001318:	f013 0f01 	tst.w	r3, #1
 800131c:	d039      	beq.n	8001392 <HAL_RCC_ClockConfig+0xae>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800131e:	6863      	ldr	r3, [r4, #4]
 8001320:	2b03      	cmp	r3, #3
 8001322:	d009      	beq.n	8001338 <HAL_RCC_ClockConfig+0x54>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001324:	2b02      	cmp	r3, #2
 8001326:	d026      	beq.n	8001376 <HAL_RCC_ClockConfig+0x92>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001328:	bb63      	cbnz	r3, 8001384 <HAL_RCC_ClockConfig+0xa0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800132a:	4a40      	ldr	r2, [pc, #256]	; (800142c <HAL_RCC_ClockConfig+0x148>)
 800132c:	6812      	ldr	r2, [r2, #0]
 800132e:	f012 0f02 	tst.w	r2, #2
 8001332:	d106      	bne.n	8001342 <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 8001334:	2001      	movs	r0, #1
 8001336:	e7ec      	b.n	8001312 <HAL_RCC_ClockConfig+0x2e>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001338:	4a3c      	ldr	r2, [pc, #240]	; (800142c <HAL_RCC_ClockConfig+0x148>)
 800133a:	6812      	ldr	r2, [r2, #0]
 800133c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001340:	d070      	beq.n	8001424 <HAL_RCC_ClockConfig+0x140>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001342:	493a      	ldr	r1, [pc, #232]	; (800142c <HAL_RCC_ClockConfig+0x148>)
 8001344:	688a      	ldr	r2, [r1, #8]
 8001346:	f022 0203 	bic.w	r2, r2, #3
 800134a:	4313      	orrs	r3, r2
 800134c:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800134e:	f7ff fa61 	bl	8000814 <HAL_GetTick>
 8001352:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001354:	4b35      	ldr	r3, [pc, #212]	; (800142c <HAL_RCC_ClockConfig+0x148>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f003 030c 	and.w	r3, r3, #12
 800135c:	6862      	ldr	r2, [r4, #4]
 800135e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001362:	d016      	beq.n	8001392 <HAL_RCC_ClockConfig+0xae>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001364:	f7ff fa56 	bl	8000814 <HAL_GetTick>
 8001368:	1b80      	subs	r0, r0, r6
 800136a:	f241 3388 	movw	r3, #5000	; 0x1388
 800136e:	4298      	cmp	r0, r3
 8001370:	d9f0      	bls.n	8001354 <HAL_RCC_ClockConfig+0x70>
        return HAL_TIMEOUT;
 8001372:	2003      	movs	r0, #3
 8001374:	e7cd      	b.n	8001312 <HAL_RCC_ClockConfig+0x2e>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001376:	4a2d      	ldr	r2, [pc, #180]	; (800142c <HAL_RCC_ClockConfig+0x148>)
 8001378:	6812      	ldr	r2, [r2, #0]
 800137a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800137e:	d1e0      	bne.n	8001342 <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 8001380:	2001      	movs	r0, #1
 8001382:	e7c6      	b.n	8001312 <HAL_RCC_ClockConfig+0x2e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001384:	4a29      	ldr	r2, [pc, #164]	; (800142c <HAL_RCC_ClockConfig+0x148>)
 8001386:	6812      	ldr	r2, [r2, #0]
 8001388:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800138c:	d1d9      	bne.n	8001342 <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 800138e:	2001      	movs	r0, #1
 8001390:	e7bf      	b.n	8001312 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001392:	6823      	ldr	r3, [r4, #0]
 8001394:	f013 0f02 	tst.w	r3, #2
 8001398:	d006      	beq.n	80013a8 <HAL_RCC_ClockConfig+0xc4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800139a:	4a24      	ldr	r2, [pc, #144]	; (800142c <HAL_RCC_ClockConfig+0x148>)
 800139c:	6893      	ldr	r3, [r2, #8]
 800139e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013a2:	68a1      	ldr	r1, [r4, #8]
 80013a4:	430b      	orrs	r3, r1
 80013a6:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013a8:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <HAL_RCC_ClockConfig+0x144>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0307 	and.w	r3, r3, #7
 80013b0:	42ab      	cmp	r3, r5
 80013b2:	d90c      	bls.n	80013ce <HAL_RCC_ClockConfig+0xea>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013b4:	4a1c      	ldr	r2, [pc, #112]	; (8001428 <HAL_RCC_ClockConfig+0x144>)
 80013b6:	6813      	ldr	r3, [r2, #0]
 80013b8:	f023 0307 	bic.w	r3, r3, #7
 80013bc:	432b      	orrs	r3, r5
 80013be:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013c0:	6813      	ldr	r3, [r2, #0]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	42ab      	cmp	r3, r5
 80013c8:	d001      	beq.n	80013ce <HAL_RCC_ClockConfig+0xea>
      return HAL_ERROR;
 80013ca:	2001      	movs	r0, #1
 80013cc:	e7a1      	b.n	8001312 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ce:	6823      	ldr	r3, [r4, #0]
 80013d0:	f013 0f04 	tst.w	r3, #4
 80013d4:	d006      	beq.n	80013e4 <HAL_RCC_ClockConfig+0x100>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013d6:	4a15      	ldr	r2, [pc, #84]	; (800142c <HAL_RCC_ClockConfig+0x148>)
 80013d8:	6893      	ldr	r3, [r2, #8]
 80013da:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013de:	68e1      	ldr	r1, [r4, #12]
 80013e0:	430b      	orrs	r3, r1
 80013e2:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013e4:	6823      	ldr	r3, [r4, #0]
 80013e6:	f013 0f08 	tst.w	r3, #8
 80013ea:	d007      	beq.n	80013fc <HAL_RCC_ClockConfig+0x118>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013ec:	4a0f      	ldr	r2, [pc, #60]	; (800142c <HAL_RCC_ClockConfig+0x148>)
 80013ee:	6893      	ldr	r3, [r2, #8]
 80013f0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80013f4:	6921      	ldr	r1, [r4, #16]
 80013f6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80013fa:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013fc:	f7ff fbd2 	bl	8000ba4 <HAL_RCC_GetSysClockFreq>
 8001400:	4b0a      	ldr	r3, [pc, #40]	; (800142c <HAL_RCC_ClockConfig+0x148>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001408:	4a09      	ldr	r2, [pc, #36]	; (8001430 <HAL_RCC_ClockConfig+0x14c>)
 800140a:	5cd3      	ldrb	r3, [r2, r3]
 800140c:	f003 031f 	and.w	r3, r3, #31
 8001410:	40d8      	lsrs	r0, r3
 8001412:	4b08      	ldr	r3, [pc, #32]	; (8001434 <HAL_RCC_ClockConfig+0x150>)
 8001414:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8001416:	4b08      	ldr	r3, [pc, #32]	; (8001438 <HAL_RCC_ClockConfig+0x154>)
 8001418:	6818      	ldr	r0, [r3, #0]
 800141a:	f7ff f9b9 	bl	8000790 <HAL_InitTick>
  return status;
 800141e:	e778      	b.n	8001312 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001420:	2001      	movs	r0, #1
}
 8001422:	4770      	bx	lr
        return HAL_ERROR;
 8001424:	2001      	movs	r0, #1
 8001426:	e774      	b.n	8001312 <HAL_RCC_ClockConfig+0x2e>
 8001428:	40022000 	.word	0x40022000
 800142c:	40021000 	.word	0x40021000
 8001430:	08001e80 	.word	0x08001e80
 8001434:	20000000 	.word	0x20000000
 8001438:	20000008 	.word	0x20000008

0800143c <HAL_RCC_GetHCLKFreq>:
}
 800143c:	4b01      	ldr	r3, [pc, #4]	; (8001444 <HAL_RCC_GetHCLKFreq+0x8>)
 800143e:	6818      	ldr	r0, [r3, #0]
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	20000000 	.word	0x20000000

08001448 <HAL_RCC_GetPCLK1Freq>:
{
 8001448:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800144a:	f7ff fff7 	bl	800143c <HAL_RCC_GetHCLKFreq>
 800144e:	4b05      	ldr	r3, [pc, #20]	; (8001464 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001456:	4a04      	ldr	r2, [pc, #16]	; (8001468 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001458:	5cd3      	ldrb	r3, [r2, r3]
 800145a:	f003 031f 	and.w	r3, r3, #31
}
 800145e:	40d8      	lsrs	r0, r3
 8001460:	bd08      	pop	{r3, pc}
 8001462:	bf00      	nop
 8001464:	40021000 	.word	0x40021000
 8001468:	08001e90 	.word	0x08001e90

0800146c <HAL_RCC_GetPCLK2Freq>:
{
 800146c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800146e:	f7ff ffe5 	bl	800143c <HAL_RCC_GetHCLKFreq>
 8001472:	4b05      	ldr	r3, [pc, #20]	; (8001488 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800147a:	4a04      	ldr	r2, [pc, #16]	; (800148c <HAL_RCC_GetPCLK2Freq+0x20>)
 800147c:	5cd3      	ldrb	r3, [r2, r3]
 800147e:	f003 031f 	and.w	r3, r3, #31
}
 8001482:	40d8      	lsrs	r0, r3
 8001484:	bd08      	pop	{r3, pc}
 8001486:	bf00      	nop
 8001488:	40021000 	.word	0x40021000
 800148c:	08001e90 	.word	0x08001e90

08001490 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001492:	4b59      	ldr	r3, [pc, #356]	; (80015f8 <RCCEx_PLLSAI1_Config+0x168>)
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	f013 0f03 	tst.w	r3, #3
 800149a:	d018      	beq.n	80014ce <RCCEx_PLLSAI1_Config+0x3e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800149c:	4b56      	ldr	r3, [pc, #344]	; (80015f8 <RCCEx_PLLSAI1_Config+0x168>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	f003 0303 	and.w	r3, r3, #3
 80014a4:	6802      	ldr	r2, [r0, #0]
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d002      	beq.n	80014b0 <RCCEx_PLLSAI1_Config+0x20>
 80014aa:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 80014ac:	4628      	mov	r0, r5
 80014ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 80014b0:	2a00      	cmp	r2, #0
 80014b2:	f000 809f 	beq.w	80015f4 <RCCEx_PLLSAI1_Config+0x164>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80014b6:	4b50      	ldr	r3, [pc, #320]	; (80015f8 <RCCEx_PLLSAI1_Config+0x168>)
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80014be:	3301      	adds	r3, #1
 80014c0:	6842      	ldr	r2, [r0, #4]
       ||
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d001      	beq.n	80014ca <RCCEx_PLLSAI1_Config+0x3a>
 80014c6:	2501      	movs	r5, #1
 80014c8:	e7f0      	b.n	80014ac <RCCEx_PLLSAI1_Config+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 80014ca:	2500      	movs	r5, #0
 80014cc:	e01a      	b.n	8001504 <RCCEx_PLLSAI1_Config+0x74>
    switch(PllSai1->PLLSAI1Source)
 80014ce:	6803      	ldr	r3, [r0, #0]
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d058      	beq.n	8001586 <RCCEx_PLLSAI1_Config+0xf6>
 80014d4:	2b03      	cmp	r3, #3
 80014d6:	d05d      	beq.n	8001594 <RCCEx_PLLSAI1_Config+0x104>
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d001      	beq.n	80014e0 <RCCEx_PLLSAI1_Config+0x50>
      status = HAL_ERROR;
 80014dc:	2501      	movs	r5, #1
 80014de:	e00f      	b.n	8001500 <RCCEx_PLLSAI1_Config+0x70>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80014e0:	4a45      	ldr	r2, [pc, #276]	; (80015f8 <RCCEx_PLLSAI1_Config+0x168>)
 80014e2:	6812      	ldr	r2, [r2, #0]
 80014e4:	f012 0f02 	tst.w	r2, #2
 80014e8:	d060      	beq.n	80015ac <RCCEx_PLLSAI1_Config+0x11c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80014ea:	4d43      	ldr	r5, [pc, #268]	; (80015f8 <RCCEx_PLLSAI1_Config+0x168>)
 80014ec:	68ea      	ldr	r2, [r5, #12]
 80014ee:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80014f2:	6844      	ldr	r4, [r0, #4]
 80014f4:	3c01      	subs	r4, #1
 80014f6:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80014fa:	4313      	orrs	r3, r2
 80014fc:	60eb      	str	r3, [r5, #12]
 80014fe:	2500      	movs	r5, #0
  if(status == HAL_OK)
 8001500:	2d00      	cmp	r5, #0
 8001502:	d1d3      	bne.n	80014ac <RCCEx_PLLSAI1_Config+0x1c>
 8001504:	460f      	mov	r7, r1
 8001506:	4604      	mov	r4, r0
    __HAL_RCC_PLLSAI1_DISABLE();
 8001508:	4a3b      	ldr	r2, [pc, #236]	; (80015f8 <RCCEx_PLLSAI1_Config+0x168>)
 800150a:	6813      	ldr	r3, [r2, #0]
 800150c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001510:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001512:	f7ff f97f 	bl	8000814 <HAL_GetTick>
 8001516:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001518:	4b37      	ldr	r3, [pc, #220]	; (80015f8 <RCCEx_PLLSAI1_Config+0x168>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001520:	d005      	beq.n	800152e <RCCEx_PLLSAI1_Config+0x9e>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001522:	f7ff f977 	bl	8000814 <HAL_GetTick>
 8001526:	1b80      	subs	r0, r0, r6
 8001528:	2802      	cmp	r0, #2
 800152a:	d9f5      	bls.n	8001518 <RCCEx_PLLSAI1_Config+0x88>
        status = HAL_TIMEOUT;
 800152c:	2503      	movs	r5, #3
    if(status == HAL_OK)
 800152e:	2d00      	cmp	r5, #0
 8001530:	d1bc      	bne.n	80014ac <RCCEx_PLLSAI1_Config+0x1c>
      if(Divider == DIVIDER_P_UPDATE)
 8001532:	2f00      	cmp	r7, #0
 8001534:	d13c      	bne.n	80015b0 <RCCEx_PLLSAI1_Config+0x120>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001536:	4930      	ldr	r1, [pc, #192]	; (80015f8 <RCCEx_PLLSAI1_Config+0x168>)
 8001538:	690b      	ldr	r3, [r1, #16]
 800153a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800153e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001542:	68a0      	ldr	r0, [r4, #8]
 8001544:	68e2      	ldr	r2, [r4, #12]
 8001546:	06d2      	lsls	r2, r2, #27
 8001548:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800154c:	4313      	orrs	r3, r2
 800154e:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8001550:	4a29      	ldr	r2, [pc, #164]	; (80015f8 <RCCEx_PLLSAI1_Config+0x168>)
 8001552:	6813      	ldr	r3, [r2, #0]
 8001554:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001558:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800155a:	f7ff f95b 	bl	8000814 <HAL_GetTick>
 800155e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001560:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <RCCEx_PLLSAI1_Config+0x168>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001568:	d105      	bne.n	8001576 <RCCEx_PLLSAI1_Config+0xe6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800156a:	f7ff f953 	bl	8000814 <HAL_GetTick>
 800156e:	1b80      	subs	r0, r0, r6
 8001570:	2802      	cmp	r0, #2
 8001572:	d9f5      	bls.n	8001560 <RCCEx_PLLSAI1_Config+0xd0>
          status = HAL_TIMEOUT;
 8001574:	2503      	movs	r5, #3
      if(status == HAL_OK)
 8001576:	2d00      	cmp	r5, #0
 8001578:	d198      	bne.n	80014ac <RCCEx_PLLSAI1_Config+0x1c>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800157a:	4a1f      	ldr	r2, [pc, #124]	; (80015f8 <RCCEx_PLLSAI1_Config+0x168>)
 800157c:	6913      	ldr	r3, [r2, #16]
 800157e:	69a1      	ldr	r1, [r4, #24]
 8001580:	430b      	orrs	r3, r1
 8001582:	6113      	str	r3, [r2, #16]
 8001584:	e792      	b.n	80014ac <RCCEx_PLLSAI1_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001586:	4a1c      	ldr	r2, [pc, #112]	; (80015f8 <RCCEx_PLLSAI1_Config+0x168>)
 8001588:	6812      	ldr	r2, [r2, #0]
 800158a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800158e:	d1ac      	bne.n	80014ea <RCCEx_PLLSAI1_Config+0x5a>
        status = HAL_ERROR;
 8001590:	2501      	movs	r5, #1
 8001592:	e7b5      	b.n	8001500 <RCCEx_PLLSAI1_Config+0x70>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001594:	4a18      	ldr	r2, [pc, #96]	; (80015f8 <RCCEx_PLLSAI1_Config+0x168>)
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800159c:	d1a5      	bne.n	80014ea <RCCEx_PLLSAI1_Config+0x5a>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800159e:	4a16      	ldr	r2, [pc, #88]	; (80015f8 <RCCEx_PLLSAI1_Config+0x168>)
 80015a0:	6812      	ldr	r2, [r2, #0]
 80015a2:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80015a6:	d1a0      	bne.n	80014ea <RCCEx_PLLSAI1_Config+0x5a>
          status = HAL_ERROR;
 80015a8:	2501      	movs	r5, #1
 80015aa:	e7a9      	b.n	8001500 <RCCEx_PLLSAI1_Config+0x70>
        status = HAL_ERROR;
 80015ac:	2501      	movs	r5, #1
 80015ae:	e7a7      	b.n	8001500 <RCCEx_PLLSAI1_Config+0x70>
      else if(Divider == DIVIDER_Q_UPDATE)
 80015b0:	2f01      	cmp	r7, #1
 80015b2:	d00f      	beq.n	80015d4 <RCCEx_PLLSAI1_Config+0x144>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80015b4:	4810      	ldr	r0, [pc, #64]	; (80015f8 <RCCEx_PLLSAI1_Config+0x168>)
 80015b6:	6902      	ldr	r2, [r0, #16]
 80015b8:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 80015bc:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80015c0:	68a1      	ldr	r1, [r4, #8]
 80015c2:	6963      	ldr	r3, [r4, #20]
 80015c4:	085b      	lsrs	r3, r3, #1
 80015c6:	3b01      	subs	r3, #1
 80015c8:	065b      	lsls	r3, r3, #25
 80015ca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80015ce:	4313      	orrs	r3, r2
 80015d0:	6103      	str	r3, [r0, #16]
 80015d2:	e7bd      	b.n	8001550 <RCCEx_PLLSAI1_Config+0xc0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80015d4:	4808      	ldr	r0, [pc, #32]	; (80015f8 <RCCEx_PLLSAI1_Config+0x168>)
 80015d6:	6902      	ldr	r2, [r0, #16]
 80015d8:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80015dc:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80015e0:	68a1      	ldr	r1, [r4, #8]
 80015e2:	6923      	ldr	r3, [r4, #16]
 80015e4:	085b      	lsrs	r3, r3, #1
 80015e6:	3b01      	subs	r3, #1
 80015e8:	055b      	lsls	r3, r3, #21
 80015ea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80015ee:	4313      	orrs	r3, r2
 80015f0:	6103      	str	r3, [r0, #16]
 80015f2:	e7ad      	b.n	8001550 <RCCEx_PLLSAI1_Config+0xc0>
 80015f4:	2501      	movs	r5, #1
 80015f6:	e759      	b.n	80014ac <RCCEx_PLLSAI1_Config+0x1c>
 80015f8:	40021000 	.word	0x40021000

080015fc <HAL_RCCEx_PeriphCLKConfig>:
{
 80015fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001604:	6803      	ldr	r3, [r0, #0]
 8001606:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800160a:	d026      	beq.n	800165a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    switch(PeriphClkInit->Sai1ClockSelection)
 800160c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800160e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001612:	d006      	beq.n	8001622 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001614:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001618:	d01d      	beq.n	8001656 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800161a:	b19b      	cbz	r3, 8001644 <HAL_RCCEx_PeriphCLKConfig+0x48>
      ret = HAL_ERROR;
 800161c:	2601      	movs	r6, #1
 800161e:	4637      	mov	r7, r6
 8001620:	e01d      	b.n	800165e <HAL_RCCEx_PeriphCLKConfig+0x62>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001622:	4aae      	ldr	r2, [pc, #696]	; (80018dc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001624:	68d3      	ldr	r3, [r2, #12]
 8001626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800162a:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800162c:	2700      	movs	r7, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800162e:	4aab      	ldr	r2, [pc, #684]	; (80018dc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001630:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001634:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001638:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800163a:	430b      	orrs	r3, r1
 800163c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001640:	2600      	movs	r6, #0
 8001642:	e00c      	b.n	800165e <HAL_RCCEx_PeriphCLKConfig+0x62>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001644:	2100      	movs	r1, #0
 8001646:	3004      	adds	r0, #4
 8001648:	f7ff ff22 	bl	8001490 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 800164c:	4607      	mov	r7, r0
 800164e:	2800      	cmp	r0, #0
 8001650:	d0ed      	beq.n	800162e <HAL_RCCEx_PeriphCLKConfig+0x32>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001652:	4606      	mov	r6, r0
 8001654:	e003      	b.n	800165e <HAL_RCCEx_PeriphCLKConfig+0x62>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001656:	2700      	movs	r7, #0
 8001658:	e7e9      	b.n	800162e <HAL_RCCEx_PeriphCLKConfig+0x32>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800165a:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800165c:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800165e:	6823      	ldr	r3, [r4, #0]
 8001660:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001664:	d06b      	beq.n	800173e <HAL_RCCEx_PeriphCLKConfig+0x142>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001666:	4b9d      	ldr	r3, [pc, #628]	; (80018dc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800166e:	d14c      	bne.n	800170a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001670:	4b9a      	ldr	r3, [pc, #616]	; (80018dc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001672:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001674:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001678:	659a      	str	r2, [r3, #88]	; 0x58
 800167a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001680:	9301      	str	r3, [sp, #4]
 8001682:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001684:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001688:	4a95      	ldr	r2, [pc, #596]	; (80018e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800168a:	6813      	ldr	r3, [r2, #0]
 800168c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001690:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001692:	f7ff f8bf 	bl	8000814 <HAL_GetTick>
 8001696:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001698:	4b91      	ldr	r3, [pc, #580]	; (80018e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f413 7f80 	tst.w	r3, #256	; 0x100
 80016a0:	d105      	bne.n	80016ae <HAL_RCCEx_PeriphCLKConfig+0xb2>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a2:	f7ff f8b7 	bl	8000814 <HAL_GetTick>
 80016a6:	1b40      	subs	r0, r0, r5
 80016a8:	2802      	cmp	r0, #2
 80016aa:	d9f5      	bls.n	8001698 <HAL_RCCEx_PeriphCLKConfig+0x9c>
        ret = HAL_TIMEOUT;
 80016ac:	2703      	movs	r7, #3
    if(ret == HAL_OK)
 80016ae:	2f00      	cmp	r7, #0
 80016b0:	d140      	bne.n	8001734 <HAL_RCCEx_PeriphCLKConfig+0x138>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80016b2:	4b8a      	ldr	r3, [pc, #552]	; (80018dc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80016b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80016b8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80016bc:	d015      	beq.n	80016ea <HAL_RCCEx_PeriphCLKConfig+0xee>
 80016be:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d012      	beq.n	80016ea <HAL_RCCEx_PeriphCLKConfig+0xee>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80016c4:	4a85      	ldr	r2, [pc, #532]	; (80018dc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80016c6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80016ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80016ce:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80016d2:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80016d6:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80016da:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80016de:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80016e2:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80016e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80016ea:	f013 0f01 	tst.w	r3, #1
 80016ee:	d10f      	bne.n	8001710 <HAL_RCCEx_PeriphCLKConfig+0x114>
      if(ret == HAL_OK)
 80016f0:	2f00      	cmp	r7, #0
 80016f2:	f040 80c9 	bne.w	8001888 <HAL_RCCEx_PeriphCLKConfig+0x28c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80016f6:	4a79      	ldr	r2, [pc, #484]	; (80018dc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80016f8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80016fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001700:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001702:	430b      	orrs	r3, r1
 8001704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001708:	e015      	b.n	8001736 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    FlagStatus       pwrclkchanged = RESET;
 800170a:	f04f 0800 	mov.w	r8, #0
 800170e:	e7bb      	b.n	8001688 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        tickstart = HAL_GetTick();
 8001710:	f7ff f880 	bl	8000814 <HAL_GetTick>
 8001714:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001716:	4b71      	ldr	r3, [pc, #452]	; (80018dc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800171c:	f013 0f02 	tst.w	r3, #2
 8001720:	d1e6      	bne.n	80016f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001722:	f7ff f877 	bl	8000814 <HAL_GetTick>
 8001726:	1b40      	subs	r0, r0, r5
 8001728:	f241 3388 	movw	r3, #5000	; 0x1388
 800172c:	4298      	cmp	r0, r3
 800172e:	d9f2      	bls.n	8001716 <HAL_RCCEx_PeriphCLKConfig+0x11a>
            ret = HAL_TIMEOUT;
 8001730:	2703      	movs	r7, #3
 8001732:	e7dd      	b.n	80016f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      status = ret;
 8001734:	463e      	mov	r6, r7
    if(pwrclkchanged == SET)
 8001736:	f1b8 0f00 	cmp.w	r8, #0
 800173a:	f040 80a7 	bne.w	800188c <HAL_RCCEx_PeriphCLKConfig+0x290>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800173e:	6823      	ldr	r3, [r4, #0]
 8001740:	f013 0f01 	tst.w	r3, #1
 8001744:	d008      	beq.n	8001758 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001746:	4a65      	ldr	r2, [pc, #404]	; (80018dc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001748:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800174c:	f023 0303 	bic.w	r3, r3, #3
 8001750:	6a21      	ldr	r1, [r4, #32]
 8001752:	430b      	orrs	r3, r1
 8001754:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001758:	6823      	ldr	r3, [r4, #0]
 800175a:	f013 0f02 	tst.w	r3, #2
 800175e:	d008      	beq.n	8001772 <HAL_RCCEx_PeriphCLKConfig+0x176>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001760:	4a5e      	ldr	r2, [pc, #376]	; (80018dc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001762:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001766:	f023 030c 	bic.w	r3, r3, #12
 800176a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800176c:	430b      	orrs	r3, r1
 800176e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001772:	6823      	ldr	r3, [r4, #0]
 8001774:	f013 0f20 	tst.w	r3, #32
 8001778:	d008      	beq.n	800178c <HAL_RCCEx_PeriphCLKConfig+0x190>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800177a:	4a58      	ldr	r2, [pc, #352]	; (80018dc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800177c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001780:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001784:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001786:	430b      	orrs	r3, r1
 8001788:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800178c:	6823      	ldr	r3, [r4, #0]
 800178e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001792:	d008      	beq.n	80017a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001794:	4a51      	ldr	r2, [pc, #324]	; (80018dc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001796:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800179a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800179e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80017a0:	430b      	orrs	r3, r1
 80017a2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80017a6:	6823      	ldr	r3, [r4, #0]
 80017a8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80017ac:	d008      	beq.n	80017c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80017ae:	4a4b      	ldr	r2, [pc, #300]	; (80018dc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80017b0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80017b4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80017b8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80017ba:	430b      	orrs	r3, r1
 80017bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80017c0:	6823      	ldr	r3, [r4, #0]
 80017c2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80017c6:	d008      	beq.n	80017da <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80017c8:	4a44      	ldr	r2, [pc, #272]	; (80018dc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80017ca:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80017ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017d2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80017d4:	430b      	orrs	r3, r1
 80017d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80017da:	6823      	ldr	r3, [r4, #0]
 80017dc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80017e0:	d008      	beq.n	80017f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80017e2:	4a3e      	ldr	r2, [pc, #248]	; (80018dc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80017e4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80017e8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80017ec:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80017ee:	430b      	orrs	r3, r1
 80017f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80017f4:	6823      	ldr	r3, [r4, #0]
 80017f6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80017fa:	d00f      	beq.n	800181c <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80017fc:	4a37      	ldr	r2, [pc, #220]	; (80018dc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80017fe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001802:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001806:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001808:	430b      	orrs	r3, r1
 800180a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800180e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001810:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001814:	d040      	beq.n	8001898 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001816:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800181a:	d042      	beq.n	80018a2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800181c:	6823      	ldr	r3, [r4, #0]
 800181e:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001822:	d00f      	beq.n	8001844 <HAL_RCCEx_PeriphCLKConfig+0x248>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001824:	4a2d      	ldr	r2, [pc, #180]	; (80018dc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001826:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800182a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800182e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001830:	430b      	orrs	r3, r1
 8001832:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001836:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001838:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800183c:	d039      	beq.n	80018b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800183e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001842:	d03b      	beq.n	80018bc <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001844:	6823      	ldr	r3, [r4, #0]
 8001846:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800184a:	d00c      	beq.n	8001866 <HAL_RCCEx_PeriphCLKConfig+0x26a>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800184c:	4a23      	ldr	r2, [pc, #140]	; (80018dc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800184e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001852:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001856:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001858:	430b      	orrs	r3, r1
 800185a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800185e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001860:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001864:	d032      	beq.n	80018cc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001866:	6823      	ldr	r3, [r4, #0]
 8001868:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800186c:	d008      	beq.n	8001880 <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800186e:	4a1b      	ldr	r2, [pc, #108]	; (80018dc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001870:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001874:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001878:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800187a:	430b      	orrs	r3, r1
 800187c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8001880:	4630      	mov	r0, r6
 8001882:	b002      	add	sp, #8
 8001884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 8001888:	463e      	mov	r6, r7
 800188a:	e754      	b.n	8001736 <HAL_RCCEx_PeriphCLKConfig+0x13a>
      __HAL_RCC_PWR_CLK_DISABLE();
 800188c:	4a13      	ldr	r2, [pc, #76]	; (80018dc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800188e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001894:	6593      	str	r3, [r2, #88]	; 0x58
 8001896:	e752      	b.n	800173e <HAL_RCCEx_PeriphCLKConfig+0x142>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001898:	68d3      	ldr	r3, [r2, #12]
 800189a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800189e:	60d3      	str	r3, [r2, #12]
 80018a0:	e7bc      	b.n	800181c <HAL_RCCEx_PeriphCLKConfig+0x220>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80018a2:	2101      	movs	r1, #1
 80018a4:	1d20      	adds	r0, r4, #4
 80018a6:	f7ff fdf3 	bl	8001490 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80018aa:	2800      	cmp	r0, #0
 80018ac:	d0b6      	beq.n	800181c <HAL_RCCEx_PeriphCLKConfig+0x220>
          status = ret;
 80018ae:	4606      	mov	r6, r0
 80018b0:	e7b4      	b.n	800181c <HAL_RCCEx_PeriphCLKConfig+0x220>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80018b2:	68d3      	ldr	r3, [r2, #12]
 80018b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80018b8:	60d3      	str	r3, [r2, #12]
 80018ba:	e7c3      	b.n	8001844 <HAL_RCCEx_PeriphCLKConfig+0x248>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80018bc:	2101      	movs	r1, #1
 80018be:	1d20      	adds	r0, r4, #4
 80018c0:	f7ff fde6 	bl	8001490 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80018c4:	2800      	cmp	r0, #0
 80018c6:	d0bd      	beq.n	8001844 <HAL_RCCEx_PeriphCLKConfig+0x248>
        status = ret;
 80018c8:	4606      	mov	r6, r0
 80018ca:	e7bb      	b.n	8001844 <HAL_RCCEx_PeriphCLKConfig+0x248>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80018cc:	2102      	movs	r1, #2
 80018ce:	1d20      	adds	r0, r4, #4
 80018d0:	f7ff fdde 	bl	8001490 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80018d4:	2800      	cmp	r0, #0
 80018d6:	d0c6      	beq.n	8001866 <HAL_RCCEx_PeriphCLKConfig+0x26a>
        status = ret;
 80018d8:	4606      	mov	r6, r0
 80018da:	e7c4      	b.n	8001866 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80018dc:	40021000 	.word	0x40021000
 80018e0:	40007000 	.word	0x40007000

080018e4 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80018e4:	4a02      	ldr	r2, [pc, #8]	; (80018f0 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 80018e6:	6813      	ldr	r3, [r2, #0]
 80018e8:	f043 0304 	orr.w	r3, r3, #4
 80018ec:	6013      	str	r3, [r2, #0]
}
 80018ee:	4770      	bx	lr
 80018f0:	40021000 	.word	0x40021000

080018f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80018f4:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 80018f8:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80018fa:	6801      	ldr	r1, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80018fc:	6883      	ldr	r3, [r0, #8]
 80018fe:	6902      	ldr	r2, [r0, #16]
 8001900:	4313      	orrs	r3, r2
 8001902:	6942      	ldr	r2, [r0, #20]
 8001904:	4313      	orrs	r3, r2
 8001906:	69c2      	ldr	r2, [r0, #28]
 8001908:	4313      	orrs	r3, r2
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800190a:	6808      	ldr	r0, [r1, #0]
 800190c:	4a8c      	ldr	r2, [pc, #560]	; (8001b40 <UART_SetConfig+0x24c>)
 800190e:	4002      	ands	r2, r0
 8001910:	4313      	orrs	r3, r2
 8001912:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001914:	6822      	ldr	r2, [r4, #0]
 8001916:	6853      	ldr	r3, [r2, #4]
 8001918:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800191c:	68e1      	ldr	r1, [r4, #12]
 800191e:	430b      	orrs	r3, r1
 8001920:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001922:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001924:	6822      	ldr	r2, [r4, #0]
 8001926:	4b87      	ldr	r3, [pc, #540]	; (8001b44 <UART_SetConfig+0x250>)
 8001928:	429a      	cmp	r2, r3
 800192a:	d001      	beq.n	8001930 <UART_SetConfig+0x3c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800192c:	6a23      	ldr	r3, [r4, #32]
 800192e:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001930:	6893      	ldr	r3, [r2, #8]
 8001932:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001936:	430b      	orrs	r3, r1
 8001938:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800193a:	6823      	ldr	r3, [r4, #0]
 800193c:	4a82      	ldr	r2, [pc, #520]	; (8001b48 <UART_SetConfig+0x254>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d01c      	beq.n	800197c <UART_SetConfig+0x88>
 8001942:	4a82      	ldr	r2, [pc, #520]	; (8001b4c <UART_SetConfig+0x258>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d02d      	beq.n	80019a4 <UART_SetConfig+0xb0>
 8001948:	4a7e      	ldr	r2, [pc, #504]	; (8001b44 <UART_SetConfig+0x250>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d043      	beq.n	80019d6 <UART_SetConfig+0xe2>
 800194e:	2210      	movs	r2, #16

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8001950:	497c      	ldr	r1, [pc, #496]	; (8001b44 <UART_SetConfig+0x250>)
 8001952:	428b      	cmp	r3, r1
 8001954:	d05e      	beq.n	8001a14 <UART_SetConfig+0x120>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001956:	69e3      	ldr	r3, [r4, #28]
 8001958:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800195c:	f000 808c 	beq.w	8001a78 <UART_SetConfig+0x184>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001960:	2a08      	cmp	r2, #8
 8001962:	f200 80e7 	bhi.w	8001b34 <UART_SetConfig+0x240>
 8001966:	e8df f012 	tbh	[pc, r2, lsl #1]
 800196a:	00b7      	.short	0x00b7
 800196c:	00b500ce 	.word	0x00b500ce
 8001970:	00d100e5 	.word	0x00d100e5
 8001974:	00e500e5 	.word	0x00e500e5
 8001978:	00d400e5 	.word	0x00d400e5
  UART_GETCLOCKSOURCE(huart, clocksource);
 800197c:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8001980:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8001984:	f002 0203 	and.w	r2, r2, #3
 8001988:	2a03      	cmp	r2, #3
 800198a:	d809      	bhi.n	80019a0 <UART_SetConfig+0xac>
 800198c:	e8df f002 	tbb	[pc, r2]
 8001990:	063c0402 	.word	0x063c0402
 8001994:	2201      	movs	r2, #1
 8001996:	e7db      	b.n	8001950 <UART_SetConfig+0x5c>
 8001998:	2204      	movs	r2, #4
 800199a:	e7d9      	b.n	8001950 <UART_SetConfig+0x5c>
 800199c:	2208      	movs	r2, #8
 800199e:	e7d7      	b.n	8001950 <UART_SetConfig+0x5c>
 80019a0:	2210      	movs	r2, #16
 80019a2:	e7d5      	b.n	8001950 <UART_SetConfig+0x5c>
 80019a4:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 80019a8:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80019ac:	f002 020c 	and.w	r2, r2, #12
 80019b0:	2a0c      	cmp	r2, #12
 80019b2:	d80e      	bhi.n	80019d2 <UART_SetConfig+0xde>
 80019b4:	e8df f002 	tbb	[pc, r2]
 80019b8:	0d0d0d07 	.word	0x0d0d0d07
 80019bc:	0d0d0d09 	.word	0x0d0d0d09
 80019c0:	0d0d0d2a 	.word	0x0d0d0d2a
 80019c4:	0b          	.byte	0x0b
 80019c5:	00          	.byte	0x00
 80019c6:	2200      	movs	r2, #0
 80019c8:	e7c2      	b.n	8001950 <UART_SetConfig+0x5c>
 80019ca:	2204      	movs	r2, #4
 80019cc:	e7c0      	b.n	8001950 <UART_SetConfig+0x5c>
 80019ce:	2208      	movs	r2, #8
 80019d0:	e7be      	b.n	8001950 <UART_SetConfig+0x5c>
 80019d2:	2210      	movs	r2, #16
 80019d4:	e7bc      	b.n	8001950 <UART_SetConfig+0x5c>
 80019d6:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 80019da:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80019de:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80019e2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80019e6:	d00b      	beq.n	8001a00 <UART_SetConfig+0x10c>
 80019e8:	d907      	bls.n	80019fa <UART_SetConfig+0x106>
 80019ea:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80019ee:	d00f      	beq.n	8001a10 <UART_SetConfig+0x11c>
 80019f0:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80019f4:	d106      	bne.n	8001a04 <UART_SetConfig+0x110>
 80019f6:	2208      	movs	r2, #8
 80019f8:	e7aa      	b.n	8001950 <UART_SetConfig+0x5c>
 80019fa:	b91a      	cbnz	r2, 8001a04 <UART_SetConfig+0x110>
 80019fc:	2200      	movs	r2, #0
 80019fe:	e7a7      	b.n	8001950 <UART_SetConfig+0x5c>
 8001a00:	2204      	movs	r2, #4
 8001a02:	e7a5      	b.n	8001950 <UART_SetConfig+0x5c>
 8001a04:	2210      	movs	r2, #16
 8001a06:	e7a3      	b.n	8001950 <UART_SetConfig+0x5c>
 8001a08:	2202      	movs	r2, #2
 8001a0a:	e7a1      	b.n	8001950 <UART_SetConfig+0x5c>
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	e79f      	b.n	8001950 <UART_SetConfig+0x5c>
 8001a10:	2202      	movs	r2, #2
 8001a12:	e79d      	b.n	8001950 <UART_SetConfig+0x5c>
    switch (clocksource)
 8001a14:	2a08      	cmp	r2, #8
 8001a16:	d87f      	bhi.n	8001b18 <UART_SetConfig+0x224>
 8001a18:	e8df f002 	tbb	[pc, r2]
 8001a1c:	7e107e08 	.word	0x7e107e08
 8001a20:	7e7e7e0d 	.word	0x7e7e7e0d
 8001a24:	05          	.byte	0x05
 8001a25:	00          	.byte	0x00
        pclk = (uint32_t) LSE_VALUE;
 8001a26:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001a2a:	e008      	b.n	8001a3e <UART_SetConfig+0x14a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001a2c:	f7ff fd0c 	bl	8001448 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8001a30:	b928      	cbnz	r0, 8001a3e <UART_SetConfig+0x14a>
 8001a32:	2000      	movs	r0, #0
 8001a34:	e062      	b.n	8001afc <UART_SetConfig+0x208>
        pclk = HAL_RCC_GetSysClockFreq();
 8001a36:	f7ff f8b5 	bl	8000ba4 <HAL_RCC_GetSysClockFreq>
        break;
 8001a3a:	e7f9      	b.n	8001a30 <UART_SetConfig+0x13c>
        pclk = (uint32_t) HSI_VALUE;
 8001a3c:	4844      	ldr	r0, [pc, #272]	; (8001b50 <UART_SetConfig+0x25c>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8001a3e:	6862      	ldr	r2, [r4, #4]
 8001a40:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8001a44:	4283      	cmp	r3, r0
 8001a46:	d869      	bhi.n	8001b1c <UART_SetConfig+0x228>
 8001a48:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8001a4c:	d868      	bhi.n	8001b20 <UART_SetConfig+0x22c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8001a4e:	2300      	movs	r3, #0
 8001a50:	0e07      	lsrs	r7, r0, #24
 8001a52:	0206      	lsls	r6, r0, #8
 8001a54:	0850      	lsrs	r0, r2, #1
 8001a56:	eb16 0b00 	adds.w	fp, r6, r0
 8001a5a:	f147 0c00 	adc.w	ip, r7, #0
 8001a5e:	4658      	mov	r0, fp
 8001a60:	4661      	mov	r1, ip
 8001a62:	f7fe fbb5 	bl	80001d0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001a66:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8001a6a:	4b3a      	ldr	r3, [pc, #232]	; (8001b54 <UART_SetConfig+0x260>)
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d859      	bhi.n	8001b24 <UART_SetConfig+0x230>
          huart->Instance->BRR = usartdiv;
 8001a70:	6823      	ldr	r3, [r4, #0]
 8001a72:	60d8      	str	r0, [r3, #12]
 8001a74:	2000      	movs	r0, #0
 8001a76:	e041      	b.n	8001afc <UART_SetConfig+0x208>
    switch (clocksource)
 8001a78:	2a08      	cmp	r2, #8
 8001a7a:	d855      	bhi.n	8001b28 <UART_SetConfig+0x234>
 8001a7c:	e8df f002 	tbb	[pc, r2]
 8001a80:	54052107 	.word	0x54052107
 8001a84:	54545424 	.word	0x54545424
 8001a88:	27          	.byte	0x27
 8001a89:	00          	.byte	0x00
        pclk = (uint32_t) HSI_VALUE;
 8001a8a:	4831      	ldr	r0, [pc, #196]	; (8001b50 <UART_SetConfig+0x25c>)
 8001a8c:	e003      	b.n	8001a96 <UART_SetConfig+0x1a2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001a8e:	f7ff fcdb 	bl	8001448 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8001a92:	2800      	cmp	r0, #0
 8001a94:	d04a      	beq.n	8001b2c <UART_SetConfig+0x238>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001a96:	6862      	ldr	r2, [r4, #4]
 8001a98:	0853      	lsrs	r3, r2, #1
 8001a9a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001a9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001aa2:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001aa4:	f1a3 0110 	sub.w	r1, r3, #16
 8001aa8:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001aac:	4291      	cmp	r1, r2
 8001aae:	d83f      	bhi.n	8001b30 <UART_SetConfig+0x23c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001ab0:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001ab4:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8001ab8:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8001aba:	6822      	ldr	r2, [r4, #0]
 8001abc:	60d3      	str	r3, [r2, #12]
 8001abe:	2000      	movs	r0, #0
 8001ac0:	e01c      	b.n	8001afc <UART_SetConfig+0x208>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001ac2:	f7ff fcd3 	bl	800146c <HAL_RCC_GetPCLK2Freq>
        break;
 8001ac6:	e7e4      	b.n	8001a92 <UART_SetConfig+0x19e>
        pclk = HAL_RCC_GetSysClockFreq();
 8001ac8:	f7ff f86c 	bl	8000ba4 <HAL_RCC_GetSysClockFreq>
        break;
 8001acc:	e7e1      	b.n	8001a92 <UART_SetConfig+0x19e>
        pclk = (uint32_t) LSE_VALUE;
 8001ace:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001ad2:	e7e0      	b.n	8001a96 <UART_SetConfig+0x1a2>
        break;
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
        break;
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001ad4:	481e      	ldr	r0, [pc, #120]	; (8001b50 <UART_SetConfig+0x25c>)
 8001ad6:	e002      	b.n	8001ade <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001ad8:	f7ff fcb6 	bl	8001448 <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 8001adc:	b360      	cbz	r0, 8001b38 <UART_SetConfig+0x244>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001ade:	6863      	ldr	r3, [r4, #4]
 8001ae0:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001ae4:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ae8:	b280      	uxth	r0, r0
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001aea:	f1a0 0210 	sub.w	r2, r0, #16
 8001aee:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d822      	bhi.n	8001b3c <UART_SetConfig+0x248>
      {
        huart->Instance->BRR = usartdiv;
 8001af6:	6823      	ldr	r3, [r4, #0]
 8001af8:	60d8      	str	r0, [r3, #12]
 8001afa:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001b00:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8001b02:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8001b06:	f7ff fcb1 	bl	800146c <HAL_RCC_GetPCLK2Freq>
        break;
 8001b0a:	e7e7      	b.n	8001adc <UART_SetConfig+0x1e8>
        pclk = HAL_RCC_GetSysClockFreq();
 8001b0c:	f7ff f84a 	bl	8000ba4 <HAL_RCC_GetSysClockFreq>
        break;
 8001b10:	e7e4      	b.n	8001adc <UART_SetConfig+0x1e8>
        pclk = (uint32_t) LSE_VALUE;
 8001b12:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001b16:	e7e2      	b.n	8001ade <UART_SetConfig+0x1ea>
        ret = HAL_ERROR;
 8001b18:	2001      	movs	r0, #1
 8001b1a:	e7ef      	b.n	8001afc <UART_SetConfig+0x208>
        ret = HAL_ERROR;
 8001b1c:	2001      	movs	r0, #1
 8001b1e:	e7ed      	b.n	8001afc <UART_SetConfig+0x208>
 8001b20:	2001      	movs	r0, #1
 8001b22:	e7eb      	b.n	8001afc <UART_SetConfig+0x208>
          ret = HAL_ERROR;
 8001b24:	2001      	movs	r0, #1
 8001b26:	e7e9      	b.n	8001afc <UART_SetConfig+0x208>
        ret = HAL_ERROR;
 8001b28:	2001      	movs	r0, #1
 8001b2a:	e7e7      	b.n	8001afc <UART_SetConfig+0x208>
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	e7e5      	b.n	8001afc <UART_SetConfig+0x208>
        ret = HAL_ERROR;
 8001b30:	2001      	movs	r0, #1
 8001b32:	e7e3      	b.n	8001afc <UART_SetConfig+0x208>
        ret = HAL_ERROR;
 8001b34:	2001      	movs	r0, #1
 8001b36:	e7e1      	b.n	8001afc <UART_SetConfig+0x208>
 8001b38:	2000      	movs	r0, #0
 8001b3a:	e7df      	b.n	8001afc <UART_SetConfig+0x208>
        ret = HAL_ERROR;
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	e7dd      	b.n	8001afc <UART_SetConfig+0x208>
 8001b40:	efff69f3 	.word	0xefff69f3
 8001b44:	40008000 	.word	0x40008000
 8001b48:	40013800 	.word	0x40013800
 8001b4c:	40004400 	.word	0x40004400
 8001b50:	00f42400 	.word	0x00f42400
 8001b54:	000ffcff 	.word	0x000ffcff

08001b58 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001b58:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001b5a:	f013 0f01 	tst.w	r3, #1
 8001b5e:	d006      	beq.n	8001b6e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001b60:	6802      	ldr	r2, [r0, #0]
 8001b62:	6853      	ldr	r3, [r2, #4]
 8001b64:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001b68:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001b6a:	430b      	orrs	r3, r1
 8001b6c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001b6e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001b70:	f013 0f02 	tst.w	r3, #2
 8001b74:	d006      	beq.n	8001b84 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001b76:	6802      	ldr	r2, [r0, #0]
 8001b78:	6853      	ldr	r3, [r2, #4]
 8001b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b7e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001b80:	430b      	orrs	r3, r1
 8001b82:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001b84:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001b86:	f013 0f04 	tst.w	r3, #4
 8001b8a:	d006      	beq.n	8001b9a <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001b8c:	6802      	ldr	r2, [r0, #0]
 8001b8e:	6853      	ldr	r3, [r2, #4]
 8001b90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b94:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001b96:	430b      	orrs	r3, r1
 8001b98:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001b9a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001b9c:	f013 0f08 	tst.w	r3, #8
 8001ba0:	d006      	beq.n	8001bb0 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001ba2:	6802      	ldr	r2, [r0, #0]
 8001ba4:	6853      	ldr	r3, [r2, #4]
 8001ba6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001baa:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001bac:	430b      	orrs	r3, r1
 8001bae:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001bb0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001bb2:	f013 0f10 	tst.w	r3, #16
 8001bb6:	d006      	beq.n	8001bc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001bb8:	6802      	ldr	r2, [r0, #0]
 8001bba:	6893      	ldr	r3, [r2, #8]
 8001bbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001bc0:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001bc2:	430b      	orrs	r3, r1
 8001bc4:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001bc6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001bc8:	f013 0f20 	tst.w	r3, #32
 8001bcc:	d006      	beq.n	8001bdc <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001bce:	6802      	ldr	r2, [r0, #0]
 8001bd0:	6893      	ldr	r3, [r2, #8]
 8001bd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001bd6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001bd8:	430b      	orrs	r3, r1
 8001bda:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001bdc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001bde:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001be2:	d00a      	beq.n	8001bfa <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001be4:	6802      	ldr	r2, [r0, #0]
 8001be6:	6853      	ldr	r3, [r2, #4]
 8001be8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001bec:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001bee:	430b      	orrs	r3, r1
 8001bf0:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001bf2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001bf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001bf8:	d00b      	beq.n	8001c12 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001bfa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001bfc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001c00:	d006      	beq.n	8001c10 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001c02:	6802      	ldr	r2, [r0, #0]
 8001c04:	6853      	ldr	r3, [r2, #4]
 8001c06:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001c0a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001c0c:	430b      	orrs	r3, r1
 8001c0e:	6053      	str	r3, [r2, #4]
  }
}
 8001c10:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001c12:	6802      	ldr	r2, [r0, #0]
 8001c14:	6853      	ldr	r3, [r2, #4]
 8001c16:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001c1a:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001c1c:	430b      	orrs	r3, r1
 8001c1e:	6053      	str	r3, [r2, #4]
 8001c20:	e7eb      	b.n	8001bfa <UART_AdvFeatureConfig+0xa2>

08001c22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c26:	4604      	mov	r4, r0
 8001c28:	460f      	mov	r7, r1
 8001c2a:	4616      	mov	r6, r2
 8001c2c:	4698      	mov	r8, r3
 8001c2e:	9d06      	ldr	r5, [sp, #24]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c30:	6823      	ldr	r3, [r4, #0]
 8001c32:	69db      	ldr	r3, [r3, #28]
 8001c34:	ea37 0303 	bics.w	r3, r7, r3
 8001c38:	bf0c      	ite	eq
 8001c3a:	2301      	moveq	r3, #1
 8001c3c:	2300      	movne	r3, #0
 8001c3e:	42b3      	cmp	r3, r6
 8001c40:	d13a      	bne.n	8001cb8 <UART_WaitOnFlagUntilTimeout+0x96>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c42:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001c46:	d0f3      	beq.n	8001c30 <UART_WaitOnFlagUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c48:	f7fe fde4 	bl	8000814 <HAL_GetTick>
 8001c4c:	eba0 0008 	sub.w	r0, r0, r8
 8001c50:	42a8      	cmp	r0, r5
 8001c52:	d81f      	bhi.n	8001c94 <UART_WaitOnFlagUntilTimeout+0x72>
 8001c54:	b1f5      	cbz	r5, 8001c94 <UART_WaitOnFlagUntilTimeout+0x72>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001c56:	6823      	ldr	r3, [r4, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	f012 0f04 	tst.w	r2, #4
 8001c5e:	d0e7      	beq.n	8001c30 <UART_WaitOnFlagUntilTimeout+0xe>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001c60:	69da      	ldr	r2, [r3, #28]
 8001c62:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8001c66:	d0e3      	beq.n	8001c30 <UART_WaitOnFlagUntilTimeout+0xe>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001c68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c6c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c6e:	6822      	ldr	r2, [r4, #0]
 8001c70:	6813      	ldr	r3, [r2, #0]
 8001c72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001c76:	6013      	str	r3, [r2, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c78:	6822      	ldr	r2, [r4, #0]
 8001c7a:	6893      	ldr	r3, [r2, #8]
 8001c7c:	f023 0301 	bic.w	r3, r3, #1
 8001c80:	6093      	str	r3, [r2, #8]

          huart->gState = HAL_UART_STATE_READY;
 8001c82:	2320      	movs	r3, #32
 8001c84:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8001c86:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001c88:	67e3      	str	r3, [r4, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70

          return HAL_TIMEOUT;
 8001c90:	2003      	movs	r0, #3
 8001c92:	e012      	b.n	8001cba <UART_WaitOnFlagUntilTimeout+0x98>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c94:	6822      	ldr	r2, [r4, #0]
 8001c96:	6813      	ldr	r3, [r2, #0]
 8001c98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001c9c:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c9e:	6822      	ldr	r2, [r4, #0]
 8001ca0:	6893      	ldr	r3, [r2, #8]
 8001ca2:	f023 0301 	bic.w	r3, r3, #1
 8001ca6:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001ca8:	2320      	movs	r3, #32
 8001caa:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001cac:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        return HAL_TIMEOUT;
 8001cb4:	2003      	movs	r0, #3
 8001cb6:	e000      	b.n	8001cba <UART_WaitOnFlagUntilTimeout+0x98>
        }
      }
    }
  }
  return HAL_OK;
 8001cb8:	2000      	movs	r0, #0
}
 8001cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001cbe <UART_CheckIdleState>:
{
 8001cbe:	b530      	push	{r4, r5, lr}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001cc8:	f7fe fda4 	bl	8000814 <HAL_GetTick>
 8001ccc:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001cce:	6823      	ldr	r3, [r4, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f013 0f08 	tst.w	r3, #8
 8001cd6:	d10c      	bne.n	8001cf2 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001cd8:	6823      	ldr	r3, [r4, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f013 0f04 	tst.w	r3, #4
 8001ce0:	d115      	bne.n	8001d0e <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 8001ce2:	2320      	movs	r3, #32
 8001ce4:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8001ce6:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8001ce8:	2000      	movs	r0, #0
 8001cea:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8001cee:	b003      	add	sp, #12
 8001cf0:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001cf2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001d00:	4620      	mov	r0, r4
 8001d02:	f7ff ff8e 	bl	8001c22 <UART_WaitOnFlagUntilTimeout>
 8001d06:	2800      	cmp	r0, #0
 8001d08:	d0e6      	beq.n	8001cd8 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8001d0a:	2003      	movs	r0, #3
 8001d0c:	e7ef      	b.n	8001cee <UART_CheckIdleState+0x30>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001d0e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	462b      	mov	r3, r5
 8001d16:	2200      	movs	r2, #0
 8001d18:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001d1c:	4620      	mov	r0, r4
 8001d1e:	f7ff ff80 	bl	8001c22 <UART_WaitOnFlagUntilTimeout>
 8001d22:	2800      	cmp	r0, #0
 8001d24:	d0dd      	beq.n	8001ce2 <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8001d26:	2003      	movs	r0, #3
 8001d28:	e7e1      	b.n	8001cee <UART_CheckIdleState+0x30>

08001d2a <HAL_UART_Init>:
  if (huart == NULL)
 8001d2a:	b368      	cbz	r0, 8001d88 <HAL_UART_Init+0x5e>
{
 8001d2c:	b510      	push	{r4, lr}
 8001d2e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001d30:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001d32:	b303      	cbz	r3, 8001d76 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8001d34:	2324      	movs	r3, #36	; 0x24
 8001d36:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001d38:	6822      	ldr	r2, [r4, #0]
 8001d3a:	6813      	ldr	r3, [r2, #0]
 8001d3c:	f023 0301 	bic.w	r3, r3, #1
 8001d40:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001d42:	4620      	mov	r0, r4
 8001d44:	f7ff fdd6 	bl	80018f4 <UART_SetConfig>
 8001d48:	2801      	cmp	r0, #1
 8001d4a:	d013      	beq.n	8001d74 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001d4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d4e:	b9bb      	cbnz	r3, 8001d80 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d50:	6822      	ldr	r2, [r4, #0]
 8001d52:	6853      	ldr	r3, [r2, #4]
 8001d54:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001d58:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d5a:	6822      	ldr	r2, [r4, #0]
 8001d5c:	6893      	ldr	r3, [r2, #8]
 8001d5e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001d62:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8001d64:	6822      	ldr	r2, [r4, #0]
 8001d66:	6813      	ldr	r3, [r2, #0]
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8001d6e:	4620      	mov	r0, r4
 8001d70:	f7ff ffa5 	bl	8001cbe <UART_CheckIdleState>
}
 8001d74:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001d76:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001d7a:	f7fe fc7f 	bl	800067c <HAL_UART_MspInit>
 8001d7e:	e7d9      	b.n	8001d34 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8001d80:	4620      	mov	r0, r4
 8001d82:	f7ff fee9 	bl	8001b58 <UART_AdvFeatureConfig>
 8001d86:	e7e3      	b.n	8001d50 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8001d88:	2001      	movs	r0, #1
}
 8001d8a:	4770      	bx	lr

08001d8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dc4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d90:	f7fe fcc0 	bl	8000714 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001d94:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001d96:	e003      	b.n	8001da0 <LoopCopyDataInit>

08001d98 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001d9a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001d9c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001d9e:	3104      	adds	r1, #4

08001da0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001da0:	480a      	ldr	r0, [pc, #40]	; (8001dcc <LoopForever+0xa>)
	ldr	r3, =_edata
 8001da2:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001da4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001da6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001da8:	d3f6      	bcc.n	8001d98 <CopyDataInit>
	ldr	r2, =_sbss
 8001daa:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001dac:	e002      	b.n	8001db4 <LoopFillZerobss>

08001dae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001dae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001db0:	f842 3b04 	str.w	r3, [r2], #4

08001db4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001db4:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <LoopForever+0x16>)
	cmp	r2, r3
 8001db6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001db8:	d3f9      	bcc.n	8001dae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dba:	f000 f811 	bl	8001de0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dbe:	f7fe fc39 	bl	8000634 <main>

08001dc2 <LoopForever>:

LoopForever:
    b LoopForever
 8001dc2:	e7fe      	b.n	8001dc2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001dc4:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001dc8:	08001eb0 	.word	0x08001eb0
	ldr	r0, =_sdata
 8001dcc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001dd0:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8001dd4:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001dd8:	200000b0 	.word	0x200000b0

08001ddc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ddc:	e7fe      	b.n	8001ddc <ADC1_IRQHandler>
	...

08001de0 <__libc_init_array>:
 8001de0:	b570      	push	{r4, r5, r6, lr}
 8001de2:	4e0d      	ldr	r6, [pc, #52]	; (8001e18 <__libc_init_array+0x38>)
 8001de4:	4c0d      	ldr	r4, [pc, #52]	; (8001e1c <__libc_init_array+0x3c>)
 8001de6:	1ba4      	subs	r4, r4, r6
 8001de8:	10a4      	asrs	r4, r4, #2
 8001dea:	2500      	movs	r5, #0
 8001dec:	42a5      	cmp	r5, r4
 8001dee:	d109      	bne.n	8001e04 <__libc_init_array+0x24>
 8001df0:	4e0b      	ldr	r6, [pc, #44]	; (8001e20 <__libc_init_array+0x40>)
 8001df2:	4c0c      	ldr	r4, [pc, #48]	; (8001e24 <__libc_init_array+0x44>)
 8001df4:	f000 f820 	bl	8001e38 <_init>
 8001df8:	1ba4      	subs	r4, r4, r6
 8001dfa:	10a4      	asrs	r4, r4, #2
 8001dfc:	2500      	movs	r5, #0
 8001dfe:	42a5      	cmp	r5, r4
 8001e00:	d105      	bne.n	8001e0e <__libc_init_array+0x2e>
 8001e02:	bd70      	pop	{r4, r5, r6, pc}
 8001e04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e08:	4798      	blx	r3
 8001e0a:	3501      	adds	r5, #1
 8001e0c:	e7ee      	b.n	8001dec <__libc_init_array+0xc>
 8001e0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e12:	4798      	blx	r3
 8001e14:	3501      	adds	r5, #1
 8001e16:	e7f2      	b.n	8001dfe <__libc_init_array+0x1e>
 8001e18:	08001ea0 	.word	0x08001ea0
 8001e1c:	08001ea0 	.word	0x08001ea0
 8001e20:	08001ea0 	.word	0x08001ea0
 8001e24:	08001ea4 	.word	0x08001ea4

08001e28 <memset>:
 8001e28:	4402      	add	r2, r0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d100      	bne.n	8001e32 <memset+0xa>
 8001e30:	4770      	bx	lr
 8001e32:	f803 1b01 	strb.w	r1, [r3], #1
 8001e36:	e7f9      	b.n	8001e2c <memset+0x4>

08001e38 <_init>:
 8001e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e3a:	bf00      	nop
 8001e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e3e:	bc08      	pop	{r3}
 8001e40:	469e      	mov	lr, r3
 8001e42:	4770      	bx	lr

08001e44 <_fini>:
 8001e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e46:	bf00      	nop
 8001e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e4a:	bc08      	pop	{r3}
 8001e4c:	469e      	mov	lr, r3
 8001e4e:	4770      	bx	lr

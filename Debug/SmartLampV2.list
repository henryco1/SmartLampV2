
SmartLampV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000190  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003250  08000190  08000190  00010190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  080033e0  080033e0  000133e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003528  08003528  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003528  08003528  00013528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003530  08003530  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003530  08003530  00013530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08003538  08003538  00013538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003540  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  20000070  080035b0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000414  080035b0  00020414  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014291  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026c3  00000000  00000000  00034331  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c543  00000000  00000000  000369f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000f50  00000000  00000000  00042f38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000ee0  00000000  00000000  00043e88  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000225a7  00000000  00000000  00044d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000ceb2  00000000  00000000  0006730f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000ccce9  00000000  00000000  000741c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00140eaa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a48  00000000  00000000  00140f28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080033c4 	.word	0x080033c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080033c4 	.word	0x080033c4

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d0:	b500      	push	{lr}
 80004d2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d4:	2300      	movs	r3, #0
 80004d6:	9305      	str	r3, [sp, #20]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80004dc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80004e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004e2:	f042 0204 	orr.w	r2, r2, #4
 80004e6:	64da      	str	r2, [r3, #76]	; 0x4c
 80004e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ea:	f002 0204 	and.w	r2, r2, #4
 80004ee:	9201      	str	r2, [sp, #4]
 80004f0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004f4:	f042 0201 	orr.w	r2, r2, #1
 80004f8:	64da      	str	r2, [r3, #76]	; 0x4c
 80004fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fc:	f003 0301 	and.w	r3, r3, #1
 8000500:	9302      	str	r3, [sp, #8]
 8000502:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000504:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000508:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800050a:	2302      	movs	r3, #2
 800050c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800050e:	2303      	movs	r3, #3
 8000510:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000512:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000514:	a903      	add	r1, sp, #12
 8000516:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800051a:	f000 feb7 	bl	800128c <HAL_GPIO_Init>

}
 800051e:	b009      	add	sp, #36	; 0x24
 8000520:	f85d fb04 	ldr.w	pc, [sp], #4

08000524 <MX_DMA_Init>:
{
 8000524:	b500      	push	{lr}
 8000526:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000528:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <MX_DMA_Init+0x30>)
 800052a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800052c:	f042 0201 	orr.w	r2, r2, #1
 8000530:	649a      	str	r2, [r3, #72]	; 0x48
 8000532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000534:	f003 0301 	and.w	r3, r3, #1
 8000538:	9301      	str	r3, [sp, #4]
 800053a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800053c:	2200      	movs	r2, #0
 800053e:	4611      	mov	r1, r2
 8000540:	200b      	movs	r0, #11
 8000542:	f000 fd6d 	bl	8001020 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000546:	200b      	movs	r0, #11
 8000548:	f000 fd9e 	bl	8001088 <HAL_NVIC_EnableIRQ>
}
 800054c:	b003      	add	sp, #12
 800054e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000552:	bf00      	nop
 8000554:	40021000 	.word	0x40021000

08000558 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000558:	b672      	cpsid	i
 800055a:	e7fe      	b.n	800055a <Error_Handler+0x2>

0800055c <MX_TIM2_Init>:
{
 800055c:	b510      	push	{r4, lr}
 800055e:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000560:	2300      	movs	r3, #0
 8000562:	930a      	str	r3, [sp, #40]	; 0x28
 8000564:	930b      	str	r3, [sp, #44]	; 0x2c
 8000566:	930c      	str	r3, [sp, #48]	; 0x30
 8000568:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800056a:	9307      	str	r3, [sp, #28]
 800056c:	9308      	str	r3, [sp, #32]
 800056e:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000570:	9300      	str	r3, [sp, #0]
 8000572:	9301      	str	r3, [sp, #4]
 8000574:	9302      	str	r3, [sp, #8]
 8000576:	9303      	str	r3, [sp, #12]
 8000578:	9304      	str	r3, [sp, #16]
 800057a:	9305      	str	r3, [sp, #20]
 800057c:	9306      	str	r3, [sp, #24]
  htim2.Instance = TIM2;
 800057e:	4831      	ldr	r0, [pc, #196]	; (8000644 <MX_TIM2_Init+0xe8>)
 8000580:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000584:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 8000586:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000588:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 100-1;
 800058a:	2263      	movs	r2, #99	; 0x63
 800058c:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800058e:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000590:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000592:	f001 ffef 	bl	8002574 <HAL_TIM_Base_Init>
 8000596:	bb68      	cbnz	r0, 80005f4 <MX_TIM2_Init+0x98>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000598:	a90e      	add	r1, sp, #56	; 0x38
 800059a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800059e:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005a2:	4828      	ldr	r0, [pc, #160]	; (8000644 <MX_TIM2_Init+0xe8>)
 80005a4:	f002 f986 	bl	80028b4 <HAL_TIM_ConfigClockSource>
 80005a8:	bb30      	cbnz	r0, 80005f8 <MX_TIM2_Init+0x9c>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80005aa:	4826      	ldr	r0, [pc, #152]	; (8000644 <MX_TIM2_Init+0xe8>)
 80005ac:	f002 f840 	bl	8002630 <HAL_TIM_PWM_Init>
 80005b0:	bb20      	cbnz	r0, 80005fc <MX_TIM2_Init+0xa0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005b2:	2300      	movs	r3, #0
 80005b4:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005b6:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005b8:	a907      	add	r1, sp, #28
 80005ba:	4822      	ldr	r0, [pc, #136]	; (8000644 <MX_TIM2_Init+0xe8>)
 80005bc:	f002 fb36 	bl	8002c2c <HAL_TIMEx_MasterConfigSynchronization>
 80005c0:	b9f0      	cbnz	r0, 8000600 <MX_TIM2_Init+0xa4>
	timer_period =  SystemCoreClock / 800000; // 0,125us period (10 times lower the 1,25us period to have fixed math below)
 80005c2:	4b21      	ldr	r3, [pc, #132]	; (8000648 <MX_TIM2_Init+0xec>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	0a1b      	lsrs	r3, r3, #8
 80005c8:	4a20      	ldr	r2, [pc, #128]	; (800064c <MX_TIM2_Init+0xf0>)
 80005ca:	fba2 2303 	umull	r2, r3, r2, r3
 80005ce:	091b      	lsrs	r3, r3, #4
 80005d0:	4a1f      	ldr	r2, [pc, #124]	; (8000650 <MX_TIM2_Init+0xf4>)
 80005d2:	6013      	str	r3, [r2, #0]
	uint32_t logic_0 = (10 * timer_period) / 36; // originally 36
 80005d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80005d8:	005a      	lsls	r2, r3, #1
 80005da:	4b1e      	ldr	r3, [pc, #120]	; (8000654 <MX_TIM2_Init+0xf8>)
 80005dc:	fba3 1302 	umull	r1, r3, r3, r2
 80005e0:	08db      	lsrs	r3, r3, #3
	uint32_t logic_1 = (10 * timer_period) / 15; // originally 15
 80005e2:	491d      	ldr	r1, [pc, #116]	; (8000658 <MX_TIM2_Init+0xfc>)
 80005e4:	fba1 1202 	umull	r1, r2, r1, r2
 80005e8:	08d2      	lsrs	r2, r2, #3
	if(logic_0 > 255 || logic_1 > 255)
 80005ea:	2bff      	cmp	r3, #255	; 0xff
 80005ec:	d801      	bhi.n	80005f2 <MX_TIM2_Init+0x96>
 80005ee:	2aff      	cmp	r2, #255	; 0xff
 80005f0:	d908      	bls.n	8000604 <MX_TIM2_Init+0xa8>
 80005f2:	e7fe      	b.n	80005f2 <MX_TIM2_Init+0x96>
    Error_Handler();
 80005f4:	f7ff ffb0 	bl	8000558 <Error_Handler>
    Error_Handler();
 80005f8:	f7ff ffae 	bl	8000558 <Error_Handler>
    Error_Handler();
 80005fc:	f7ff ffac 	bl	8000558 <Error_Handler>
    Error_Handler();
 8000600:	f7ff ffaa 	bl	8000558 <Error_Handler>
	compare_pulse_logic_0 = logic_0;
 8000604:	b2db      	uxtb	r3, r3
 8000606:	4915      	ldr	r1, [pc, #84]	; (800065c <MX_TIM2_Init+0x100>)
 8000608:	700b      	strb	r3, [r1, #0]
	compare_pulse_logic_1 = logic_1;
 800060a:	4915      	ldr	r1, [pc, #84]	; (8000660 <MX_TIM2_Init+0x104>)
 800060c:	700a      	strb	r2, [r1, #0]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800060e:	2260      	movs	r2, #96	; 0x60
 8000610:	9200      	str	r2, [sp, #0]
  sConfigOC.Pulse = compare_pulse_logic_0; // previously 0 via cubemx config
 8000612:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000614:	2300      	movs	r3, #0
 8000616:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000618:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800061a:	2208      	movs	r2, #8
 800061c:	4669      	mov	r1, sp
 800061e:	4809      	ldr	r0, [pc, #36]	; (8000644 <MX_TIM2_Init+0xe8>)
 8000620:	f002 f8a7 	bl	8002772 <HAL_TIM_PWM_ConfigChannel>
 8000624:	b108      	cbz	r0, 800062a <MX_TIM2_Init+0xce>
    Error_Handler();
 8000626:	f7ff ff97 	bl	8000558 <Error_Handler>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800062a:	4c06      	ldr	r4, [pc, #24]	; (8000644 <MX_TIM2_Init+0xe8>)
 800062c:	2108      	movs	r1, #8
 800062e:	4620      	mov	r0, r4
 8000630:	f002 fa5e 	bl	8002af0 <HAL_TIM_PWM_Start>
	(&htim2)->Instance->DCR = TIM_DMABASE_CCR1 | TIM_DMABURSTLENGTH_1TRANSFER;
 8000634:	6823      	ldr	r3, [r4, #0]
 8000636:	220d      	movs	r2, #13
 8000638:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_TIM_MspPostInit(&htim2);
 800063a:	4620      	mov	r0, r4
 800063c:	f000 f962 	bl	8000904 <HAL_TIM_MspPostInit>
}
 8000640:	b00e      	add	sp, #56	; 0x38
 8000642:	bd10      	pop	{r4, pc}
 8000644:	20000194 	.word	0x20000194
 8000648:	20000000 	.word	0x20000000
 800064c:	014f8b59 	.word	0x014f8b59
 8000650:	20000228 	.word	0x20000228
 8000654:	38e38e39 	.word	0x38e38e39
 8000658:	88888889 	.word	0x88888889
 800065c:	200000a4 	.word	0x200000a4
 8000660:	20000144 	.word	0x20000144

08000664 <MX_TIM1_Init>:
{
 8000664:	b510      	push	{r4, lr}
 8000666:	b096      	sub	sp, #88	; 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000668:	2400      	movs	r4, #0
 800066a:	9413      	str	r4, [sp, #76]	; 0x4c
 800066c:	9414      	str	r4, [sp, #80]	; 0x50
 800066e:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000670:	940c      	str	r4, [sp, #48]	; 0x30
 8000672:	940d      	str	r4, [sp, #52]	; 0x34
 8000674:	940e      	str	r4, [sp, #56]	; 0x38
 8000676:	940f      	str	r4, [sp, #60]	; 0x3c
 8000678:	9410      	str	r4, [sp, #64]	; 0x40
 800067a:	9411      	str	r4, [sp, #68]	; 0x44
 800067c:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800067e:	222c      	movs	r2, #44	; 0x2c
 8000680:	4621      	mov	r1, r4
 8000682:	a801      	add	r0, sp, #4
 8000684:	f002 fdee 	bl	8003264 <memset>
  htim1.Instance = TIM1;
 8000688:	4828      	ldr	r0, [pc, #160]	; (800072c <MX_TIM1_Init+0xc8>)
 800068a:	4b29      	ldr	r3, [pc, #164]	; (8000730 <MX_TIM1_Init+0xcc>)
 800068c:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 65535;
 800068e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000692:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000694:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 1221;
 8000696:	f240 43c5 	movw	r3, #1221	; 0x4c5
 800069a:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800069c:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800069e:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a0:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80006a2:	f001 ff96 	bl	80025d2 <HAL_TIM_OC_Init>
 80006a6:	2800      	cmp	r0, #0
 80006a8:	d137      	bne.n	800071a <MX_TIM1_Init+0xb6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006aa:	2300      	movs	r3, #0
 80006ac:	9313      	str	r3, [sp, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006ae:	9314      	str	r3, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b0:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006b2:	a913      	add	r1, sp, #76	; 0x4c
 80006b4:	481d      	ldr	r0, [pc, #116]	; (800072c <MX_TIM1_Init+0xc8>)
 80006b6:	f002 fab9 	bl	8002c2c <HAL_TIMEx_MasterConfigSynchronization>
 80006ba:	2800      	cmp	r0, #0
 80006bc:	d12f      	bne.n	800071e <MX_TIM1_Init+0xba>
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80006be:	2330      	movs	r3, #48	; 0x30
 80006c0:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.Pulse = 250;
 80006c2:	23fa      	movs	r3, #250	; 0xfa
 80006c4:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006c6:	2300      	movs	r3, #0
 80006c8:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006ca:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006cc:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006ce:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006d0:	220c      	movs	r2, #12
 80006d2:	a90c      	add	r1, sp, #48	; 0x30
 80006d4:	4815      	ldr	r0, [pc, #84]	; (800072c <MX_TIM1_Init+0xc8>)
 80006d6:	f002 f817 	bl	8002708 <HAL_TIM_OC_ConfigChannel>
 80006da:	bb10      	cbnz	r0, 8000722 <MX_TIM1_Init+0xbe>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006dc:	2300      	movs	r3, #0
 80006de:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006e0:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006e2:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006e4:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006e6:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006ec:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80006ee:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80006f0:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80006f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80006f6:	9209      	str	r2, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80006f8:	930a      	str	r3, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006fa:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006fc:	a901      	add	r1, sp, #4
 80006fe:	480b      	ldr	r0, [pc, #44]	; (800072c <MX_TIM1_Init+0xc8>)
 8000700:	f002 facc 	bl	8002c9c <HAL_TIMEx_ConfigBreakDeadTime>
 8000704:	b978      	cbnz	r0, 8000726 <MX_TIM1_Init+0xc2>
  HAL_TIM_MspPostInit(&htim1);
 8000706:	4c09      	ldr	r4, [pc, #36]	; (800072c <MX_TIM1_Init+0xc8>)
 8000708:	4620      	mov	r0, r4
 800070a:	f000 f8fb 	bl	8000904 <HAL_TIM_MspPostInit>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 800070e:	210c      	movs	r1, #12
 8000710:	4620      	mov	r0, r4
 8000712:	f002 f94f 	bl	80029b4 <HAL_TIM_OC_Start>
}
 8000716:	b016      	add	sp, #88	; 0x58
 8000718:	bd10      	pop	{r4, pc}
    Error_Handler();
 800071a:	f7ff ff1d 	bl	8000558 <Error_Handler>
    Error_Handler();
 800071e:	f7ff ff1b 	bl	8000558 <Error_Handler>
    Error_Handler();
 8000722:	f7ff ff19 	bl	8000558 <Error_Handler>
    Error_Handler();
 8000726:	f7ff ff17 	bl	8000558 <Error_Handler>
 800072a:	bf00      	nop
 800072c:	20000148 	.word	0x20000148
 8000730:	40012c00 	.word	0x40012c00

08000734 <MX_USART1_UART_Init>:
{
 8000734:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8000736:	480b      	ldr	r0, [pc, #44]	; (8000764 <MX_USART1_UART_Init+0x30>)
 8000738:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_USART1_UART_Init+0x34>)
 800073a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800073c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000740:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000742:	2300      	movs	r3, #0
 8000744:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000746:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000748:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800074a:	220c      	movs	r2, #12
 800074c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000750:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000752:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000754:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000756:	f002 fd00 	bl	800315a <HAL_UART_Init>
 800075a:	b900      	cbnz	r0, 800075e <MX_USART1_UART_Init+0x2a>
}
 800075c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800075e:	f7ff fefb 	bl	8000558 <Error_Handler>
 8000762:	bf00      	nop
 8000764:	200000a8 	.word	0x200000a8
 8000768:	40013800 	.word	0x40013800

0800076c <SystemClock_Config>:
{
 800076c:	b500      	push	{lr}
 800076e:	b0ad      	sub	sp, #180	; 0xb4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000770:	2224      	movs	r2, #36	; 0x24
 8000772:	2100      	movs	r1, #0
 8000774:	a81c      	add	r0, sp, #112	; 0x70
 8000776:	f002 fd75 	bl	8003264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077a:	2100      	movs	r1, #0
 800077c:	9116      	str	r1, [sp, #88]	; 0x58
 800077e:	9117      	str	r1, [sp, #92]	; 0x5c
 8000780:	9118      	str	r1, [sp, #96]	; 0x60
 8000782:	9119      	str	r1, [sp, #100]	; 0x64
 8000784:	911a      	str	r1, [sp, #104]	; 0x68
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000786:	2254      	movs	r2, #84	; 0x54
 8000788:	a801      	add	r0, sp, #4
 800078a:	f002 fd6b 	bl	8003264 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800078e:	2302      	movs	r3, #2
 8000790:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000792:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000796:	921e      	str	r2, [sp, #120]	; 0x78
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000798:	2240      	movs	r2, #64	; 0x40
 800079a:	921f      	str	r2, [sp, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079c:	9325      	str	r3, [sp, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800079e:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007a0:	2201      	movs	r2, #1
 80007a2:	9227      	str	r2, [sp, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 20;
 80007a4:	2214      	movs	r2, #20
 80007a6:	9228      	str	r2, [sp, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007a8:	2207      	movs	r2, #7
 80007aa:	9229      	str	r2, [sp, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007ac:	932a      	str	r3, [sp, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80007ae:	2304      	movs	r3, #4
 80007b0:	932b      	str	r3, [sp, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b2:	a81b      	add	r0, sp, #108	; 0x6c
 80007b4:	f000 ff1c 	bl	80015f0 <HAL_RCC_OscConfig>
 80007b8:	b9e0      	cbnz	r0, 80007f4 <SystemClock_Config+0x88>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ba:	230f      	movs	r3, #15
 80007bc:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007be:	2303      	movs	r3, #3
 80007c0:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c6:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c8:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007ca:	2104      	movs	r1, #4
 80007cc:	a816      	add	r0, sp, #88	; 0x58
 80007ce:	f001 fa55 	bl	8001c7c <HAL_RCC_ClockConfig>
 80007d2:	b988      	cbnz	r0, 80007f8 <SystemClock_Config+0x8c>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80007d4:	2301      	movs	r3, #1
 80007d6:	9301      	str	r3, [sp, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80007d8:	2300      	movs	r3, #0
 80007da:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007dc:	a801      	add	r0, sp, #4
 80007de:	f001 fbd9 	bl	8001f94 <HAL_RCCEx_PeriphCLKConfig>
 80007e2:	b958      	cbnz	r0, 80007fc <SystemClock_Config+0x90>
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007e4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007e8:	f000 fe18 	bl	800141c <HAL_PWREx_ControlVoltageScaling>
 80007ec:	b940      	cbnz	r0, 8000800 <SystemClock_Config+0x94>
}
 80007ee:	b02d      	add	sp, #180	; 0xb4
 80007f0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80007f4:	f7ff feb0 	bl	8000558 <Error_Handler>
    Error_Handler();
 80007f8:	f7ff feae 	bl	8000558 <Error_Handler>
    Error_Handler();
 80007fc:	f7ff feac 	bl	8000558 <Error_Handler>
    Error_Handler();
 8000800:	f7ff feaa 	bl	8000558 <Error_Handler>

08000804 <main>:
{
 8000804:	b508      	push	{r3, lr}
  HAL_Init();
 8000806:	f000 fbd7 	bl	8000fb8 <HAL_Init>
  SystemClock_Config();
 800080a:	f7ff ffaf 	bl	800076c <SystemClock_Config>
  MX_GPIO_Init();
 800080e:	f7ff fe5f 	bl	80004d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000812:	f7ff fe87 	bl	8000524 <MX_DMA_Init>
  MX_TIM2_Init();
 8000816:	f7ff fea1 	bl	800055c <MX_TIM2_Init>
  MX_TIM1_Init();
 800081a:	f7ff ff23 	bl	8000664 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800081e:	f7ff ff89 	bl	8000734 <MX_USART1_UART_Init>
  visInit();
 8000822:	f000 f99b 	bl	8000b5c <visInit>
	  visHandle();
 8000826:	f000 f9a9 	bl	8000b7c <visHandle>
 800082a:	e7fc      	b.n	8000826 <main+0x22>

0800082c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800082c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082e:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <HAL_MspInit+0x2c>)
 8000830:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000832:	f042 0201 	orr.w	r2, r2, #1
 8000836:	661a      	str	r2, [r3, #96]	; 0x60
 8000838:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800083a:	f002 0201 	and.w	r2, r2, #1
 800083e:	9200      	str	r2, [sp, #0]
 8000840:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000842:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000844:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000848:	659a      	str	r2, [r3, #88]	; 0x58
 800084a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800084c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000850:	9301      	str	r3, [sp, #4]
 8000852:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000854:	b002      	add	sp, #8
 8000856:	4770      	bx	lr
 8000858:	40021000 	.word	0x40021000

0800085c <HAL_TIM_OC_MspInit>:
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
  if(htim_oc->Instance==TIM1)
 800085c:	6802      	ldr	r2, [r0, #0]
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <HAL_TIM_OC_MspInit+0x28>)
 8000860:	429a      	cmp	r2, r3
 8000862:	d000      	beq.n	8000866 <HAL_TIM_OC_MspInit+0xa>
 8000864:	4770      	bx	lr
{
 8000866:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000868:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800086c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800086e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000872:	661a      	str	r2, [r3, #96]	; 0x60
 8000874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800087a:	9301      	str	r3, [sp, #4]
 800087c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800087e:	b002      	add	sp, #8
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	40012c00 	.word	0x40012c00

08000888 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8000888:	6803      	ldr	r3, [r0, #0]
 800088a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800088e:	d000      	beq.n	8000892 <HAL_TIM_Base_MspInit+0xa>
 8000890:	4770      	bx	lr
{
 8000892:	b510      	push	{r4, lr}
 8000894:	b082      	sub	sp, #8
 8000896:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000898:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800089c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800089e:	f042 0201 	orr.w	r2, r2, #1
 80008a2:	659a      	str	r2, [r3, #88]	; 0x58
 80008a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	9301      	str	r3, [sp, #4]
 80008ac:	9b01      	ldr	r3, [sp, #4]

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 80008ae:	4811      	ldr	r0, [pc, #68]	; (80008f4 <HAL_TIM_Base_MspInit+0x6c>)
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <HAL_TIM_Base_MspInit+0x70>)
 80008b2:	6003      	str	r3, [r0, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_4;
 80008b4:	2304      	movs	r3, #4
 80008b6:	6043      	str	r3, [r0, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008b8:	2310      	movs	r3, #16
 80008ba:	6083      	str	r3, [r0, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80008bc:	2300      	movs	r3, #0
 80008be:	60c3      	str	r3, [r0, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80008c0:	2280      	movs	r2, #128	; 0x80
 80008c2:	6102      	str	r2, [r0, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008c8:	6142      	str	r2, [r0, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008ca:	6183      	str	r3, [r0, #24]
    hdma_tim2_ch3.Init.Mode = DMA_CIRCULAR;
 80008cc:	2320      	movs	r3, #32
 80008ce:	61c3      	str	r3, [r0, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 80008d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d4:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 80008d6:	f000 fbfb 	bl	80010d0 <HAL_DMA_Init>
 80008da:	b940      	cbnz	r0, 80008ee <HAL_TIM_Base_MspInit+0x66>
    {
      Error_Handler();
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <HAL_TIM_Base_MspInit+0x6c>)
 80008de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80008e0:	629c      	str	r4, [r3, #40]	; 0x28

  /* USER CODE BEGIN TIM2_MspInit 1 */
    hdma_tim2_ch3.XferCpltCallback  = dma_transfer_complete_handler;
 80008e2:	4a06      	ldr	r2, [pc, #24]	; (80008fc <HAL_TIM_Base_MspInit+0x74>)
 80008e4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch3.XferHalfCpltCallback = dma_transfer_half_handler;
 80008e6:	4a06      	ldr	r2, [pc, #24]	; (8000900 <HAL_TIM_Base_MspInit+0x78>)
 80008e8:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80008ea:	b002      	add	sp, #8
 80008ec:	bd10      	pop	{r4, pc}
      Error_Handler();
 80008ee:	f7ff fe33 	bl	8000558 <Error_Handler>
 80008f2:	e7f3      	b.n	80008dc <HAL_TIM_Base_MspInit+0x54>
 80008f4:	200001e0 	.word	0x200001e0
 80008f8:	40020008 	.word	0x40020008
 80008fc:	08000ec1 	.word	0x08000ec1
 8000900:	08000e75 	.word	0x08000e75

08000904 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000904:	b500      	push	{lr}
 8000906:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	2300      	movs	r3, #0
 800090a:	9303      	str	r3, [sp, #12]
 800090c:	9304      	str	r3, [sp, #16]
 800090e:	9305      	str	r3, [sp, #20]
 8000910:	9306      	str	r3, [sp, #24]
 8000912:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM1)
 8000914:	6803      	ldr	r3, [r0, #0]
 8000916:	4a1b      	ldr	r2, [pc, #108]	; (8000984 <HAL_TIM_MspPostInit+0x80>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d005      	beq.n	8000928 <HAL_TIM_MspPostInit+0x24>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM2)
 800091c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000920:	d019      	beq.n	8000956 <HAL_TIM_MspPostInit+0x52>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000922:	b009      	add	sp, #36	; 0x24
 8000924:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000928:	4b17      	ldr	r3, [pc, #92]	; (8000988 <HAL_TIM_MspPostInit+0x84>)
 800092a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800092c:	f042 0201 	orr.w	r2, r2, #1
 8000930:	64da      	str	r2, [r3, #76]	; 0x4c
 8000932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000934:	f003 0301 	and.w	r3, r3, #1
 8000938:	9301      	str	r3, [sp, #4]
 800093a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800093c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000940:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000946:	2301      	movs	r3, #1
 8000948:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094a:	a903      	add	r1, sp, #12
 800094c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000950:	f000 fc9c 	bl	800128c <HAL_GPIO_Init>
 8000954:	e7e5      	b.n	8000922 <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800095a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800095c:	f042 0201 	orr.w	r2, r2, #1
 8000960:	64da      	str	r2, [r3, #76]	; 0x4c
 8000962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000964:	f003 0301 	and.w	r3, r3, #1
 8000968:	9302      	str	r3, [sp, #8]
 800096a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800096c:	2304      	movs	r3, #4
 800096e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	2302      	movs	r3, #2
 8000972:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000974:	2301      	movs	r3, #1
 8000976:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000978:	a903      	add	r1, sp, #12
 800097a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097e:	f000 fc85 	bl	800128c <HAL_GPIO_Init>
}
 8000982:	e7ce      	b.n	8000922 <HAL_TIM_MspPostInit+0x1e>
 8000984:	40012c00 	.word	0x40012c00
 8000988:	40021000 	.word	0x40021000

0800098c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800098c:	b500      	push	{lr}
 800098e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	2300      	movs	r3, #0
 8000992:	9303      	str	r3, [sp, #12]
 8000994:	9304      	str	r3, [sp, #16]
 8000996:	9305      	str	r3, [sp, #20]
 8000998:	9306      	str	r3, [sp, #24]
 800099a:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 800099c:	6802      	ldr	r2, [r0, #0]
 800099e:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <HAL_UART_MspInit+0x64>)
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d002      	beq.n	80009aa <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009a4:	b009      	add	sp, #36	; 0x24
 80009a6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 80009aa:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80009ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80009b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80009b4:	661a      	str	r2, [r3, #96]	; 0x60
 80009b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80009b8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80009bc:	9201      	str	r2, [sp, #4]
 80009be:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009c2:	f042 0201 	orr.w	r2, r2, #1
 80009c6:	64da      	str	r2, [r3, #76]	; 0x4c
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	9302      	str	r3, [sp, #8]
 80009d0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009d6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	2302      	movs	r3, #2
 80009da:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009dc:	2303      	movs	r3, #3
 80009de:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009e0:	2307      	movs	r3, #7
 80009e2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e4:	a903      	add	r1, sp, #12
 80009e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ea:	f000 fc4f 	bl	800128c <HAL_GPIO_Init>
}
 80009ee:	e7d9      	b.n	80009a4 <HAL_UART_MspInit+0x18>
 80009f0:	40013800 	.word	0x40013800

080009f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f4:	e7fe      	b.n	80009f4 <NMI_Handler>

080009f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f6:	e7fe      	b.n	80009f6 <HardFault_Handler>

080009f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f8:	e7fe      	b.n	80009f8 <MemManage_Handler>

080009fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fa:	e7fe      	b.n	80009fa <BusFault_Handler>

080009fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009fc:	e7fe      	b.n	80009fc <UsageFault_Handler>

080009fe <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009fe:	4770      	bx	lr

08000a00 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a00:	4770      	bx	lr

08000a02 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a02:	4770      	bx	lr

08000a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a04:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a06:	f000 fae7 	bl	8000fd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0a:	bd08      	pop	{r3, pc}

08000a0c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8000a0e:	4802      	ldr	r0, [pc, #8]	; (8000a18 <DMA1_Channel1_IRQHandler+0xc>)
 8000a10:	f000 fbda 	bl	80011c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a14:	bd08      	pop	{r3, pc}
 8000a16:	bf00      	nop
 8000a18:	200001e0 	.word	0x200001e0

08000a1c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8000a1c:	b508      	push	{r3, lr}
 8000a1e:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a20:	4a0b      	ldr	r2, [pc, #44]	; (8000a50 <_sbrk+0x34>)
 8000a22:	6812      	ldr	r2, [r2, #0]
 8000a24:	b142      	cbz	r2, 8000a38 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8000a26:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <_sbrk+0x34>)
 8000a28:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8000a2a:	4403      	add	r3, r0
 8000a2c:	466a      	mov	r2, sp
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d806      	bhi.n	8000a40 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8000a32:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <_sbrk+0x34>)
 8000a34:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8000a36:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8000a38:	4a05      	ldr	r2, [pc, #20]	; (8000a50 <_sbrk+0x34>)
 8000a3a:	4906      	ldr	r1, [pc, #24]	; (8000a54 <_sbrk+0x38>)
 8000a3c:	6011      	str	r1, [r2, #0]
 8000a3e:	e7f2      	b.n	8000a26 <_sbrk+0xa>
		errno = ENOMEM;
 8000a40:	f002 fbe6 	bl	8003210 <__errno>
 8000a44:	230c      	movs	r3, #12
 8000a46:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000a48:	f04f 30ff 	mov.w	r0, #4294967295
 8000a4c:	e7f3      	b.n	8000a36 <_sbrk+0x1a>
 8000a4e:	bf00      	nop
 8000a50:	2000008c 	.word	0x2000008c
 8000a54:	20000418 	.word	0x20000418

08000a58 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a58:	490f      	ldr	r1, [pc, #60]	; (8000a98 <SystemInit+0x40>)
 8000a5a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000a5e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <SystemInit+0x44>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	f042 0201 	orr.w	r2, r2, #1
 8000a6e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a70:	2000      	movs	r0, #0
 8000a72:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8000a7a:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8000a7e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a84:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000a8c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a8e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a94:	608b      	str	r3, [r1, #8]
#endif
}
 8000a96:	4770      	bx	lr
 8000a98:	e000ed00 	.word	0xe000ed00
 8000a9c:	40021000 	.word	0x40021000

08000aa0 <visDots>:
	}
}


void visDots(uint8_t *frameBuffer, uint32_t frame_buffer_size, uint32_t random, uint32_t fadeOutFactor)
{
 8000aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000aa4:	4604      	mov	r4, r0
 8000aa6:	4688      	mov	r8, r1
 8000aa8:	4617      	mov	r7, r2
 8000aaa:	461e      	mov	r6, r3
	uint32_t i;

	for( i = 0; i < frame_buffer_size / 3; i++)
 8000aac:	2500      	movs	r5, #0
 8000aae:	e008      	b.n	8000ac2 <visDots+0x22>


		if(frameBuffer[i*3 + 0] > fadeOutFactor)
			frameBuffer[i*3 + 0] -= frameBuffer[i*3 + 0]/fadeOutFactor;
		else
			frameBuffer[i*3 + 0] = 0;
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	54e2      	strb	r2, [r4, r3]
 8000ab4:	e023      	b.n	8000afe <visDots+0x5e>

		if(frameBuffer[i*3 + 1] > fadeOutFactor)
			frameBuffer[i*3 + 1] -= frameBuffer[i*3 + 1]/fadeOutFactor;
		else
			frameBuffer[i*3 + 1] = 0;
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	5462      	strb	r2, [r4, r1]
 8000aba:	e028      	b.n	8000b0e <visDots+0x6e>

		if(frameBuffer[i*3 + 2] > fadeOutFactor)
			frameBuffer[i*3 + 2] -= frameBuffer[i*3 + 2]/fadeOutFactor;
		else
			frameBuffer[i*3 + 2] = 0;
 8000abc:	2200      	movs	r2, #0
 8000abe:	54e2      	strb	r2, [r4, r3]
	for( i = 0; i < frame_buffer_size / 3; i++)
 8000ac0:	3501      	adds	r5, #1
 8000ac2:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <visDots+0x84>)
 8000ac4:	fba3 2308 	umull	r2, r3, r3, r8
 8000ac8:	ebb5 0f53 	cmp.w	r5, r3, lsr #1
 8000acc:	d228      	bcs.n	8000b20 <visDots+0x80>
		if(rand() % random == 0)
 8000ace:	f002 fbd1 	bl	8003274 <rand>
 8000ad2:	fbb0 f3f7 	udiv	r3, r0, r7
 8000ad6:	fb07 0013 	mls	r0, r7, r3, r0
 8000ada:	b938      	cbnz	r0, 8000aec <visDots+0x4c>
			frameBuffer[i*3 + 0] = 255;
 8000adc:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000ae0:	22ff      	movs	r2, #255	; 0xff
 8000ae2:	54e2      	strb	r2, [r4, r3]
			frameBuffer[i*3 + 1] = 255;
 8000ae4:	1c59      	adds	r1, r3, #1
 8000ae6:	5462      	strb	r2, [r4, r1]
			frameBuffer[i*3 + 2] = 255;
 8000ae8:	3302      	adds	r3, #2
 8000aea:	54e2      	strb	r2, [r4, r3]
		if(frameBuffer[i*3 + 0] > fadeOutFactor)
 8000aec:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000af0:	5ce2      	ldrb	r2, [r4, r3]
 8000af2:	42b2      	cmp	r2, r6
 8000af4:	d9dc      	bls.n	8000ab0 <visDots+0x10>
			frameBuffer[i*3 + 0] -= frameBuffer[i*3 + 0]/fadeOutFactor;
 8000af6:	fbb2 f1f6 	udiv	r1, r2, r6
 8000afa:	1a52      	subs	r2, r2, r1
 8000afc:	54e2      	strb	r2, [r4, r3]
		if(frameBuffer[i*3 + 1] > fadeOutFactor)
 8000afe:	1c59      	adds	r1, r3, #1
 8000b00:	5c62      	ldrb	r2, [r4, r1]
 8000b02:	42b2      	cmp	r2, r6
 8000b04:	d9d7      	bls.n	8000ab6 <visDots+0x16>
			frameBuffer[i*3 + 1] -= frameBuffer[i*3 + 1]/fadeOutFactor;
 8000b06:	fbb2 f0f6 	udiv	r0, r2, r6
 8000b0a:	1a12      	subs	r2, r2, r0
 8000b0c:	5462      	strb	r2, [r4, r1]
		if(frameBuffer[i*3 + 2] > fadeOutFactor)
 8000b0e:	3302      	adds	r3, #2
 8000b10:	5ce2      	ldrb	r2, [r4, r3]
 8000b12:	42b2      	cmp	r2, r6
 8000b14:	d9d2      	bls.n	8000abc <visDots+0x1c>
			frameBuffer[i*3 + 2] -= frameBuffer[i*3 + 2]/fadeOutFactor;
 8000b16:	fbb2 f1f6 	udiv	r1, r2, r6
 8000b1a:	1a52      	subs	r2, r2, r1
 8000b1c:	54e2      	strb	r2, [r4, r3]
 8000b1e:	e7cf      	b.n	8000ac0 <visDots+0x20>
	}
}
 8000b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b24:	aaaaaaab 	.word	0xaaaaaaab

08000b28 <visHandle2>:



void visHandle2()
{
 8000b28:	b508      	push	{r3, lr}
	static uint32_t timestamp;



	if(HAL_GetTick() - timestamp > 10)
 8000b2a:	f000 fa61 	bl	8000ff0 <HAL_GetTick>
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <visHandle2+0x2c>)
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	1ac0      	subs	r0, r0, r3
 8000b34:	280a      	cmp	r0, #10
 8000b36:	d800      	bhi.n	8000b3a <visHandle2+0x12>
				visDots(frameBuffer, sizeof(frameBuffer), 50, 40);
				break;

		}*/
	}
}
 8000b38:	bd08      	pop	{r3, pc}
		timestamp = HAL_GetTick();
 8000b3a:	f000 fa59 	bl	8000ff0 <HAL_GetTick>
 8000b3e:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <visHandle2+0x2c>)
 8000b40:	6058      	str	r0, [r3, #4]
		visDots(frameBuffer, sizeof(frameBuffer), 50, 40);
 8000b42:	2328      	movs	r3, #40	; 0x28
 8000b44:	2232      	movs	r2, #50	; 0x32
 8000b46:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8000b4a:	4803      	ldr	r0, [pc, #12]	; (8000b58 <visHandle2+0x30>)
 8000b4c:	f7ff ffa8 	bl	8000aa0 <visDots>
}
 8000b50:	e7f2      	b.n	8000b38 <visHandle2+0x10>
 8000b52:	bf00      	nop
 8000b54:	20000094 	.word	0x20000094
 8000b58:	2000022c 	.word	0x2000022c

08000b5c <visInit>:


void visInit()
{
 8000b5c:	b508      	push	{r3, lr}
	// Set output channel/pin, GPIO_PIN_0 = 0, for GPIO_PIN_5 = 5 - this has to correspond to WS2812B_PINS
	ws2812b.item[0].channel = 3;
 8000b5e:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <visInit+0x18>)
 8000b60:	2203      	movs	r2, #3
 8000b62:	731a      	strb	r2, [r3, #12]
	// Your RGB framebuffer
	ws2812b.item[0].frame_buffer_pointer = frameBuffer;
 8000b64:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <visInit+0x1c>)
 8000b66:	601a      	str	r2, [r3, #0]
	// RAW size of framebuffer
	ws2812b.item[0].frame_buffer_size = sizeof(frameBuffer);
 8000b68:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8000b6c:	605a      	str	r2, [r3, #4]
	// If you need more parallel LED strips, increase the WS2812_BUFFER_COUNT value
	//ws2812b.item[1].channel = 1;
	//ws2812b.item[1].frame_buffer_pointer = frameBuffer2;
	//ws2812b.item[1].frame_buffer_size = sizeof(frameBuffer2);

	ws2812b_init();
 8000b6e:	f000 f9e9 	bl	8000f44 <ws2812b_init>
}
 8000b72:	bd08      	pop	{r3, pc}
 8000b74:	20000128 	.word	0x20000128
 8000b78:	2000022c 	.word	0x2000022c

08000b7c <visHandle>:


void visHandle()
{
 8000b7c:	b508      	push	{r3, lr}

	if(ws2812b.transfer_complete)
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <visHandle+0x1c>)
 8000b80:	7c1b      	ldrb	r3, [r3, #16]
 8000b82:	b903      	cbnz	r3, 8000b86 <visHandle+0xa>

		// Signal that buffer is changed and transfer new data
		ws2812b.start_transfer = 1;
		ws2812b_handle();
	}
}
 8000b84:	bd08      	pop	{r3, pc}
		visHandle2();
 8000b86:	f7ff ffcf 	bl	8000b28 <visHandle2>
		ws2812b.start_transfer = 1;
 8000b8a:	4b03      	ldr	r3, [pc, #12]	; (8000b98 <visHandle+0x1c>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	745a      	strb	r2, [r3, #17]
		ws2812b_handle();
 8000b90:	f000 f9de 	bl	8000f50 <ws2812b_handle>
}
 8000b94:	e7f6      	b.n	8000b84 <visHandle+0x8>
 8000b96:	bf00      	nop
 8000b98:	20000128 	.word	0x20000128

08000b9c <ws2812b_set_pixel>:
}



static void ws2812b_set_pixel(uint8_t row, uint16_t column, uint8_t red, uint8_t green, uint8_t blue)
{
 8000b9c:	b470      	push	{r4, r5, r6}

	// Apply gamma
	red = gammaTable[red];
 8000b9e:	4d75      	ldr	r5, [pc, #468]	; (8000d74 <ws2812b_set_pixel+0x1d8>)
 8000ba0:	5ca8      	ldrb	r0, [r5, r2]
	green = gammaTable[green];
 8000ba2:	5cec      	ldrb	r4, [r5, r3]
	blue = gammaTable[blue];
 8000ba4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8000ba8:	5cea      	ldrb	r2, [r5, r3]

	uint32_t calculated_column = (column * 24);
 8000baa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000bae:	00cd      	lsls	r5, r1, #3
		dma_bit_buffer[(calculated_column+8+7)] = (((red)<<7) & 0x80) ? compare_pulse_logic_1 : compare_pulse_logic_0;
		dma_bit_buffer[(calculated_column+16+7)] = (((blue)<<7) & 0x80) ? compare_pulse_logic_1 : compare_pulse_logic_0;

#elif defined(SETPIX_3)

		uint8_t *bit_buffer_offset = &dma_bit_buffer[calculated_column];
 8000bb0:	4b71      	ldr	r3, [pc, #452]	; (8000d78 <ws2812b_set_pixel+0x1dc>)
 8000bb2:	442b      	add	r3, r5

		// write new data for pixel
		*bit_buffer_offset++ = (green & 0x80) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000bb4:	f014 0f80 	tst.w	r4, #128	; 0x80
 8000bb8:	f040 8094 	bne.w	8000ce4 <ws2812b_set_pixel+0x148>
 8000bbc:	496f      	ldr	r1, [pc, #444]	; (8000d7c <ws2812b_set_pixel+0x1e0>)
 8000bbe:	780e      	ldrb	r6, [r1, #0]
 8000bc0:	496d      	ldr	r1, [pc, #436]	; (8000d78 <ws2812b_set_pixel+0x1dc>)
 8000bc2:	554e      	strb	r6, [r1, r5]
		*bit_buffer_offset++ = (green & 0x40) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000bc4:	f014 0f40 	tst.w	r4, #64	; 0x40
 8000bc8:	f000 808f 	beq.w	8000cea <ws2812b_set_pixel+0x14e>
 8000bcc:	496c      	ldr	r1, [pc, #432]	; (8000d80 <ws2812b_set_pixel+0x1e4>)
 8000bce:	7809      	ldrb	r1, [r1, #0]
 8000bd0:	7059      	strb	r1, [r3, #1]
		*bit_buffer_offset++ = (green & 0x20) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000bd2:	f014 0f20 	tst.w	r4, #32
 8000bd6:	f000 808b 	beq.w	8000cf0 <ws2812b_set_pixel+0x154>
 8000bda:	4969      	ldr	r1, [pc, #420]	; (8000d80 <ws2812b_set_pixel+0x1e4>)
 8000bdc:	7809      	ldrb	r1, [r1, #0]
 8000bde:	7099      	strb	r1, [r3, #2]
		*bit_buffer_offset++ = (green & 0x10) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000be0:	f014 0f10 	tst.w	r4, #16
 8000be4:	f000 8087 	beq.w	8000cf6 <ws2812b_set_pixel+0x15a>
 8000be8:	4965      	ldr	r1, [pc, #404]	; (8000d80 <ws2812b_set_pixel+0x1e4>)
 8000bea:	7809      	ldrb	r1, [r1, #0]
 8000bec:	70d9      	strb	r1, [r3, #3]
		*bit_buffer_offset++ = (green & 0x08) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000bee:	f014 0f08 	tst.w	r4, #8
 8000bf2:	f000 8083 	beq.w	8000cfc <ws2812b_set_pixel+0x160>
 8000bf6:	4962      	ldr	r1, [pc, #392]	; (8000d80 <ws2812b_set_pixel+0x1e4>)
 8000bf8:	7809      	ldrb	r1, [r1, #0]
 8000bfa:	7119      	strb	r1, [r3, #4]
		*bit_buffer_offset++ = (green & 0x04) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000bfc:	f014 0f04 	tst.w	r4, #4
 8000c00:	d07f      	beq.n	8000d02 <ws2812b_set_pixel+0x166>
 8000c02:	495f      	ldr	r1, [pc, #380]	; (8000d80 <ws2812b_set_pixel+0x1e4>)
 8000c04:	7809      	ldrb	r1, [r1, #0]
 8000c06:	7159      	strb	r1, [r3, #5]
		*bit_buffer_offset++ = (green & 0x02) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000c08:	f014 0f02 	tst.w	r4, #2
 8000c0c:	d07c      	beq.n	8000d08 <ws2812b_set_pixel+0x16c>
 8000c0e:	495c      	ldr	r1, [pc, #368]	; (8000d80 <ws2812b_set_pixel+0x1e4>)
 8000c10:	7809      	ldrb	r1, [r1, #0]
 8000c12:	7199      	strb	r1, [r3, #6]
		*bit_buffer_offset++ = (green & 0x01) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000c14:	f014 0f01 	tst.w	r4, #1
 8000c18:	d079      	beq.n	8000d0e <ws2812b_set_pixel+0x172>
 8000c1a:	4959      	ldr	r1, [pc, #356]	; (8000d80 <ws2812b_set_pixel+0x1e4>)
 8000c1c:	7809      	ldrb	r1, [r1, #0]
 8000c1e:	71d9      	strb	r1, [r3, #7]

		*bit_buffer_offset++ = (red & 0x80) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000c20:	f010 0f80 	tst.w	r0, #128	; 0x80
 8000c24:	d176      	bne.n	8000d14 <ws2812b_set_pixel+0x178>
 8000c26:	4955      	ldr	r1, [pc, #340]	; (8000d7c <ws2812b_set_pixel+0x1e0>)
 8000c28:	7809      	ldrb	r1, [r1, #0]
 8000c2a:	7219      	strb	r1, [r3, #8]
		*bit_buffer_offset++ = (red & 0x40) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000c2c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000c30:	d073      	beq.n	8000d1a <ws2812b_set_pixel+0x17e>
 8000c32:	4953      	ldr	r1, [pc, #332]	; (8000d80 <ws2812b_set_pixel+0x1e4>)
 8000c34:	7809      	ldrb	r1, [r1, #0]
 8000c36:	7259      	strb	r1, [r3, #9]
		*bit_buffer_offset++ = (red & 0x20) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000c38:	f010 0f20 	tst.w	r0, #32
 8000c3c:	d070      	beq.n	8000d20 <ws2812b_set_pixel+0x184>
 8000c3e:	4950      	ldr	r1, [pc, #320]	; (8000d80 <ws2812b_set_pixel+0x1e4>)
 8000c40:	7809      	ldrb	r1, [r1, #0]
 8000c42:	7299      	strb	r1, [r3, #10]
		*bit_buffer_offset++ = (red & 0x10) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000c44:	f010 0f10 	tst.w	r0, #16
 8000c48:	d06d      	beq.n	8000d26 <ws2812b_set_pixel+0x18a>
 8000c4a:	494d      	ldr	r1, [pc, #308]	; (8000d80 <ws2812b_set_pixel+0x1e4>)
 8000c4c:	7809      	ldrb	r1, [r1, #0]
 8000c4e:	72d9      	strb	r1, [r3, #11]
		*bit_buffer_offset++ = (red & 0x08) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000c50:	f010 0f08 	tst.w	r0, #8
 8000c54:	d06a      	beq.n	8000d2c <ws2812b_set_pixel+0x190>
 8000c56:	494a      	ldr	r1, [pc, #296]	; (8000d80 <ws2812b_set_pixel+0x1e4>)
 8000c58:	7809      	ldrb	r1, [r1, #0]
 8000c5a:	7319      	strb	r1, [r3, #12]
		*bit_buffer_offset++ = (red & 0x04) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000c5c:	f010 0f04 	tst.w	r0, #4
 8000c60:	d067      	beq.n	8000d32 <ws2812b_set_pixel+0x196>
 8000c62:	4947      	ldr	r1, [pc, #284]	; (8000d80 <ws2812b_set_pixel+0x1e4>)
 8000c64:	7809      	ldrb	r1, [r1, #0]
 8000c66:	7359      	strb	r1, [r3, #13]
		*bit_buffer_offset++ = (red & 0x02) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000c68:	f010 0f02 	tst.w	r0, #2
 8000c6c:	d064      	beq.n	8000d38 <ws2812b_set_pixel+0x19c>
 8000c6e:	4944      	ldr	r1, [pc, #272]	; (8000d80 <ws2812b_set_pixel+0x1e4>)
 8000c70:	7809      	ldrb	r1, [r1, #0]
 8000c72:	7399      	strb	r1, [r3, #14]
		*bit_buffer_offset++ = (red & 0x01) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000c74:	f010 0f01 	tst.w	r0, #1
 8000c78:	d061      	beq.n	8000d3e <ws2812b_set_pixel+0x1a2>
 8000c7a:	4941      	ldr	r1, [pc, #260]	; (8000d80 <ws2812b_set_pixel+0x1e4>)
 8000c7c:	7809      	ldrb	r1, [r1, #0]
 8000c7e:	73d9      	strb	r1, [r3, #15]

		*bit_buffer_offset++ = (blue & 0x80) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000c80:	f012 0f80 	tst.w	r2, #128	; 0x80
 8000c84:	d15e      	bne.n	8000d44 <ws2812b_set_pixel+0x1a8>
 8000c86:	493d      	ldr	r1, [pc, #244]	; (8000d7c <ws2812b_set_pixel+0x1e0>)
 8000c88:	7809      	ldrb	r1, [r1, #0]
 8000c8a:	7419      	strb	r1, [r3, #16]
		*bit_buffer_offset++ = (blue & 0x40) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000c8c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8000c90:	d05b      	beq.n	8000d4a <ws2812b_set_pixel+0x1ae>
 8000c92:	493b      	ldr	r1, [pc, #236]	; (8000d80 <ws2812b_set_pixel+0x1e4>)
 8000c94:	7809      	ldrb	r1, [r1, #0]
 8000c96:	7459      	strb	r1, [r3, #17]
		*bit_buffer_offset++ = (blue & 0x20) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000c98:	f012 0f20 	tst.w	r2, #32
 8000c9c:	d058      	beq.n	8000d50 <ws2812b_set_pixel+0x1b4>
 8000c9e:	4938      	ldr	r1, [pc, #224]	; (8000d80 <ws2812b_set_pixel+0x1e4>)
 8000ca0:	7809      	ldrb	r1, [r1, #0]
 8000ca2:	7499      	strb	r1, [r3, #18]
		*bit_buffer_offset++ = (blue & 0x10) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000ca4:	f012 0f10 	tst.w	r2, #16
 8000ca8:	d055      	beq.n	8000d56 <ws2812b_set_pixel+0x1ba>
 8000caa:	4935      	ldr	r1, [pc, #212]	; (8000d80 <ws2812b_set_pixel+0x1e4>)
 8000cac:	7809      	ldrb	r1, [r1, #0]
 8000cae:	74d9      	strb	r1, [r3, #19]
		*bit_buffer_offset++ = (blue & 0x08) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000cb0:	f012 0f08 	tst.w	r2, #8
 8000cb4:	d052      	beq.n	8000d5c <ws2812b_set_pixel+0x1c0>
 8000cb6:	4932      	ldr	r1, [pc, #200]	; (8000d80 <ws2812b_set_pixel+0x1e4>)
 8000cb8:	7809      	ldrb	r1, [r1, #0]
 8000cba:	7519      	strb	r1, [r3, #20]
		*bit_buffer_offset++ = (blue & 0x04) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000cbc:	f012 0f04 	tst.w	r2, #4
 8000cc0:	d04f      	beq.n	8000d62 <ws2812b_set_pixel+0x1c6>
 8000cc2:	492f      	ldr	r1, [pc, #188]	; (8000d80 <ws2812b_set_pixel+0x1e4>)
 8000cc4:	7809      	ldrb	r1, [r1, #0]
 8000cc6:	7559      	strb	r1, [r3, #21]
		*bit_buffer_offset++ = (blue & 0x02) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000cc8:	f012 0f02 	tst.w	r2, #2
 8000ccc:	d04c      	beq.n	8000d68 <ws2812b_set_pixel+0x1cc>
 8000cce:	492c      	ldr	r1, [pc, #176]	; (8000d80 <ws2812b_set_pixel+0x1e4>)
 8000cd0:	7809      	ldrb	r1, [r1, #0]
 8000cd2:	7599      	strb	r1, [r3, #22]
		*bit_buffer_offset++ = (blue & 0x01) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000cd4:	f012 0f01 	tst.w	r2, #1
 8000cd8:	d149      	bne.n	8000d6e <ws2812b_set_pixel+0x1d2>
 8000cda:	4a28      	ldr	r2, [pc, #160]	; (8000d7c <ws2812b_set_pixel+0x1e0>)
 8000cdc:	7812      	ldrb	r2, [r2, #0]
 8000cde:	75da      	strb	r2, [r3, #23]

#endif
}
 8000ce0:	bc70      	pop	{r4, r5, r6}
 8000ce2:	4770      	bx	lr
		*bit_buffer_offset++ = (green & 0x80) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000ce4:	4926      	ldr	r1, [pc, #152]	; (8000d80 <ws2812b_set_pixel+0x1e4>)
 8000ce6:	780e      	ldrb	r6, [r1, #0]
 8000ce8:	e76a      	b.n	8000bc0 <ws2812b_set_pixel+0x24>
		*bit_buffer_offset++ = (green & 0x40) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000cea:	4924      	ldr	r1, [pc, #144]	; (8000d7c <ws2812b_set_pixel+0x1e0>)
 8000cec:	7809      	ldrb	r1, [r1, #0]
 8000cee:	e76f      	b.n	8000bd0 <ws2812b_set_pixel+0x34>
		*bit_buffer_offset++ = (green & 0x20) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000cf0:	4922      	ldr	r1, [pc, #136]	; (8000d7c <ws2812b_set_pixel+0x1e0>)
 8000cf2:	7809      	ldrb	r1, [r1, #0]
 8000cf4:	e773      	b.n	8000bde <ws2812b_set_pixel+0x42>
		*bit_buffer_offset++ = (green & 0x10) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000cf6:	4921      	ldr	r1, [pc, #132]	; (8000d7c <ws2812b_set_pixel+0x1e0>)
 8000cf8:	7809      	ldrb	r1, [r1, #0]
 8000cfa:	e777      	b.n	8000bec <ws2812b_set_pixel+0x50>
		*bit_buffer_offset++ = (green & 0x08) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000cfc:	491f      	ldr	r1, [pc, #124]	; (8000d7c <ws2812b_set_pixel+0x1e0>)
 8000cfe:	7809      	ldrb	r1, [r1, #0]
 8000d00:	e77b      	b.n	8000bfa <ws2812b_set_pixel+0x5e>
		*bit_buffer_offset++ = (green & 0x04) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d02:	491e      	ldr	r1, [pc, #120]	; (8000d7c <ws2812b_set_pixel+0x1e0>)
 8000d04:	7809      	ldrb	r1, [r1, #0]
 8000d06:	e77e      	b.n	8000c06 <ws2812b_set_pixel+0x6a>
		*bit_buffer_offset++ = (green & 0x02) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d08:	491c      	ldr	r1, [pc, #112]	; (8000d7c <ws2812b_set_pixel+0x1e0>)
 8000d0a:	7809      	ldrb	r1, [r1, #0]
 8000d0c:	e781      	b.n	8000c12 <ws2812b_set_pixel+0x76>
		*bit_buffer_offset++ = (green & 0x01) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d0e:	491b      	ldr	r1, [pc, #108]	; (8000d7c <ws2812b_set_pixel+0x1e0>)
 8000d10:	7809      	ldrb	r1, [r1, #0]
 8000d12:	e784      	b.n	8000c1e <ws2812b_set_pixel+0x82>
		*bit_buffer_offset++ = (red & 0x80) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d14:	491a      	ldr	r1, [pc, #104]	; (8000d80 <ws2812b_set_pixel+0x1e4>)
 8000d16:	7809      	ldrb	r1, [r1, #0]
 8000d18:	e787      	b.n	8000c2a <ws2812b_set_pixel+0x8e>
		*bit_buffer_offset++ = (red & 0x40) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d1a:	4918      	ldr	r1, [pc, #96]	; (8000d7c <ws2812b_set_pixel+0x1e0>)
 8000d1c:	7809      	ldrb	r1, [r1, #0]
 8000d1e:	e78a      	b.n	8000c36 <ws2812b_set_pixel+0x9a>
		*bit_buffer_offset++ = (red & 0x20) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d20:	4916      	ldr	r1, [pc, #88]	; (8000d7c <ws2812b_set_pixel+0x1e0>)
 8000d22:	7809      	ldrb	r1, [r1, #0]
 8000d24:	e78d      	b.n	8000c42 <ws2812b_set_pixel+0xa6>
		*bit_buffer_offset++ = (red & 0x10) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d26:	4915      	ldr	r1, [pc, #84]	; (8000d7c <ws2812b_set_pixel+0x1e0>)
 8000d28:	7809      	ldrb	r1, [r1, #0]
 8000d2a:	e790      	b.n	8000c4e <ws2812b_set_pixel+0xb2>
		*bit_buffer_offset++ = (red & 0x08) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d2c:	4913      	ldr	r1, [pc, #76]	; (8000d7c <ws2812b_set_pixel+0x1e0>)
 8000d2e:	7809      	ldrb	r1, [r1, #0]
 8000d30:	e793      	b.n	8000c5a <ws2812b_set_pixel+0xbe>
		*bit_buffer_offset++ = (red & 0x04) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d32:	4912      	ldr	r1, [pc, #72]	; (8000d7c <ws2812b_set_pixel+0x1e0>)
 8000d34:	7809      	ldrb	r1, [r1, #0]
 8000d36:	e796      	b.n	8000c66 <ws2812b_set_pixel+0xca>
		*bit_buffer_offset++ = (red & 0x02) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d38:	4910      	ldr	r1, [pc, #64]	; (8000d7c <ws2812b_set_pixel+0x1e0>)
 8000d3a:	7809      	ldrb	r1, [r1, #0]
 8000d3c:	e799      	b.n	8000c72 <ws2812b_set_pixel+0xd6>
		*bit_buffer_offset++ = (red & 0x01) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d3e:	490f      	ldr	r1, [pc, #60]	; (8000d7c <ws2812b_set_pixel+0x1e0>)
 8000d40:	7809      	ldrb	r1, [r1, #0]
 8000d42:	e79c      	b.n	8000c7e <ws2812b_set_pixel+0xe2>
		*bit_buffer_offset++ = (blue & 0x80) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d44:	490e      	ldr	r1, [pc, #56]	; (8000d80 <ws2812b_set_pixel+0x1e4>)
 8000d46:	7809      	ldrb	r1, [r1, #0]
 8000d48:	e79f      	b.n	8000c8a <ws2812b_set_pixel+0xee>
		*bit_buffer_offset++ = (blue & 0x40) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d4a:	490c      	ldr	r1, [pc, #48]	; (8000d7c <ws2812b_set_pixel+0x1e0>)
 8000d4c:	7809      	ldrb	r1, [r1, #0]
 8000d4e:	e7a2      	b.n	8000c96 <ws2812b_set_pixel+0xfa>
		*bit_buffer_offset++ = (blue & 0x20) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d50:	490a      	ldr	r1, [pc, #40]	; (8000d7c <ws2812b_set_pixel+0x1e0>)
 8000d52:	7809      	ldrb	r1, [r1, #0]
 8000d54:	e7a5      	b.n	8000ca2 <ws2812b_set_pixel+0x106>
		*bit_buffer_offset++ = (blue & 0x10) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d56:	4909      	ldr	r1, [pc, #36]	; (8000d7c <ws2812b_set_pixel+0x1e0>)
 8000d58:	7809      	ldrb	r1, [r1, #0]
 8000d5a:	e7a8      	b.n	8000cae <ws2812b_set_pixel+0x112>
		*bit_buffer_offset++ = (blue & 0x08) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d5c:	4907      	ldr	r1, [pc, #28]	; (8000d7c <ws2812b_set_pixel+0x1e0>)
 8000d5e:	7809      	ldrb	r1, [r1, #0]
 8000d60:	e7ab      	b.n	8000cba <ws2812b_set_pixel+0x11e>
		*bit_buffer_offset++ = (blue & 0x04) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d62:	4906      	ldr	r1, [pc, #24]	; (8000d7c <ws2812b_set_pixel+0x1e0>)
 8000d64:	7809      	ldrb	r1, [r1, #0]
 8000d66:	e7ae      	b.n	8000cc6 <ws2812b_set_pixel+0x12a>
		*bit_buffer_offset++ = (blue & 0x02) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d68:	4904      	ldr	r1, [pc, #16]	; (8000d7c <ws2812b_set_pixel+0x1e0>)
 8000d6a:	7809      	ldrb	r1, [r1, #0]
 8000d6c:	e7b1      	b.n	8000cd2 <ws2812b_set_pixel+0x136>
		*bit_buffer_offset++ = (blue & 0x01) ? compare_pulse_logic_1 : compare_pulse_logic_0;
 8000d6e:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <ws2812b_set_pixel+0x1e4>)
 8000d70:	7812      	ldrb	r2, [r2, #0]
 8000d72:	e7b4      	b.n	8000cde <ws2812b_set_pixel+0x142>
 8000d74:	08003428 	.word	0x08003428
 8000d78:	200003dc 	.word	0x200003dc
 8000d7c:	200000a4 	.word	0x200000a4
 8000d80:	20000144 	.word	0x20000144

08000d84 <load_next_framebuffer_data>:
{
 8000d84:	b570      	push	{r4, r5, r6, lr}
 8000d86:	b082      	sub	sp, #8
	uint32_t r = buffer_item->frame_buffer_pointer[buffer_item->frame_buffer_counter++];
 8000d88:	6805      	ldr	r5, [r0, #0]
 8000d8a:	6882      	ldr	r2, [r0, #8]
 8000d8c:	1c53      	adds	r3, r2, #1
 8000d8e:	6083      	str	r3, [r0, #8]
 8000d90:	5caa      	ldrb	r2, [r5, r2]
	uint32_t g = buffer_item->frame_buffer_pointer[buffer_item->frame_buffer_counter++];
 8000d92:	1c5c      	adds	r4, r3, #1
 8000d94:	6084      	str	r4, [r0, #8]
 8000d96:	5ceb      	ldrb	r3, [r5, r3]
	uint32_t b = buffer_item->frame_buffer_pointer[buffer_item->frame_buffer_counter++];
 8000d98:	1c66      	adds	r6, r4, #1
 8000d9a:	6086      	str	r6, [r0, #8]
 8000d9c:	5d2c      	ldrb	r4, [r5, r4]
	if(buffer_item->frame_buffer_counter == buffer_item->frame_buffer_size)
 8000d9e:	6845      	ldr	r5, [r0, #4]
 8000da0:	42ae      	cmp	r6, r5
 8000da2:	d006      	beq.n	8000db2 <load_next_framebuffer_data+0x2e>
	ws2812b_set_pixel(buffer_item->channel, row, r, g, b);
 8000da4:	7b00      	ldrb	r0, [r0, #12]
 8000da6:	9400      	str	r4, [sp, #0]
 8000da8:	b289      	uxth	r1, r1
 8000daa:	f7ff fef7 	bl	8000b9c <ws2812b_set_pixel>
}
 8000dae:	b002      	add	sp, #8
 8000db0:	bd70      	pop	{r4, r5, r6, pc}
		buffer_item->frame_buffer_counter = 0;
 8000db2:	2500      	movs	r5, #0
 8000db4:	6085      	str	r5, [r0, #8]
 8000db6:	e7f5      	b.n	8000da4 <load_next_framebuffer_data+0x20>

08000db8 <ws2812b_send>:
{
 8000db8:	b538      	push	{r3, r4, r5, lr}
	ws2812b.transfer_complete = 0;
 8000dba:	2400      	movs	r4, #0
 8000dbc:	4b26      	ldr	r3, [pc, #152]	; (8000e58 <ws2812b_send+0xa0>)
 8000dbe:	741c      	strb	r4, [r3, #16]
	for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8000dc0:	2c00      	cmp	r4, #0
 8000dc2:	d036      	beq.n	8000e32 <ws2812b_send+0x7a>
	HAL_TIM_Base_Stop(&htim2);
 8000dc4:	4c25      	ldr	r4, [pc, #148]	; (8000e5c <ws2812b_send+0xa4>)
 8000dc6:	4620      	mov	r0, r4
 8000dc8:	f001 fb87 	bl	80024da <HAL_TIM_Base_Stop>
	(&htim2)->Instance->CR1 &= ~((0x1U << (0U)));
 8000dcc:	6822      	ldr	r2, [r4, #0]
 8000dce:	6813      	ldr	r3, [r2, #0]
 8000dd0:	f023 0301 	bic.w	r3, r3, #1
 8000dd4:	6013      	str	r3, [r2, #0]
	__HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch3, DMA_FLAG_TC2 | DMA_FLAG_HT2 | DMA_FLAG_TE2);
 8000dd6:	4b22      	ldr	r3, [pc, #136]	; (8000e60 <ws2812b_send+0xa8>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a22      	ldr	r2, [pc, #136]	; (8000e64 <ws2812b_send+0xac>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d836      	bhi.n	8000e4e <ws2812b_send+0x96>
 8000de0:	4a21      	ldr	r2, [pc, #132]	; (8000e68 <ws2812b_send+0xb0>)
 8000de2:	21e0      	movs	r1, #224	; 0xe0
 8000de4:	6051      	str	r1, [r2, #4]
	hdma_tim2_ch3.Instance->CNDTR = BUFFER_SIZE;
 8000de6:	2230      	movs	r2, #48	; 0x30
 8000de8:	605a      	str	r2, [r3, #4]
	__HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE | TIM_FLAG_CC1 | TIM_FLAG_CC2 | TIM_FLAG_CC3 | TIM_FLAG_CC4);
 8000dea:	491c      	ldr	r1, [pc, #112]	; (8000e5c <ws2812b_send+0xa4>)
 8000dec:	680a      	ldr	r2, [r1, #0]
 8000dee:	f06f 001f 	mvn.w	r0, #31
 8000df2:	6110      	str	r0, [r2, #16]
	__HAL_DMA_ENABLE(&hdma_tim2_ch3);
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	f042 0201 	orr.w	r2, r2, #1
 8000dfa:	601a      	str	r2, [r3, #0]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_UPDATE);
 8000dfc:	680b      	ldr	r3, [r1, #0]
 8000dfe:	68da      	ldr	r2, [r3, #12]
 8000e00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e04:	60da      	str	r2, [r3, #12]
	TIM2->CNT = timer_period-1;
 8000e06:	4a19      	ldr	r2, [pc, #100]	; (8000e6c <ws2812b_send+0xb4>)
 8000e08:	6812      	ldr	r2, [r2, #0]
 8000e0a:	3a01      	subs	r2, #1
 8000e0c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000e10:	624a      	str	r2, [r1, #36]	; 0x24
	TIM2->CCR1 = 0;
 8000e12:	2200      	movs	r2, #0
 8000e14:	634a      	str	r2, [r1, #52]	; 0x34
	(&htim2)->Instance->CCMR2 |= (1 << 5);
 8000e16:	69da      	ldr	r2, [r3, #28]
 8000e18:	f042 0220 	orr.w	r2, r2, #32
 8000e1c:	61da      	str	r2, [r3, #28]
	__HAL_DBGMCU_FREEZE_TIM2();
 8000e1e:	4914      	ldr	r1, [pc, #80]	; (8000e70 <ws2812b_send+0xb8>)
 8000e20:	688a      	ldr	r2, [r1, #8]
 8000e22:	f042 0201 	orr.w	r2, r2, #1
 8000e26:	608a      	str	r2, [r1, #8]
	__HAL_TIM_ENABLE(&htim2);
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	f042 0201 	orr.w	r2, r2, #1
 8000e2e:	601a      	str	r2, [r3, #0]
}
 8000e30:	bd38      	pop	{r3, r4, r5, pc}
		ws2812b.item[i].frame_buffer_counter = 0;
 8000e32:	4d09      	ldr	r5, [pc, #36]	; (8000e58 <ws2812b_send+0xa0>)
 8000e34:	eb05 1504 	add.w	r5, r5, r4, lsl #4
 8000e38:	2100      	movs	r1, #0
 8000e3a:	60a9      	str	r1, [r5, #8]
		load_next_framebuffer_data(&ws2812b.item[i], 0); // ROW 0
 8000e3c:	4628      	mov	r0, r5
 8000e3e:	f7ff ffa1 	bl	8000d84 <load_next_framebuffer_data>
		load_next_framebuffer_data(&ws2812b.item[i], 1); // ROW 0
 8000e42:	2101      	movs	r1, #1
 8000e44:	4628      	mov	r0, r5
 8000e46:	f7ff ff9d 	bl	8000d84 <load_next_framebuffer_data>
	for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8000e4a:	3401      	adds	r4, #1
 8000e4c:	e7b8      	b.n	8000dc0 <ws2812b_send+0x8>
	__HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch3, DMA_FLAG_TC2 | DMA_FLAG_HT2 | DMA_FLAG_TE2);
 8000e4e:	f502 7260 	add.w	r2, r2, #896	; 0x380
 8000e52:	21e0      	movs	r1, #224	; 0xe0
 8000e54:	6051      	str	r1, [r2, #4]
 8000e56:	e7c6      	b.n	8000de6 <ws2812b_send+0x2e>
 8000e58:	20000128 	.word	0x20000128
 8000e5c:	20000194 	.word	0x20000194
 8000e60:	200001e0 	.word	0x200001e0
 8000e64:	40020080 	.word	0x40020080
 8000e68:	40020000 	.word	0x40020000
 8000e6c:	20000228 	.word	0x20000228
 8000e70:	e0042000 	.word	0xe0042000

08000e74 <dma_transfer_half_handler>:
{
 8000e74:	b510      	push	{r4, lr}
 8000e76:	b082      	sub	sp, #8
		LED4_PORT->BSRR = LED4_PIN;
 8000e78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	619a      	str	r2, [r3, #24]
	if(ws2812b.repeat_counter != (WS2812B_NUMBER_OF_LEDS / 2 - 1))
 8000e80:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <dma_transfer_half_handler+0x48>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	2b47      	cmp	r3, #71	; 0x47
 8000e86:	d010      	beq.n	8000eaa <dma_transfer_half_handler+0x36>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8000e88:	2400      	movs	r4, #0
 8000e8a:	e006      	b.n	8000e9a <dma_transfer_half_handler+0x26>
			load_next_framebuffer_data(&ws2812b.item[i], 0);
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	480b      	ldr	r0, [pc, #44]	; (8000ebc <dma_transfer_half_handler+0x48>)
 8000e90:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8000e94:	f7ff ff76 	bl	8000d84 <load_next_framebuffer_data>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8000e98:	3401      	adds	r4, #1
 8000e9a:	2c00      	cmp	r4, #0
 8000e9c:	d0f6      	beq.n	8000e8c <dma_transfer_half_handler+0x18>
		LED4_PORT->BRR = LED4_PIN;
 8000e9e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ea2:	2202      	movs	r2, #2
 8000ea4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ea6:	b002      	add	sp, #8
 8000ea8:	bd10      	pop	{r4, pc}
		ws2812b_set_pixel(0, 0, 0, 0, 0);
 8000eaa:	2000      	movs	r0, #0
 8000eac:	9000      	str	r0, [sp, #0]
 8000eae:	4603      	mov	r3, r0
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	4601      	mov	r1, r0
 8000eb4:	f7ff fe72 	bl	8000b9c <ws2812b_set_pixel>
 8000eb8:	e7f1      	b.n	8000e9e <dma_transfer_half_handler+0x2a>
 8000eba:	bf00      	nop
 8000ebc:	20000128 	.word	0x20000128

08000ec0 <dma_transfer_complete_handler>:
		LED5_PORT->BSRR = LED5_PIN;
 8000ec0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	619a      	str	r2, [r3, #24]
	ws2812b.repeat_counter++;
 8000ec8:	4a1b      	ldr	r2, [pc, #108]	; (8000f38 <dma_transfer_complete_handler+0x78>)
 8000eca:	6993      	ldr	r3, [r2, #24]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	6193      	str	r3, [r2, #24]
	if(ws2812b.repeat_counter == WS2812B_NUMBER_OF_LEDS / 2)
 8000ed0:	2b48      	cmp	r3, #72	; 0x48
 8000ed2:	d002      	beq.n	8000eda <dma_transfer_complete_handler+0x1a>
{
 8000ed4:	b510      	push	{r4, lr}
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8000ed6:	2400      	movs	r4, #0
 8000ed8:	e027      	b.n	8000f2a <dma_transfer_complete_handler+0x6a>
		ws2812b.repeat_counter = 0;
 8000eda:	4613      	mov	r3, r2
 8000edc:	2200      	movs	r2, #0
 8000ede:	619a      	str	r2, [r3, #24]
		(&htim2)->Instance->CCMR1 &= ~((1 << 4) | (1 << 5));
 8000ee0:	4916      	ldr	r1, [pc, #88]	; (8000f3c <dma_transfer_complete_handler+0x7c>)
 8000ee2:	680b      	ldr	r3, [r1, #0]
 8000ee4:	699a      	ldr	r2, [r3, #24]
 8000ee6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8000eea:	619a      	str	r2, [r3, #24]
		(&htim2)->Instance->CCMR1 |= (1 << 6);
 8000eec:	699a      	ldr	r2, [r3, #24]
 8000eee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ef2:	619a      	str	r2, [r3, #24]
		__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 8000ef4:	68da      	ldr	r2, [r3, #12]
 8000ef6:	f042 0201 	orr.w	r2, r2, #1
 8000efa:	60da      	str	r2, [r3, #12]
		__HAL_DMA_DISABLE(&hdma_tim2_ch3);
 8000efc:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <dma_transfer_complete_handler+0x80>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	6813      	ldr	r3, [r2, #0]
 8000f02:	f023 0301 	bic.w	r3, r3, #1
 8000f06:	6013      	str	r3, [r2, #0]
		__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_UPDATE);
 8000f08:	680a      	ldr	r2, [r1, #0]
 8000f0a:	68d3      	ldr	r3, [r2, #12]
 8000f0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f10:	60d3      	str	r3, [r2, #12]
		LED5_PORT->BRR = LED5_PIN;
 8000f12:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f16:	2202      	movs	r2, #2
 8000f18:	629a      	str	r2, [r3, #40]	; 0x28
 8000f1a:	4770      	bx	lr
			load_next_framebuffer_data(&ws2812b.item[i], 1);
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	4806      	ldr	r0, [pc, #24]	; (8000f38 <dma_transfer_complete_handler+0x78>)
 8000f20:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8000f24:	f7ff ff2e 	bl	8000d84 <load_next_framebuffer_data>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8000f28:	3401      	adds	r4, #1
 8000f2a:	2c00      	cmp	r4, #0
 8000f2c:	d0f6      	beq.n	8000f1c <dma_transfer_complete_handler+0x5c>
		LED5_PORT->BRR = LED5_PIN;
 8000f2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f32:	2202      	movs	r2, #2
 8000f34:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f36:	bd10      	pop	{r4, pc}
 8000f38:	20000128 	.word	0x20000128
 8000f3c:	20000194 	.word	0x20000194
 8000f40:	200001e0 	.word	0x200001e0

08000f44 <ws2812b_init>:
//	ws2812b_gpio_init();
//	dma_init();
//	tim2_init();

	// Need to start the first transfer
	ws2812b.transfer_complete = 1;
 8000f44:	4b01      	ldr	r3, [pc, #4]	; (8000f4c <ws2812b_init+0x8>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	741a      	strb	r2, [r3, #16]
}
 8000f4a:	4770      	bx	lr
 8000f4c:	20000128 	.word	0x20000128

08000f50 <ws2812b_handle>:


void ws2812b_handle()
{
 8000f50:	b508      	push	{r3, lr}
	if(ws2812b.start_transfer) {
 8000f52:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <ws2812b_handle+0x18>)
 8000f54:	7c5b      	ldrb	r3, [r3, #17]
 8000f56:	b903      	cbnz	r3, 8000f5a <ws2812b_handle+0xa>
		ws2812b.start_transfer = 0;
		ws2812b_send();
	}

}
 8000f58:	bd08      	pop	{r3, pc}
		ws2812b.start_transfer = 0;
 8000f5a:	4b03      	ldr	r3, [pc, #12]	; (8000f68 <ws2812b_handle+0x18>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	745a      	strb	r2, [r3, #17]
		ws2812b_send();
 8000f60:	f7ff ff2a 	bl	8000db8 <ws2812b_send>
}
 8000f64:	e7f8      	b.n	8000f58 <ws2812b_handle+0x8>
 8000f66:	bf00      	nop
 8000f68:	20000128 	.word	0x20000128

08000f6c <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f6c:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <HAL_InitTick+0x44>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	b90b      	cbnz	r3, 8000f76 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f72:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000f74:	4770      	bx	lr
{
 8000f76:	b510      	push	{r4, lr}
 8000f78:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f82:	4a0c      	ldr	r2, [pc, #48]	; (8000fb4 <HAL_InitTick+0x48>)
 8000f84:	6810      	ldr	r0, [r2, #0]
 8000f86:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f8a:	f000 f88b 	bl	80010a4 <HAL_SYSTICK_Config>
 8000f8e:	b968      	cbnz	r0, 8000fac <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f90:	2c0f      	cmp	r4, #15
 8000f92:	d901      	bls.n	8000f98 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8000f94:	2001      	movs	r0, #1
 8000f96:	e00a      	b.n	8000fae <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	4621      	mov	r1, r4
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa0:	f000 f83e 	bl	8001020 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fa4:	4b02      	ldr	r3, [pc, #8]	; (8000fb0 <HAL_InitTick+0x44>)
 8000fa6:	605c      	str	r4, [r3, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa8:	2000      	movs	r0, #0
 8000faa:	e000      	b.n	8000fae <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8000fac:	2001      	movs	r0, #1
}
 8000fae:	bd10      	pop	{r4, pc}
 8000fb0:	20000004 	.word	0x20000004
 8000fb4:	20000000 	.word	0x20000000

08000fb8 <HAL_Init>:
{
 8000fb8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fba:	2003      	movs	r0, #3
 8000fbc:	f000 f81e 	bl	8000ffc <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f7ff ffd3 	bl	8000f6c <HAL_InitTick>
 8000fc6:	b110      	cbz	r0, 8000fce <HAL_Init+0x16>
    status = HAL_ERROR;
 8000fc8:	2401      	movs	r4, #1
}
 8000fca:	4620      	mov	r0, r4
 8000fcc:	bd10      	pop	{r4, pc}
 8000fce:	4604      	mov	r4, r0
    HAL_MspInit();
 8000fd0:	f7ff fc2c 	bl	800082c <HAL_MspInit>
 8000fd4:	e7f9      	b.n	8000fca <HAL_Init+0x12>
	...

08000fd8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000fd8:	4b03      	ldr	r3, [pc, #12]	; (8000fe8 <HAL_IncTick+0x10>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4a03      	ldr	r2, [pc, #12]	; (8000fec <HAL_IncTick+0x14>)
 8000fde:	6811      	ldr	r1, [r2, #0]
 8000fe0:	440b      	add	r3, r1
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	20000004 	.word	0x20000004
 8000fec:	2000040c 	.word	0x2000040c

08000ff0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ff0:	4b01      	ldr	r3, [pc, #4]	; (8000ff8 <HAL_GetTick+0x8>)
 8000ff2:	6818      	ldr	r0, [r3, #0]
}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	2000040c 	.word	0x2000040c

08000ffc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ffc:	4a07      	ldr	r2, [pc, #28]	; (800101c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000ffe:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001000:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001004:	041b      	lsls	r3, r3, #16
 8001006:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001008:	0200      	lsls	r0, r0, #8
 800100a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800100e:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001010:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001014:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001018:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001020:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001022:	4b17      	ldr	r3, [pc, #92]	; (8001080 <HAL_NVIC_SetPriority+0x60>)
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800102a:	f1c3 0407 	rsb	r4, r3, #7
 800102e:	2c04      	cmp	r4, #4
 8001030:	bf28      	it	cs
 8001032:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001034:	1d1d      	adds	r5, r3, #4
 8001036:	2d06      	cmp	r5, #6
 8001038:	d918      	bls.n	800106c <HAL_NVIC_SetPriority+0x4c>
 800103a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	f04f 35ff 	mov.w	r5, #4294967295
 8001040:	fa05 f404 	lsl.w	r4, r5, r4
 8001044:	ea21 0104 	bic.w	r1, r1, r4
 8001048:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800104a:	fa05 f303 	lsl.w	r3, r5, r3
 800104e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001052:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001054:	2800      	cmp	r0, #0
 8001056:	db0b      	blt.n	8001070 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001058:	0109      	lsls	r1, r1, #4
 800105a:	b2c9      	uxtb	r1, r1
 800105c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001060:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001064:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001068:	bc30      	pop	{r4, r5}
 800106a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106c:	2300      	movs	r3, #0
 800106e:	e7e5      	b.n	800103c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001070:	f000 000f 	and.w	r0, r0, #15
 8001074:	0109      	lsls	r1, r1, #4
 8001076:	b2c9      	uxtb	r1, r1
 8001078:	4b02      	ldr	r3, [pc, #8]	; (8001084 <HAL_NVIC_SetPriority+0x64>)
 800107a:	5419      	strb	r1, [r3, r0]
 800107c:	e7f4      	b.n	8001068 <HAL_NVIC_SetPriority+0x48>
 800107e:	bf00      	nop
 8001080:	e000ed00 	.word	0xe000ed00
 8001084:	e000ed14 	.word	0xe000ed14

08001088 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001088:	2800      	cmp	r0, #0
 800108a:	db07      	blt.n	800109c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800108c:	f000 021f 	and.w	r2, r0, #31
 8001090:	0940      	lsrs	r0, r0, #5
 8001092:	2301      	movs	r3, #1
 8001094:	4093      	lsls	r3, r2
 8001096:	4a02      	ldr	r2, [pc, #8]	; (80010a0 <HAL_NVIC_EnableIRQ+0x18>)
 8001098:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000e100 	.word	0xe000e100

080010a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a4:	3801      	subs	r0, #1
 80010a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80010aa:	d20a      	bcs.n	80010c2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_SYSTICK_Config+0x24>)
 80010ae:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b0:	4a06      	ldr	r2, [pc, #24]	; (80010cc <HAL_SYSTICK_Config+0x28>)
 80010b2:	21f0      	movs	r1, #240	; 0xf0
 80010b4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b8:	2000      	movs	r0, #0
 80010ba:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010bc:	2207      	movs	r2, #7
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80010c2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000e010 	.word	0xe000e010
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80010d0:	2800      	cmp	r0, #0
 80010d2:	d069      	beq.n	80011a8 <HAL_DMA_Init+0xd8>
{
 80010d4:	b410      	push	{r4}
 80010d6:	4603      	mov	r3, r0
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80010d8:	6801      	ldr	r1, [r0, #0]
 80010da:	4a34      	ldr	r2, [pc, #208]	; (80011ac <HAL_DMA_Init+0xdc>)
 80010dc:	4291      	cmp	r1, r2
 80010de:	d845      	bhi.n	800116c <HAL_DMA_Init+0x9c>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80010e0:	4a33      	ldr	r2, [pc, #204]	; (80011b0 <HAL_DMA_Init+0xe0>)
 80010e2:	440a      	add	r2, r1
 80010e4:	4933      	ldr	r1, [pc, #204]	; (80011b4 <HAL_DMA_Init+0xe4>)
 80010e6:	fba1 1202 	umull	r1, r2, r1, r2
 80010ea:	0912      	lsrs	r2, r2, #4
 80010ec:	0092      	lsls	r2, r2, #2
 80010ee:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80010f0:	4a31      	ldr	r2, [pc, #196]	; (80011b8 <HAL_DMA_Init+0xe8>)
 80010f2:	6402      	str	r2, [r0, #64]	; 0x40
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010f4:	2202      	movs	r2, #2
 80010f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80010fa:	6818      	ldr	r0, [r3, #0]
 80010fc:	6801      	ldr	r1, [r0, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80010fe:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8001102:	f021 0170 	bic.w	r1, r1, #112	; 0x70
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001106:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001108:	68dc      	ldr	r4, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800110a:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800110c:	691c      	ldr	r4, [r3, #16]
 800110e:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001110:	695c      	ldr	r4, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001112:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001114:	699c      	ldr	r4, [r3, #24]
 8001116:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001118:	69dc      	ldr	r4, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800111a:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800111c:	6a1c      	ldr	r4, [r3, #32]
 800111e:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 8001120:	430a      	orrs	r2, r1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001122:	6002      	str	r2, [r0, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001124:	689a      	ldr	r2, [r3, #8]
 8001126:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800112a:	d015      	beq.n	8001158 <HAL_DMA_Init+0x88>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800112c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800112e:	4a22      	ldr	r2, [pc, #136]	; (80011b8 <HAL_DMA_Init+0xe8>)
 8001130:	4291      	cmp	r1, r2
 8001132:	d026      	beq.n	8001182 <HAL_DMA_Init+0xb2>
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001134:	4a21      	ldr	r2, [pc, #132]	; (80011bc <HAL_DMA_Init+0xec>)
 8001136:	6811      	ldr	r1, [r2, #0]
 8001138:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800113a:	f000 041c 	and.w	r4, r0, #28
 800113e:	200f      	movs	r0, #15
 8001140:	40a0      	lsls	r0, r4
 8001142:	ea21 0100 	bic.w	r1, r1, r0
 8001146:	6011      	str	r1, [r2, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001148:	6811      	ldr	r1, [r2, #0]
 800114a:	6858      	ldr	r0, [r3, #4]
 800114c:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800114e:	f004 041c 	and.w	r4, r4, #28
 8001152:	40a0      	lsls	r0, r4
 8001154:	4301      	orrs	r1, r0
 8001156:	6011      	str	r1, [r2, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001158:	2000      	movs	r0, #0
 800115a:	63d8      	str	r0, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800115c:	2201      	movs	r2, #1
 800115e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001162:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24

  return HAL_OK;
}
 8001166:	f85d 4b04 	ldr.w	r4, [sp], #4
 800116a:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800116c:	4a14      	ldr	r2, [pc, #80]	; (80011c0 <HAL_DMA_Init+0xf0>)
 800116e:	440a      	add	r2, r1
 8001170:	4910      	ldr	r1, [pc, #64]	; (80011b4 <HAL_DMA_Init+0xe4>)
 8001172:	fba1 1202 	umull	r1, r2, r1, r2
 8001176:	0912      	lsrs	r2, r2, #4
 8001178:	0092      	lsls	r2, r2, #2
 800117a:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800117c:	4a11      	ldr	r2, [pc, #68]	; (80011c4 <HAL_DMA_Init+0xf4>)
 800117e:	6402      	str	r2, [r0, #64]	; 0x40
 8001180:	e7b8      	b.n	80010f4 <HAL_DMA_Init+0x24>
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001182:	32a8      	adds	r2, #168	; 0xa8
 8001184:	6811      	ldr	r1, [r2, #0]
 8001186:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001188:	f000 041c 	and.w	r4, r0, #28
 800118c:	200f      	movs	r0, #15
 800118e:	40a0      	lsls	r0, r4
 8001190:	ea21 0100 	bic.w	r1, r1, r0
 8001194:	6011      	str	r1, [r2, #0]
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001196:	6811      	ldr	r1, [r2, #0]
 8001198:	6858      	ldr	r0, [r3, #4]
 800119a:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800119c:	f004 041c 	and.w	r4, r4, #28
 80011a0:	40a0      	lsls	r0, r4
 80011a2:	4301      	orrs	r1, r0
 80011a4:	6011      	str	r1, [r2, #0]
 80011a6:	e7d7      	b.n	8001158 <HAL_DMA_Init+0x88>
    return HAL_ERROR;
 80011a8:	2001      	movs	r0, #1
}
 80011aa:	4770      	bx	lr
 80011ac:	40020407 	.word	0x40020407
 80011b0:	bffdfff8 	.word	0xbffdfff8
 80011b4:	cccccccd 	.word	0xcccccccd
 80011b8:	40020000 	.word	0x40020000
 80011bc:	400204a8 	.word	0x400204a8
 80011c0:	bffdfbf8 	.word	0xbffdfbf8
 80011c4:	40020400 	.word	0x40020400

080011c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011c8:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011ca:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80011cc:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80011ce:	6804      	ldr	r4, [r0, #0]
 80011d0:	6825      	ldr	r5, [r4, #0]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80011d2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80011d4:	f003 031c 	and.w	r3, r3, #28
 80011d8:	2204      	movs	r2, #4
 80011da:	409a      	lsls	r2, r3
 80011dc:	420a      	tst	r2, r1
 80011de:	d015      	beq.n	800120c <HAL_DMA_IRQHandler+0x44>
 80011e0:	f015 0f04 	tst.w	r5, #4
 80011e4:	d012      	beq.n	800120c <HAL_DMA_IRQHandler+0x44>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011e6:	6823      	ldr	r3, [r4, #0]
 80011e8:	f013 0f20 	tst.w	r3, #32
 80011ec:	d103      	bne.n	80011f6 <HAL_DMA_IRQHandler+0x2e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011ee:	6823      	ldr	r3, [r4, #0]
 80011f0:	f023 0304 	bic.w	r3, r3, #4
 80011f4:	6023      	str	r3, [r4, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80011f6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80011f8:	f003 021c 	and.w	r2, r3, #28
 80011fc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80011fe:	2304      	movs	r3, #4
 8001200:	4093      	lsls	r3, r2
 8001202:	604b      	str	r3, [r1, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001204:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001206:	b103      	cbz	r3, 800120a <HAL_DMA_IRQHandler+0x42>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001208:	4798      	blx	r3
  else
  {
    /* Nothing To Do */
  }
  return;
}
 800120a:	bd38      	pop	{r3, r4, r5, pc}
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800120c:	2202      	movs	r2, #2
 800120e:	409a      	lsls	r2, r3
 8001210:	420a      	tst	r2, r1
 8001212:	d01c      	beq.n	800124e <HAL_DMA_IRQHandler+0x86>
 8001214:	f015 0f02 	tst.w	r5, #2
 8001218:	d019      	beq.n	800124e <HAL_DMA_IRQHandler+0x86>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800121a:	6823      	ldr	r3, [r4, #0]
 800121c:	f013 0f20 	tst.w	r3, #32
 8001220:	d106      	bne.n	8001230 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001222:	6823      	ldr	r3, [r4, #0]
 8001224:	f023 030a 	bic.w	r3, r3, #10
 8001228:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800122a:	2301      	movs	r3, #1
 800122c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001230:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001232:	f003 021c 	and.w	r2, r3, #28
 8001236:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001238:	2302      	movs	r3, #2
 800123a:	4093      	lsls	r3, r2
 800123c:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 800123e:	2300      	movs	r3, #0
 8001240:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8001244:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0df      	beq.n	800120a <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 800124a:	4798      	blx	r3
 800124c:	e7dd      	b.n	800120a <HAL_DMA_IRQHandler+0x42>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800124e:	2208      	movs	r2, #8
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	420b      	tst	r3, r1
 8001256:	d0d8      	beq.n	800120a <HAL_DMA_IRQHandler+0x42>
 8001258:	f015 0f08 	tst.w	r5, #8
 800125c:	d0d5      	beq.n	800120a <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800125e:	6823      	ldr	r3, [r4, #0]
 8001260:	f023 030e 	bic.w	r3, r3, #14
 8001264:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001266:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001268:	f003 031c 	and.w	r3, r3, #28
 800126c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800126e:	2201      	movs	r2, #1
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001276:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001278:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800127c:	2300      	movs	r3, #0
 800127e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8001282:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0c0      	beq.n	800120a <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8001288:	4798      	blx	r3
  return;
 800128a:	e7be      	b.n	800120a <HAL_DMA_IRQHandler+0x42>

0800128c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800128c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800128e:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8001290:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001292:	e096      	b.n	80013c2 <HAL_GPIO_Init+0x136>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001294:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001296:	005f      	lsls	r7, r3, #1
 8001298:	2503      	movs	r5, #3
 800129a:	40bd      	lsls	r5, r7
 800129c:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012a0:	68cd      	ldr	r5, [r1, #12]
 80012a2:	40bd      	lsls	r5, r7
 80012a4:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80012a6:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a8:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012aa:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80012ae:	684d      	ldr	r5, [r1, #4]
 80012b0:	f3c5 1400 	ubfx	r4, r5, #4, #1
 80012b4:	409c      	lsls	r4, r3
 80012b6:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 80012b8:	6044      	str	r4, [r0, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012ba:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80012bc:	005f      	lsls	r7, r3, #1
 80012be:	2403      	movs	r4, #3
 80012c0:	40bc      	lsls	r4, r7
 80012c2:	43e4      	mvns	r4, r4
 80012c4:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012c6:	688e      	ldr	r6, [r1, #8]
 80012c8:	40be      	lsls	r6, r7
 80012ca:	432e      	orrs	r6, r5
      GPIOx->PUPDR = temp;
 80012cc:	60c6      	str	r6, [r0, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ce:	684d      	ldr	r5, [r1, #4]
 80012d0:	2d02      	cmp	r5, #2
 80012d2:	d001      	beq.n	80012d8 <HAL_GPIO_Init+0x4c>
 80012d4:	2d12      	cmp	r5, #18
 80012d6:	d113      	bne.n	8001300 <HAL_GPIO_Init+0x74>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012d8:	08de      	lsrs	r6, r3, #3
 80012da:	3608      	adds	r6, #8
 80012dc:	f850 e026 	ldr.w	lr, [r0, r6, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012e0:	f003 0507 	and.w	r5, r3, #7
 80012e4:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 80012e8:	250f      	movs	r5, #15
 80012ea:	fa05 f50c 	lsl.w	r5, r5, ip
 80012ee:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012f2:	690d      	ldr	r5, [r1, #16]
 80012f4:	fa05 f50c 	lsl.w	r5, r5, ip
 80012f8:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3u] = temp;
 80012fc:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001300:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001302:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001304:	684d      	ldr	r5, [r1, #4]
 8001306:	f005 0503 	and.w	r5, r5, #3
 800130a:	40bd      	lsls	r5, r7
 800130c:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 800130e:	6004      	str	r4, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001310:	684c      	ldr	r4, [r1, #4]
 8001312:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001316:	d053      	beq.n	80013c0 <HAL_GPIO_Init+0x134>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001318:	4c38      	ldr	r4, [pc, #224]	; (80013fc <HAL_GPIO_Init+0x170>)
 800131a:	6e25      	ldr	r5, [r4, #96]	; 0x60
 800131c:	f045 0501 	orr.w	r5, r5, #1
 8001320:	6625      	str	r5, [r4, #96]	; 0x60
 8001322:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8001324:	f004 0401 	and.w	r4, r4, #1
 8001328:	9401      	str	r4, [sp, #4]
 800132a:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2u];
 800132c:	089d      	lsrs	r5, r3, #2
 800132e:	1cae      	adds	r6, r5, #2
 8001330:	4c33      	ldr	r4, [pc, #204]	; (8001400 <HAL_GPIO_Init+0x174>)
 8001332:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001336:	f003 0403 	and.w	r4, r3, #3
 800133a:	00a6      	lsls	r6, r4, #2
 800133c:	240f      	movs	r4, #15
 800133e:	40b4      	lsls	r4, r6
 8001340:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001344:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8001348:	d051      	beq.n	80013ee <HAL_GPIO_Init+0x162>
 800134a:	4c2e      	ldr	r4, [pc, #184]	; (8001404 <HAL_GPIO_Init+0x178>)
 800134c:	42a0      	cmp	r0, r4
 800134e:	d050      	beq.n	80013f2 <HAL_GPIO_Init+0x166>
 8001350:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001354:	42a0      	cmp	r0, r4
 8001356:	d048      	beq.n	80013ea <HAL_GPIO_Init+0x15e>
 8001358:	2407      	movs	r4, #7
 800135a:	40b4      	lsls	r4, r6
 800135c:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 800135e:	3502      	adds	r5, #2
 8001360:	4e27      	ldr	r6, [pc, #156]	; (8001400 <HAL_GPIO_Init+0x174>)
 8001362:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001366:	4c28      	ldr	r4, [pc, #160]	; (8001408 <HAL_GPIO_Init+0x17c>)
 8001368:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800136a:	43d4      	mvns	r4, r2
 800136c:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001370:	684f      	ldr	r7, [r1, #4]
 8001372:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001376:	d001      	beq.n	800137c <HAL_GPIO_Init+0xf0>
        {
          temp |= iocurrent;
 8001378:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 800137c:	4d22      	ldr	r5, [pc, #136]	; (8001408 <HAL_GPIO_Init+0x17c>)
 800137e:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 8001380:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8001382:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001386:	684f      	ldr	r7, [r1, #4]
 8001388:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800138c:	d001      	beq.n	8001392 <HAL_GPIO_Init+0x106>
        {
          temp |= iocurrent;
 800138e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8001392:	4d1d      	ldr	r5, [pc, #116]	; (8001408 <HAL_GPIO_Init+0x17c>)
 8001394:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001396:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 8001398:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800139c:	684f      	ldr	r7, [r1, #4]
 800139e:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80013a2:	d001      	beq.n	80013a8 <HAL_GPIO_Init+0x11c>
        {
          temp |= iocurrent;
 80013a4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80013a8:	4d17      	ldr	r5, [pc, #92]	; (8001408 <HAL_GPIO_Init+0x17c>)
 80013aa:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 80013ac:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 80013ae:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013b0:	684e      	ldr	r6, [r1, #4]
 80013b2:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80013b6:	d001      	beq.n	80013bc <HAL_GPIO_Init+0x130>
        {
          temp |= iocurrent;
 80013b8:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 80013bc:	4a12      	ldr	r2, [pc, #72]	; (8001408 <HAL_GPIO_Init+0x17c>)
 80013be:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 80013c0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c2:	680a      	ldr	r2, [r1, #0]
 80013c4:	fa32 f403 	lsrs.w	r4, r2, r3
 80013c8:	d015      	beq.n	80013f6 <HAL_GPIO_Init+0x16a>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013ca:	2401      	movs	r4, #1
 80013cc:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 80013ce:	4022      	ands	r2, r4
 80013d0:	d0f6      	beq.n	80013c0 <HAL_GPIO_Init+0x134>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013d2:	684d      	ldr	r5, [r1, #4]
 80013d4:	1e6e      	subs	r6, r5, #1
 80013d6:	2e01      	cmp	r6, #1
 80013d8:	f67f af5c 	bls.w	8001294 <HAL_GPIO_Init+0x8>
 80013dc:	2d11      	cmp	r5, #17
 80013de:	f43f af59 	beq.w	8001294 <HAL_GPIO_Init+0x8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013e2:	2d12      	cmp	r5, #18
 80013e4:	f47f af69 	bne.w	80012ba <HAL_GPIO_Init+0x2e>
 80013e8:	e754      	b.n	8001294 <HAL_GPIO_Init+0x8>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013ea:	2402      	movs	r4, #2
 80013ec:	e7b5      	b.n	800135a <HAL_GPIO_Init+0xce>
 80013ee:	2400      	movs	r4, #0
 80013f0:	e7b3      	b.n	800135a <HAL_GPIO_Init+0xce>
 80013f2:	2401      	movs	r4, #1
 80013f4:	e7b1      	b.n	800135a <HAL_GPIO_Init+0xce>
  }
}
 80013f6:	b003      	add	sp, #12
 80013f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40021000 	.word	0x40021000
 8001400:	40010000 	.word	0x40010000
 8001404:	48000400 	.word	0x48000400
 8001408:	40010400 	.word	0x40010400

0800140c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800140c:	4b02      	ldr	r3, [pc, #8]	; (8001418 <HAL_PWREx_GetVoltageRange+0xc>)
 800140e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001410:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40007000 	.word	0x40007000

0800141c <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800141c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001420:	d00f      	beq.n	8001442 <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001422:	4b1f      	ldr	r3, [pc, #124]	; (80014a0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800142a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800142e:	d034      	beq.n	800149a <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001430:	4a1b      	ldr	r2, [pc, #108]	; (80014a0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001432:	6813      	ldr	r3, [r2, #0]
 8001434:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001438:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800143c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800143e:	2000      	movs	r0, #0
 8001440:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001442:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800144a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800144e:	d022      	beq.n	8001496 <HAL_PWREx_ControlVoltageScaling+0x7a>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001450:	4a13      	ldr	r2, [pc, #76]	; (80014a0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001452:	6813      	ldr	r3, [r2, #0]
 8001454:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001458:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800145c:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	2332      	movs	r3, #50	; 0x32
 8001464:	fb03 f302 	mul.w	r3, r3, r2
 8001468:	4a0f      	ldr	r2, [pc, #60]	; (80014a8 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 800146a:	fba2 2303 	umull	r2, r3, r2, r3
 800146e:	0c9b      	lsrs	r3, r3, #18
 8001470:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001472:	e000      	b.n	8001476 <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 8001474:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001476:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001478:	6952      	ldr	r2, [r2, #20]
 800147a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800147e:	d001      	beq.n	8001484 <HAL_PWREx_ControlVoltageScaling+0x68>
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1f7      	bne.n	8001474 <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800148c:	d101      	bne.n	8001492 <HAL_PWREx_ControlVoltageScaling+0x76>
  return HAL_OK;
 800148e:	2000      	movs	r0, #0
 8001490:	4770      	bx	lr
        return HAL_TIMEOUT;
 8001492:	2003      	movs	r0, #3
 8001494:	4770      	bx	lr
  return HAL_OK;
 8001496:	2000      	movs	r0, #0
 8001498:	4770      	bx	lr
 800149a:	2000      	movs	r0, #0
}
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40007000 	.word	0x40007000
 80014a4:	20000000 	.word	0x20000000
 80014a8:	431bde83 	.word	0x431bde83

080014ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80014ac:	b530      	push	{r4, r5, lr}
 80014ae:	b083      	sub	sp, #12
 80014b0:	4605      	mov	r5, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80014b2:	4b20      	ldr	r3, [pc, #128]	; (8001534 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 80014b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80014ba:	d00b      	beq.n	80014d4 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80014bc:	f7ff ffa6 	bl	800140c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014c0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80014c4:	d017      	beq.n	80014f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80014c6:	2d80      	cmp	r5, #128	; 0x80
 80014c8:	d81f      	bhi.n	800150a <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80014ca:	d02d      	beq.n	8001528 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 80014cc:	2d70      	cmp	r5, #112	; 0x70
 80014ce:	d02d      	beq.n	800152c <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80014d0:	2100      	movs	r1, #0
 80014d2:	e01b      	b.n	800150c <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 80014d4:	4c17      	ldr	r4, [pc, #92]	; (8001534 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 80014d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80014d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014dc:	65a3      	str	r3, [r4, #88]	; 0x58
 80014de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80014e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e4:	9301      	str	r3, [sp, #4]
 80014e6:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80014e8:	f7ff ff90 	bl	800140c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80014ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80014ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014f2:	65a3      	str	r3, [r4, #88]	; 0x58
 80014f4:	e7e4      	b.n	80014c0 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 80014f6:	2d80      	cmp	r5, #128	; 0x80
 80014f8:	d903      	bls.n	8001502 <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 80014fa:	2da0      	cmp	r5, #160	; 0xa0
 80014fc:	d903      	bls.n	8001506 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 80014fe:	2102      	movs	r1, #2
 8001500:	e004      	b.n	800150c <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001502:	2100      	movs	r1, #0
 8001504:	e002      	b.n	800150c <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8001506:	2101      	movs	r1, #1
 8001508:	e000      	b.n	800150c <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 800150a:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800150c:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 800150e:	6813      	ldr	r3, [r2, #0]
 8001510:	f023 0307 	bic.w	r3, r3, #7
 8001514:	430b      	orrs	r3, r1
 8001516:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001518:	6813      	ldr	r3, [r2, #0]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	428b      	cmp	r3, r1
 8001520:	d006      	beq.n	8001530 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
 8001522:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8001524:	b003      	add	sp, #12
 8001526:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8001528:	2102      	movs	r1, #2
 800152a:	e7ef      	b.n	800150c <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 800152c:	2101      	movs	r1, #1
 800152e:	e7ed      	b.n	800150c <RCC_SetFlashLatencyFromMSIRange+0x60>
  return HAL_OK;
 8001530:	2000      	movs	r0, #0
 8001532:	e7f7      	b.n	8001524 <RCC_SetFlashLatencyFromMSIRange+0x78>
 8001534:	40021000 	.word	0x40021000
 8001538:	40022000 	.word	0x40022000

0800153c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800153c:	4a28      	ldr	r2, [pc, #160]	; (80015e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800153e:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001540:	68d2      	ldr	r2, [r2, #12]
 8001542:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001546:	f013 030c 	ands.w	r3, r3, #12
 800154a:	d00a      	beq.n	8001562 <HAL_RCC_GetSysClockFreq+0x26>
 800154c:	2b0c      	cmp	r3, #12
 800154e:	d006      	beq.n	800155e <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001550:	2b04      	cmp	r3, #4
 8001552:	d01f      	beq.n	8001594 <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001554:	2b08      	cmp	r3, #8
 8001556:	d020      	beq.n	800159a <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001558:	2000      	movs	r0, #0
 800155a:	4602      	mov	r2, r0
 800155c:	e010      	b.n	8001580 <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800155e:	2a01      	cmp	r2, #1
 8001560:	d1f6      	bne.n	8001550 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001562:	4a1f      	ldr	r2, [pc, #124]	; (80015e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001564:	6812      	ldr	r2, [r2, #0]
 8001566:	f012 0f08 	tst.w	r2, #8
 800156a:	d10c      	bne.n	8001586 <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800156c:	4a1c      	ldr	r2, [pc, #112]	; (80015e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800156e:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8001572:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8001576:	491b      	ldr	r1, [pc, #108]	; (80015e4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001578:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800157c:	b143      	cbz	r3, 8001590 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800157e:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001580:	2b0c      	cmp	r3, #12
 8001582:	d00d      	beq.n	80015a0 <HAL_RCC_GetSysClockFreq+0x64>
}
 8001584:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001586:	4a16      	ldr	r2, [pc, #88]	; (80015e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001588:	6812      	ldr	r2, [r2, #0]
 800158a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800158e:	e7f2      	b.n	8001576 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 8001590:	4610      	mov	r0, r2
 8001592:	e7f5      	b.n	8001580 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 8001594:	4814      	ldr	r0, [pc, #80]	; (80015e8 <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001596:	2200      	movs	r2, #0
 8001598:	e7f2      	b.n	8001580 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 800159a:	4814      	ldr	r0, [pc, #80]	; (80015ec <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800159c:	2200      	movs	r2, #0
 800159e:	e7ef      	b.n	8001580 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80015a0:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d015      	beq.n	80015d8 <HAL_RCC_GetSysClockFreq+0x9c>
 80015ac:	2b03      	cmp	r3, #3
 80015ae:	d015      	beq.n	80015dc <HAL_RCC_GetSysClockFreq+0xa0>
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80015b0:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80015b2:	68d8      	ldr	r0, [r3, #12]
 80015b4:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80015b8:	3001      	adds	r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80015ba:	68d9      	ldr	r1, [r3, #12]
 80015bc:	f3c1 2106 	ubfx	r1, r1, #8, #7
 80015c0:	fb02 f201 	mul.w	r2, r2, r1
 80015c4:	fbb2 f2f0 	udiv	r2, r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80015c8:	68d8      	ldr	r0, [r3, #12]
 80015ca:	f3c0 6041 	ubfx	r0, r0, #25, #2
 80015ce:	3001      	adds	r0, #1
 80015d0:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 80015d2:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 80015d6:	e7d5      	b.n	8001584 <HAL_RCC_GetSysClockFreq+0x48>
      pllvco = HSI_VALUE;
 80015d8:	4a03      	ldr	r2, [pc, #12]	; (80015e8 <HAL_RCC_GetSysClockFreq+0xac>)
 80015da:	e7e9      	b.n	80015b0 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = HSE_VALUE;
 80015dc:	4a03      	ldr	r2, [pc, #12]	; (80015ec <HAL_RCC_GetSysClockFreq+0xb0>)
 80015de:	e7e7      	b.n	80015b0 <HAL_RCC_GetSysClockFreq+0x74>
 80015e0:	40021000 	.word	0x40021000
 80015e4:	080033e0 	.word	0x080033e0
 80015e8:	00f42400 	.word	0x00f42400
 80015ec:	007a1200 	.word	0x007a1200

080015f0 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 80015f0:	2800      	cmp	r0, #0
 80015f2:	f000 8327 	beq.w	8001c44 <HAL_RCC_OscConfig+0x654>
{
 80015f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015f8:	b083      	sub	sp, #12
 80015fa:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015fc:	4baf      	ldr	r3, [pc, #700]	; (80018bc <HAL_RCC_OscConfig+0x2cc>)
 80015fe:	689d      	ldr	r5, [r3, #8]
 8001600:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001604:	68de      	ldr	r6, [r3, #12]
 8001606:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800160a:	6803      	ldr	r3, [r0, #0]
 800160c:	f013 0f10 	tst.w	r3, #16
 8001610:	d05b      	beq.n	80016ca <HAL_RCC_OscConfig+0xda>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001612:	b1e5      	cbz	r5, 800164e <HAL_RCC_OscConfig+0x5e>
 8001614:	2d0c      	cmp	r5, #12
 8001616:	d018      	beq.n	800164a <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001618:	69a3      	ldr	r3, [r4, #24]
 800161a:	2b00      	cmp	r3, #0
 800161c:	f000 80bc 	beq.w	8001798 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_MSI_ENABLE();
 8001620:	4aa6      	ldr	r2, [pc, #664]	; (80018bc <HAL_RCC_OscConfig+0x2cc>)
 8001622:	6813      	ldr	r3, [r2, #0]
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800162a:	f7ff fce1 	bl	8000ff0 <HAL_GetTick>
 800162e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001630:	4ba2      	ldr	r3, [pc, #648]	; (80018bc <HAL_RCC_OscConfig+0x2cc>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f013 0f02 	tst.w	r3, #2
 8001638:	f040 809b 	bne.w	8001772 <HAL_RCC_OscConfig+0x182>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800163c:	f7ff fcd8 	bl	8000ff0 <HAL_GetTick>
 8001640:	1bc0      	subs	r0, r0, r7
 8001642:	2802      	cmp	r0, #2
 8001644:	d9f4      	bls.n	8001630 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e308      	b.n	8001c5c <HAL_RCC_OscConfig+0x66c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800164a:	2e01      	cmp	r6, #1
 800164c:	d1e4      	bne.n	8001618 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800164e:	4b9b      	ldr	r3, [pc, #620]	; (80018bc <HAL_RCC_OscConfig+0x2cc>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f013 0f02 	tst.w	r3, #2
 8001656:	d003      	beq.n	8001660 <HAL_RCC_OscConfig+0x70>
 8001658:	69a3      	ldr	r3, [r4, #24]
 800165a:	2b00      	cmp	r3, #0
 800165c:	f000 82f5 	beq.w	8001c4a <HAL_RCC_OscConfig+0x65a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001660:	6a20      	ldr	r0, [r4, #32]
 8001662:	4b96      	ldr	r3, [pc, #600]	; (80018bc <HAL_RCC_OscConfig+0x2cc>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f013 0f08 	tst.w	r3, #8
 800166a:	d05c      	beq.n	8001726 <HAL_RCC_OscConfig+0x136>
 800166c:	4b93      	ldr	r3, [pc, #588]	; (80018bc <HAL_RCC_OscConfig+0x2cc>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001674:	4298      	cmp	r0, r3
 8001676:	d85d      	bhi.n	8001734 <HAL_RCC_OscConfig+0x144>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001678:	4b90      	ldr	r3, [pc, #576]	; (80018bc <HAL_RCC_OscConfig+0x2cc>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	f042 0208 	orr.w	r2, r2, #8
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001688:	6a21      	ldr	r1, [r4, #32]
 800168a:	430a      	orrs	r2, r1
 800168c:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001694:	69e1      	ldr	r1, [r4, #28]
 8001696:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800169a:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800169c:	2d00      	cmp	r5, #0
 800169e:	d061      	beq.n	8001764 <HAL_RCC_OscConfig+0x174>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016a0:	f7ff ff4c 	bl	800153c <HAL_RCC_GetSysClockFreq>
 80016a4:	4b85      	ldr	r3, [pc, #532]	; (80018bc <HAL_RCC_OscConfig+0x2cc>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80016ac:	4a84      	ldr	r2, [pc, #528]	; (80018c0 <HAL_RCC_OscConfig+0x2d0>)
 80016ae:	5cd3      	ldrb	r3, [r2, r3]
 80016b0:	f003 031f 	and.w	r3, r3, #31
 80016b4:	40d8      	lsrs	r0, r3
 80016b6:	4b83      	ldr	r3, [pc, #524]	; (80018c4 <HAL_RCC_OscConfig+0x2d4>)
 80016b8:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80016ba:	4b83      	ldr	r3, [pc, #524]	; (80018c8 <HAL_RCC_OscConfig+0x2d8>)
 80016bc:	6818      	ldr	r0, [r3, #0]
 80016be:	f7ff fc55 	bl	8000f6c <HAL_InitTick>
        if(status != HAL_OK)
 80016c2:	4603      	mov	r3, r0
 80016c4:	2800      	cmp	r0, #0
 80016c6:	f040 82c9 	bne.w	8001c5c <HAL_RCC_OscConfig+0x66c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ca:	6823      	ldr	r3, [r4, #0]
 80016cc:	f013 0f01 	tst.w	r3, #1
 80016d0:	f000 8081 	beq.w	80017d6 <HAL_RCC_OscConfig+0x1e6>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016d4:	2d08      	cmp	r5, #8
 80016d6:	d075      	beq.n	80017c4 <HAL_RCC_OscConfig+0x1d4>
 80016d8:	2d0c      	cmp	r5, #12
 80016da:	d071      	beq.n	80017c0 <HAL_RCC_OscConfig+0x1d0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016dc:	6863      	ldr	r3, [r4, #4]
 80016de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e2:	f000 8097 	beq.w	8001814 <HAL_RCC_OscConfig+0x224>
 80016e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016ea:	f000 8099 	beq.w	8001820 <HAL_RCC_OscConfig+0x230>
 80016ee:	4b73      	ldr	r3, [pc, #460]	; (80018bc <HAL_RCC_OscConfig+0x2cc>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016fe:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001700:	6863      	ldr	r3, [r4, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	f000 8099 	beq.w	800183a <HAL_RCC_OscConfig+0x24a>
        tickstart = HAL_GetTick();
 8001708:	f7ff fc72 	bl	8000ff0 <HAL_GetTick>
 800170c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800170e:	4b6b      	ldr	r3, [pc, #428]	; (80018bc <HAL_RCC_OscConfig+0x2cc>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001716:	d15e      	bne.n	80017d6 <HAL_RCC_OscConfig+0x1e6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001718:	f7ff fc6a 	bl	8000ff0 <HAL_GetTick>
 800171c:	1bc0      	subs	r0, r0, r7
 800171e:	2864      	cmp	r0, #100	; 0x64
 8001720:	d9f5      	bls.n	800170e <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e29a      	b.n	8001c5c <HAL_RCC_OscConfig+0x66c>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001726:	4b65      	ldr	r3, [pc, #404]	; (80018bc <HAL_RCC_OscConfig+0x2cc>)
 8001728:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800172c:	091b      	lsrs	r3, r3, #4
 800172e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001732:	e79f      	b.n	8001674 <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001734:	f7ff feba 	bl	80014ac <RCC_SetFlashLatencyFromMSIRange>
 8001738:	2800      	cmp	r0, #0
 800173a:	f040 8288 	bne.w	8001c4e <HAL_RCC_OscConfig+0x65e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800173e:	4b5f      	ldr	r3, [pc, #380]	; (80018bc <HAL_RCC_OscConfig+0x2cc>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	f042 0208 	orr.w	r2, r2, #8
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800174e:	6a21      	ldr	r1, [r4, #32]
 8001750:	430a      	orrs	r2, r1
 8001752:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800175a:	69e1      	ldr	r1, [r4, #28]
 800175c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	e79d      	b.n	80016a0 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001764:	6a20      	ldr	r0, [r4, #32]
 8001766:	f7ff fea1 	bl	80014ac <RCC_SetFlashLatencyFromMSIRange>
 800176a:	2800      	cmp	r0, #0
 800176c:	d098      	beq.n	80016a0 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e274      	b.n	8001c5c <HAL_RCC_OscConfig+0x66c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001772:	4b52      	ldr	r3, [pc, #328]	; (80018bc <HAL_RCC_OscConfig+0x2cc>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	f042 0208 	orr.w	r2, r2, #8
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001782:	6a21      	ldr	r1, [r4, #32]
 8001784:	430a      	orrs	r2, r1
 8001786:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800178e:	69e1      	ldr	r1, [r4, #28]
 8001790:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	e798      	b.n	80016ca <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_MSI_DISABLE();
 8001798:	4a48      	ldr	r2, [pc, #288]	; (80018bc <HAL_RCC_OscConfig+0x2cc>)
 800179a:	6813      	ldr	r3, [r2, #0]
 800179c:	f023 0301 	bic.w	r3, r3, #1
 80017a0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80017a2:	f7ff fc25 	bl	8000ff0 <HAL_GetTick>
 80017a6:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017a8:	4b44      	ldr	r3, [pc, #272]	; (80018bc <HAL_RCC_OscConfig+0x2cc>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f013 0f02 	tst.w	r3, #2
 80017b0:	d08b      	beq.n	80016ca <HAL_RCC_OscConfig+0xda>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017b2:	f7ff fc1d 	bl	8000ff0 <HAL_GetTick>
 80017b6:	1bc0      	subs	r0, r0, r7
 80017b8:	2802      	cmp	r0, #2
 80017ba:	d9f5      	bls.n	80017a8 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e24d      	b.n	8001c5c <HAL_RCC_OscConfig+0x66c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017c0:	2e03      	cmp	r6, #3
 80017c2:	d18b      	bne.n	80016dc <HAL_RCC_OscConfig+0xec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c4:	4b3d      	ldr	r3, [pc, #244]	; (80018bc <HAL_RCC_OscConfig+0x2cc>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80017cc:	d003      	beq.n	80017d6 <HAL_RCC_OscConfig+0x1e6>
 80017ce:	6863      	ldr	r3, [r4, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f000 823e 	beq.w	8001c52 <HAL_RCC_OscConfig+0x662>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017d6:	6823      	ldr	r3, [r4, #0]
 80017d8:	f013 0f02 	tst.w	r3, #2
 80017dc:	d04f      	beq.n	800187e <HAL_RCC_OscConfig+0x28e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017de:	2d04      	cmp	r5, #4
 80017e0:	d03c      	beq.n	800185c <HAL_RCC_OscConfig+0x26c>
 80017e2:	2d0c      	cmp	r5, #12
 80017e4:	d038      	beq.n	8001858 <HAL_RCC_OscConfig+0x268>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017e6:	68e3      	ldr	r3, [r4, #12]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d078      	beq.n	80018de <HAL_RCC_OscConfig+0x2ee>
        __HAL_RCC_HSI_ENABLE();
 80017ec:	4a33      	ldr	r2, [pc, #204]	; (80018bc <HAL_RCC_OscConfig+0x2cc>)
 80017ee:	6813      	ldr	r3, [r2, #0]
 80017f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80017f6:	f7ff fbfb 	bl	8000ff0 <HAL_GetTick>
 80017fa:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017fc:	4b2f      	ldr	r3, [pc, #188]	; (80018bc <HAL_RCC_OscConfig+0x2cc>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001804:	d162      	bne.n	80018cc <HAL_RCC_OscConfig+0x2dc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001806:	f7ff fbf3 	bl	8000ff0 <HAL_GetTick>
 800180a:	1b80      	subs	r0, r0, r6
 800180c:	2802      	cmp	r0, #2
 800180e:	d9f5      	bls.n	80017fc <HAL_RCC_OscConfig+0x20c>
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e223      	b.n	8001c5c <HAL_RCC_OscConfig+0x66c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001814:	4a29      	ldr	r2, [pc, #164]	; (80018bc <HAL_RCC_OscConfig+0x2cc>)
 8001816:	6813      	ldr	r3, [r2, #0]
 8001818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	e76f      	b.n	8001700 <HAL_RCC_OscConfig+0x110>
 8001820:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001824:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	e762      	b.n	8001700 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 800183a:	f7ff fbd9 	bl	8000ff0 <HAL_GetTick>
 800183e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001840:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <HAL_RCC_OscConfig+0x2cc>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001848:	d0c5      	beq.n	80017d6 <HAL_RCC_OscConfig+0x1e6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800184a:	f7ff fbd1 	bl	8000ff0 <HAL_GetTick>
 800184e:	1bc0      	subs	r0, r0, r7
 8001850:	2864      	cmp	r0, #100	; 0x64
 8001852:	d9f5      	bls.n	8001840 <HAL_RCC_OscConfig+0x250>
            return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e201      	b.n	8001c5c <HAL_RCC_OscConfig+0x66c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001858:	2e02      	cmp	r6, #2
 800185a:	d1c4      	bne.n	80017e6 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800185c:	4b17      	ldr	r3, [pc, #92]	; (80018bc <HAL_RCC_OscConfig+0x2cc>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001864:	d003      	beq.n	800186e <HAL_RCC_OscConfig+0x27e>
 8001866:	68e3      	ldr	r3, [r4, #12]
 8001868:	2b00      	cmp	r3, #0
 800186a:	f000 81f4 	beq.w	8001c56 <HAL_RCC_OscConfig+0x666>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186e:	4a13      	ldr	r2, [pc, #76]	; (80018bc <HAL_RCC_OscConfig+0x2cc>)
 8001870:	6853      	ldr	r3, [r2, #4]
 8001872:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001876:	6921      	ldr	r1, [r4, #16]
 8001878:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800187c:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800187e:	6823      	ldr	r3, [r4, #0]
 8001880:	f013 0f08 	tst.w	r3, #8
 8001884:	d056      	beq.n	8001934 <HAL_RCC_OscConfig+0x344>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001886:	6963      	ldr	r3, [r4, #20]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d03c      	beq.n	8001906 <HAL_RCC_OscConfig+0x316>
      __HAL_RCC_LSI_ENABLE();
 800188c:	4a0b      	ldr	r2, [pc, #44]	; (80018bc <HAL_RCC_OscConfig+0x2cc>)
 800188e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 800189a:	f7ff fba9 	bl	8000ff0 <HAL_GetTick>
 800189e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_RCC_OscConfig+0x2cc>)
 80018a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018a6:	f013 0f02 	tst.w	r3, #2
 80018aa:	d143      	bne.n	8001934 <HAL_RCC_OscConfig+0x344>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ac:	f7ff fba0 	bl	8000ff0 <HAL_GetTick>
 80018b0:	1b80      	subs	r0, r0, r6
 80018b2:	2802      	cmp	r0, #2
 80018b4:	d9f4      	bls.n	80018a0 <HAL_RCC_OscConfig+0x2b0>
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e1d0      	b.n	8001c5c <HAL_RCC_OscConfig+0x66c>
 80018ba:	bf00      	nop
 80018bc:	40021000 	.word	0x40021000
 80018c0:	08003410 	.word	0x08003410
 80018c4:	20000000 	.word	0x20000000
 80018c8:	20000008 	.word	0x20000008
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018cc:	4ab0      	ldr	r2, [pc, #704]	; (8001b90 <HAL_RCC_OscConfig+0x5a0>)
 80018ce:	6853      	ldr	r3, [r2, #4]
 80018d0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80018d4:	6921      	ldr	r1, [r4, #16]
 80018d6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80018da:	6053      	str	r3, [r2, #4]
 80018dc:	e7cf      	b.n	800187e <HAL_RCC_OscConfig+0x28e>
        __HAL_RCC_HSI_DISABLE();
 80018de:	4aac      	ldr	r2, [pc, #688]	; (8001b90 <HAL_RCC_OscConfig+0x5a0>)
 80018e0:	6813      	ldr	r3, [r2, #0]
 80018e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018e6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80018e8:	f7ff fb82 	bl	8000ff0 <HAL_GetTick>
 80018ec:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018ee:	4ba8      	ldr	r3, [pc, #672]	; (8001b90 <HAL_RCC_OscConfig+0x5a0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80018f6:	d0c2      	beq.n	800187e <HAL_RCC_OscConfig+0x28e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f8:	f7ff fb7a 	bl	8000ff0 <HAL_GetTick>
 80018fc:	1b80      	subs	r0, r0, r6
 80018fe:	2802      	cmp	r0, #2
 8001900:	d9f5      	bls.n	80018ee <HAL_RCC_OscConfig+0x2fe>
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e1aa      	b.n	8001c5c <HAL_RCC_OscConfig+0x66c>
      __HAL_RCC_LSI_DISABLE();
 8001906:	4aa2      	ldr	r2, [pc, #648]	; (8001b90 <HAL_RCC_OscConfig+0x5a0>)
 8001908:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800190c:	f023 0301 	bic.w	r3, r3, #1
 8001910:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001914:	f7ff fb6c 	bl	8000ff0 <HAL_GetTick>
 8001918:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800191a:	4b9d      	ldr	r3, [pc, #628]	; (8001b90 <HAL_RCC_OscConfig+0x5a0>)
 800191c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001920:	f013 0f02 	tst.w	r3, #2
 8001924:	d006      	beq.n	8001934 <HAL_RCC_OscConfig+0x344>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001926:	f7ff fb63 	bl	8000ff0 <HAL_GetTick>
 800192a:	1b80      	subs	r0, r0, r6
 800192c:	2802      	cmp	r0, #2
 800192e:	d9f4      	bls.n	800191a <HAL_RCC_OscConfig+0x32a>
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e193      	b.n	8001c5c <HAL_RCC_OscConfig+0x66c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001934:	6823      	ldr	r3, [r4, #0]
 8001936:	f013 0f04 	tst.w	r3, #4
 800193a:	d07a      	beq.n	8001a32 <HAL_RCC_OscConfig+0x442>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800193c:	4b94      	ldr	r3, [pc, #592]	; (8001b90 <HAL_RCC_OscConfig+0x5a0>)
 800193e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001940:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001944:	d10b      	bne.n	800195e <HAL_RCC_OscConfig+0x36e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001946:	4b92      	ldr	r3, [pc, #584]	; (8001b90 <HAL_RCC_OscConfig+0x5a0>)
 8001948:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800194a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800194e:	659a      	str	r2, [r3, #88]	; 0x58
 8001950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001956:	9301      	str	r3, [sp, #4]
 8001958:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800195a:	2601      	movs	r6, #1
 800195c:	e000      	b.n	8001960 <HAL_RCC_OscConfig+0x370>
    FlagStatus       pwrclkchanged = RESET;
 800195e:	2600      	movs	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001960:	4b8c      	ldr	r3, [pc, #560]	; (8001b94 <HAL_RCC_OscConfig+0x5a4>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001968:	d026      	beq.n	80019b8 <HAL_RCC_OscConfig+0x3c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800196a:	68a3      	ldr	r3, [r4, #8]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d037      	beq.n	80019e0 <HAL_RCC_OscConfig+0x3f0>
 8001970:	2b05      	cmp	r3, #5
 8001972:	d03d      	beq.n	80019f0 <HAL_RCC_OscConfig+0x400>
 8001974:	4b86      	ldr	r3, [pc, #536]	; (8001b90 <HAL_RCC_OscConfig+0x5a0>)
 8001976:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800197a:	f022 0201 	bic.w	r2, r2, #1
 800197e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001982:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001986:	f022 0204 	bic.w	r2, r2, #4
 800198a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800198e:	68a3      	ldr	r3, [r4, #8]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d03b      	beq.n	8001a0c <HAL_RCC_OscConfig+0x41c>
      tickstart = HAL_GetTick();
 8001994:	f7ff fb2c 	bl	8000ff0 <HAL_GetTick>
 8001998:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800199a:	4b7d      	ldr	r3, [pc, #500]	; (8001b90 <HAL_RCC_OscConfig+0x5a0>)
 800199c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019a0:	f013 0f02 	tst.w	r3, #2
 80019a4:	d144      	bne.n	8001a30 <HAL_RCC_OscConfig+0x440>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a6:	f7ff fb23 	bl	8000ff0 <HAL_GetTick>
 80019aa:	1bc0      	subs	r0, r0, r7
 80019ac:	f241 3388 	movw	r3, #5000	; 0x1388
 80019b0:	4298      	cmp	r0, r3
 80019b2:	d9f2      	bls.n	800199a <HAL_RCC_OscConfig+0x3aa>
          return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e151      	b.n	8001c5c <HAL_RCC_OscConfig+0x66c>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019b8:	4a76      	ldr	r2, [pc, #472]	; (8001b94 <HAL_RCC_OscConfig+0x5a4>)
 80019ba:	6813      	ldr	r3, [r2, #0]
 80019bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80019c2:	f7ff fb15 	bl	8000ff0 <HAL_GetTick>
 80019c6:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019c8:	4b72      	ldr	r3, [pc, #456]	; (8001b94 <HAL_RCC_OscConfig+0x5a4>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80019d0:	d1cb      	bne.n	800196a <HAL_RCC_OscConfig+0x37a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d2:	f7ff fb0d 	bl	8000ff0 <HAL_GetTick>
 80019d6:	1bc0      	subs	r0, r0, r7
 80019d8:	2802      	cmp	r0, #2
 80019da:	d9f5      	bls.n	80019c8 <HAL_RCC_OscConfig+0x3d8>
          return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e13d      	b.n	8001c5c <HAL_RCC_OscConfig+0x66c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e0:	4a6b      	ldr	r2, [pc, #428]	; (8001b90 <HAL_RCC_OscConfig+0x5a0>)
 80019e2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019ee:	e7ce      	b.n	800198e <HAL_RCC_OscConfig+0x39e>
 80019f0:	4b67      	ldr	r3, [pc, #412]	; (8001b90 <HAL_RCC_OscConfig+0x5a0>)
 80019f2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80019f6:	f042 0204 	orr.w	r2, r2, #4
 80019fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80019fe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001a02:	f042 0201 	orr.w	r2, r2, #1
 8001a06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001a0a:	e7c0      	b.n	800198e <HAL_RCC_OscConfig+0x39e>
      tickstart = HAL_GetTick();
 8001a0c:	f7ff faf0 	bl	8000ff0 <HAL_GetTick>
 8001a10:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a12:	4b5f      	ldr	r3, [pc, #380]	; (8001b90 <HAL_RCC_OscConfig+0x5a0>)
 8001a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a18:	f013 0f02 	tst.w	r3, #2
 8001a1c:	d008      	beq.n	8001a30 <HAL_RCC_OscConfig+0x440>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a1e:	f7ff fae7 	bl	8000ff0 <HAL_GetTick>
 8001a22:	1bc0      	subs	r0, r0, r7
 8001a24:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a28:	4298      	cmp	r0, r3
 8001a2a:	d9f2      	bls.n	8001a12 <HAL_RCC_OscConfig+0x422>
          return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e115      	b.n	8001c5c <HAL_RCC_OscConfig+0x66c>
    if(pwrclkchanged == SET)
 8001a30:	b9e6      	cbnz	r6, 8001a6c <HAL_RCC_OscConfig+0x47c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a32:	6823      	ldr	r3, [r4, #0]
 8001a34:	f013 0f20 	tst.w	r3, #32
 8001a38:	d035      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x4b6>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a3c:	b1e3      	cbz	r3, 8001a78 <HAL_RCC_OscConfig+0x488>
      __HAL_RCC_HSI48_ENABLE();
 8001a3e:	4a54      	ldr	r2, [pc, #336]	; (8001b90 <HAL_RCC_OscConfig+0x5a0>)
 8001a40:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001a4c:	f7ff fad0 	bl	8000ff0 <HAL_GetTick>
 8001a50:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a52:	4b4f      	ldr	r3, [pc, #316]	; (8001b90 <HAL_RCC_OscConfig+0x5a0>)
 8001a54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a58:	f013 0f02 	tst.w	r3, #2
 8001a5c:	d123      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x4b6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a5e:	f7ff fac7 	bl	8000ff0 <HAL_GetTick>
 8001a62:	1b80      	subs	r0, r0, r6
 8001a64:	2802      	cmp	r0, #2
 8001a66:	d9f4      	bls.n	8001a52 <HAL_RCC_OscConfig+0x462>
          return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e0f7      	b.n	8001c5c <HAL_RCC_OscConfig+0x66c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a6c:	4a48      	ldr	r2, [pc, #288]	; (8001b90 <HAL_RCC_OscConfig+0x5a0>)
 8001a6e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a74:	6593      	str	r3, [r2, #88]	; 0x58
 8001a76:	e7dc      	b.n	8001a32 <HAL_RCC_OscConfig+0x442>
      __HAL_RCC_HSI48_DISABLE();
 8001a78:	4a45      	ldr	r2, [pc, #276]	; (8001b90 <HAL_RCC_OscConfig+0x5a0>)
 8001a7a:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8001a7e:	f023 0301 	bic.w	r3, r3, #1
 8001a82:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001a86:	f7ff fab3 	bl	8000ff0 <HAL_GetTick>
 8001a8a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a8c:	4b40      	ldr	r3, [pc, #256]	; (8001b90 <HAL_RCC_OscConfig+0x5a0>)
 8001a8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a92:	f013 0f02 	tst.w	r3, #2
 8001a96:	d006      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x4b6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a98:	f7ff faaa 	bl	8000ff0 <HAL_GetTick>
 8001a9c:	1b80      	subs	r0, r0, r6
 8001a9e:	2802      	cmp	r0, #2
 8001aa0:	d9f4      	bls.n	8001a8c <HAL_RCC_OscConfig+0x49c>
          return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e0da      	b.n	8001c5c <HAL_RCC_OscConfig+0x66c>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001aa6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f000 80d6 	beq.w	8001c5a <HAL_RCC_OscConfig+0x66a>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d027      	beq.n	8001b02 <HAL_RCC_OscConfig+0x512>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ab2:	2d0c      	cmp	r5, #12
 8001ab4:	f000 80db 	beq.w	8001c6e <HAL_RCC_OscConfig+0x67e>
        __HAL_RCC_PLL_DISABLE();
 8001ab8:	4b35      	ldr	r3, [pc, #212]	; (8001b90 <HAL_RCC_OscConfig+0x5a0>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001ac0:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001ac8:	d104      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x4e4>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001aca:	4a31      	ldr	r2, [pc, #196]	; (8001b90 <HAL_RCC_OscConfig+0x5a0>)
 8001acc:	68d3      	ldr	r3, [r2, #12]
 8001ace:	f023 0303 	bic.w	r3, r3, #3
 8001ad2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001ad4:	4a2e      	ldr	r2, [pc, #184]	; (8001b90 <HAL_RCC_OscConfig+0x5a0>)
 8001ad6:	68d3      	ldr	r3, [r2, #12]
 8001ad8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae0:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8001ae2:	f7ff fa85 	bl	8000ff0 <HAL_GetTick>
 8001ae6:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae8:	4b29      	ldr	r3, [pc, #164]	; (8001b90 <HAL_RCC_OscConfig+0x5a0>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001af0:	f000 80a6 	beq.w	8001c40 <HAL_RCC_OscConfig+0x650>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af4:	f7ff fa7c 	bl	8000ff0 <HAL_GetTick>
 8001af8:	1b00      	subs	r0, r0, r4
 8001afa:	2802      	cmp	r0, #2
 8001afc:	d9f4      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x4f8>
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e0ac      	b.n	8001c5c <HAL_RCC_OscConfig+0x66c>
      pll_config = RCC->PLLCFGR;
 8001b02:	4b23      	ldr	r3, [pc, #140]	; (8001b90 <HAL_RCC_OscConfig+0x5a0>)
 8001b04:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b06:	f003 0103 	and.w	r1, r3, #3
 8001b0a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b0c:	4291      	cmp	r1, r2
 8001b0e:	d009      	beq.n	8001b24 <HAL_RCC_OscConfig+0x534>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b10:	2d0c      	cmp	r5, #12
 8001b12:	f000 80a6 	beq.w	8001c62 <HAL_RCC_OscConfig+0x672>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b16:	4b1e      	ldr	r3, [pc, #120]	; (8001b90 <HAL_RCC_OscConfig+0x5a0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8001b1e:	d03b      	beq.n	8001b98 <HAL_RCC_OscConfig+0x5a8>
            return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e09b      	b.n	8001c5c <HAL_RCC_OscConfig+0x66c>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b24:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b28:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001b2a:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2c:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8001b30:	d1ee      	bne.n	8001b10 <HAL_RCC_OscConfig+0x520>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b32:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b36:	6b61      	ldr	r1, [r4, #52]	; 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b38:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8001b3c:	d1e8      	bne.n	8001b10 <HAL_RCC_OscConfig+0x520>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b3e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b42:	6ba1      	ldr	r1, [r4, #56]	; 0x38
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b44:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8001b48:	d1e2      	bne.n	8001b10 <HAL_RCC_OscConfig+0x520>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b4a:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8001b4e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001b50:	0852      	lsrs	r2, r2, #1
 8001b52:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b54:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8001b58:	d1da      	bne.n	8001b10 <HAL_RCC_OscConfig+0x520>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b5a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8001b5e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001b60:	0852      	lsrs	r2, r2, #1
 8001b62:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b64:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8001b68:	d1d2      	bne.n	8001b10 <HAL_RCC_OscConfig+0x520>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b6a:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <HAL_RCC_OscConfig+0x5a0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001b72:	d178      	bne.n	8001c66 <HAL_RCC_OscConfig+0x676>
          __HAL_RCC_PLL_ENABLE();
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_RCC_OscConfig+0x5a0>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001b7c:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b7e:	68da      	ldr	r2, [r3, #12]
 8001b80:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001b84:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 8001b86:	f7ff fa33 	bl	8000ff0 <HAL_GetTick>
 8001b8a:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b8c:	e051      	b.n	8001c32 <HAL_RCC_OscConfig+0x642>
 8001b8e:	bf00      	nop
 8001b90:	40021000 	.word	0x40021000
 8001b94:	40007000 	.word	0x40007000
            __HAL_RCC_PLL_DISABLE();
 8001b98:	4a36      	ldr	r2, [pc, #216]	; (8001c74 <HAL_RCC_OscConfig+0x684>)
 8001b9a:	6813      	ldr	r3, [r2, #0]
 8001b9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ba0:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8001ba2:	f7ff fa25 	bl	8000ff0 <HAL_GetTick>
 8001ba6:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba8:	4b32      	ldr	r3, [pc, #200]	; (8001c74 <HAL_RCC_OscConfig+0x684>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001bb0:	d006      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x5d0>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb2:	f7ff fa1d 	bl	8000ff0 <HAL_GetTick>
 8001bb6:	1b40      	subs	r0, r0, r5
 8001bb8:	2802      	cmp	r0, #2
 8001bba:	d9f5      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x5b8>
                return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e04d      	b.n	8001c5c <HAL_RCC_OscConfig+0x66c>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bc0:	4a2c      	ldr	r2, [pc, #176]	; (8001c74 <HAL_RCC_OscConfig+0x684>)
 8001bc2:	68d3      	ldr	r3, [r2, #12]
 8001bc4:	492c      	ldr	r1, [pc, #176]	; (8001c78 <HAL_RCC_OscConfig+0x688>)
 8001bc6:	4019      	ands	r1, r3
 8001bc8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001bca:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001bcc:	3801      	subs	r0, #1
 8001bce:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8001bd2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001bd4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001bd8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001bda:	0840      	lsrs	r0, r0, #1
 8001bdc:	3801      	subs	r0, #1
 8001bde:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8001be2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001be4:	0840      	lsrs	r0, r0, #1
 8001be6:	3801      	subs	r0, #1
 8001be8:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001bec:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001bee:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8001bf2:	430b      	orrs	r3, r1
 8001bf4:	60d3      	str	r3, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 8001bf6:	6813      	ldr	r3, [r2, #0]
 8001bf8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bfc:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bfe:	68d3      	ldr	r3, [r2, #12]
 8001c00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c04:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 8001c06:	f7ff f9f3 	bl	8000ff0 <HAL_GetTick>
 8001c0a:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c0c:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <HAL_RCC_OscConfig+0x684>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c14:	d106      	bne.n	8001c24 <HAL_RCC_OscConfig+0x634>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c16:	f7ff f9eb 	bl	8000ff0 <HAL_GetTick>
 8001c1a:	1b00      	subs	r0, r0, r4
 8001c1c:	2802      	cmp	r0, #2
 8001c1e:	d9f5      	bls.n	8001c0c <HAL_RCC_OscConfig+0x61c>
                return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e01b      	b.n	8001c5c <HAL_RCC_OscConfig+0x66c>
  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
 8001c26:	e019      	b.n	8001c5c <HAL_RCC_OscConfig+0x66c>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c28:	f7ff f9e2 	bl	8000ff0 <HAL_GetTick>
 8001c2c:	1b00      	subs	r0, r0, r4
 8001c2e:	2802      	cmp	r0, #2
 8001c30:	d81b      	bhi.n	8001c6a <HAL_RCC_OscConfig+0x67a>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c32:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <HAL_RCC_OscConfig+0x684>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c3a:	d0f5      	beq.n	8001c28 <HAL_RCC_OscConfig+0x638>
  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	e00d      	b.n	8001c5c <HAL_RCC_OscConfig+0x66c>
 8001c40:	2300      	movs	r3, #0
 8001c42:	e00b      	b.n	8001c5c <HAL_RCC_OscConfig+0x66c>
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	4770      	bx	lr
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e006      	b.n	8001c5c <HAL_RCC_OscConfig+0x66c>
            return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e004      	b.n	8001c5c <HAL_RCC_OscConfig+0x66c>
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e002      	b.n	8001c5c <HAL_RCC_OscConfig+0x66c>
        return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <HAL_RCC_OscConfig+0x66c>
  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	b003      	add	sp, #12
 8001c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e7fa      	b.n	8001c5c <HAL_RCC_OscConfig+0x66c>
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	e7f8      	b.n	8001c5c <HAL_RCC_OscConfig+0x66c>
              return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e7f6      	b.n	8001c5c <HAL_RCC_OscConfig+0x66c>
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e7f4      	b.n	8001c5c <HAL_RCC_OscConfig+0x66c>
 8001c72:	bf00      	nop
 8001c74:	40021000 	.word	0x40021000
 8001c78:	019d808c 	.word	0x019d808c

08001c7c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001c7c:	2800      	cmp	r0, #0
 8001c7e:	f000 809b 	beq.w	8001db8 <HAL_RCC_ClockConfig+0x13c>
{
 8001c82:	b570      	push	{r4, r5, r6, lr}
 8001c84:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c86:	4b4e      	ldr	r3, [pc, #312]	; (8001dc0 <HAL_RCC_ClockConfig+0x144>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	428b      	cmp	r3, r1
 8001c90:	d20c      	bcs.n	8001cac <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c92:	4a4b      	ldr	r2, [pc, #300]	; (8001dc0 <HAL_RCC_ClockConfig+0x144>)
 8001c94:	6813      	ldr	r3, [r2, #0]
 8001c96:	f023 0307 	bic.w	r3, r3, #7
 8001c9a:	430b      	orrs	r3, r1
 8001c9c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9e:	6813      	ldr	r3, [r2, #0]
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	428b      	cmp	r3, r1
 8001ca6:	d001      	beq.n	8001cac <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8001ca8:	2001      	movs	r0, #1
}
 8001caa:	bd70      	pop	{r4, r5, r6, pc}
 8001cac:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cae:	6823      	ldr	r3, [r4, #0]
 8001cb0:	f013 0f01 	tst.w	r3, #1
 8001cb4:	d039      	beq.n	8001d2a <HAL_RCC_ClockConfig+0xae>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cb6:	6863      	ldr	r3, [r4, #4]
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	d009      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x54>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d026      	beq.n	8001d0e <HAL_RCC_ClockConfig+0x92>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001cc0:	bb63      	cbnz	r3, 8001d1c <HAL_RCC_ClockConfig+0xa0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cc2:	4a40      	ldr	r2, [pc, #256]	; (8001dc4 <HAL_RCC_ClockConfig+0x148>)
 8001cc4:	6812      	ldr	r2, [r2, #0]
 8001cc6:	f012 0f02 	tst.w	r2, #2
 8001cca:	d106      	bne.n	8001cda <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 8001ccc:	2001      	movs	r0, #1
 8001cce:	e7ec      	b.n	8001caa <HAL_RCC_ClockConfig+0x2e>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cd0:	4a3c      	ldr	r2, [pc, #240]	; (8001dc4 <HAL_RCC_ClockConfig+0x148>)
 8001cd2:	6812      	ldr	r2, [r2, #0]
 8001cd4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001cd8:	d070      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x140>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cda:	493a      	ldr	r1, [pc, #232]	; (8001dc4 <HAL_RCC_ClockConfig+0x148>)
 8001cdc:	688a      	ldr	r2, [r1, #8]
 8001cde:	f022 0203 	bic.w	r2, r2, #3
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001ce6:	f7ff f983 	bl	8000ff0 <HAL_GetTick>
 8001cea:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cec:	4b35      	ldr	r3, [pc, #212]	; (8001dc4 <HAL_RCC_ClockConfig+0x148>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f003 030c 	and.w	r3, r3, #12
 8001cf4:	6862      	ldr	r2, [r4, #4]
 8001cf6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001cfa:	d016      	beq.n	8001d2a <HAL_RCC_ClockConfig+0xae>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cfc:	f7ff f978 	bl	8000ff0 <HAL_GetTick>
 8001d00:	1b80      	subs	r0, r0, r6
 8001d02:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d06:	4298      	cmp	r0, r3
 8001d08:	d9f0      	bls.n	8001cec <HAL_RCC_ClockConfig+0x70>
        return HAL_TIMEOUT;
 8001d0a:	2003      	movs	r0, #3
 8001d0c:	e7cd      	b.n	8001caa <HAL_RCC_ClockConfig+0x2e>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d0e:	4a2d      	ldr	r2, [pc, #180]	; (8001dc4 <HAL_RCC_ClockConfig+0x148>)
 8001d10:	6812      	ldr	r2, [r2, #0]
 8001d12:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001d16:	d1e0      	bne.n	8001cda <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 8001d18:	2001      	movs	r0, #1
 8001d1a:	e7c6      	b.n	8001caa <HAL_RCC_ClockConfig+0x2e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d1c:	4a29      	ldr	r2, [pc, #164]	; (8001dc4 <HAL_RCC_ClockConfig+0x148>)
 8001d1e:	6812      	ldr	r2, [r2, #0]
 8001d20:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001d24:	d1d9      	bne.n	8001cda <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 8001d26:	2001      	movs	r0, #1
 8001d28:	e7bf      	b.n	8001caa <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d2a:	6823      	ldr	r3, [r4, #0]
 8001d2c:	f013 0f02 	tst.w	r3, #2
 8001d30:	d006      	beq.n	8001d40 <HAL_RCC_ClockConfig+0xc4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d32:	4a24      	ldr	r2, [pc, #144]	; (8001dc4 <HAL_RCC_ClockConfig+0x148>)
 8001d34:	6893      	ldr	r3, [r2, #8]
 8001d36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d3a:	68a1      	ldr	r1, [r4, #8]
 8001d3c:	430b      	orrs	r3, r1
 8001d3e:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d40:	4b1f      	ldr	r3, [pc, #124]	; (8001dc0 <HAL_RCC_ClockConfig+0x144>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	42ab      	cmp	r3, r5
 8001d4a:	d90c      	bls.n	8001d66 <HAL_RCC_ClockConfig+0xea>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4c:	4a1c      	ldr	r2, [pc, #112]	; (8001dc0 <HAL_RCC_ClockConfig+0x144>)
 8001d4e:	6813      	ldr	r3, [r2, #0]
 8001d50:	f023 0307 	bic.w	r3, r3, #7
 8001d54:	432b      	orrs	r3, r5
 8001d56:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d58:	6813      	ldr	r3, [r2, #0]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	42ab      	cmp	r3, r5
 8001d60:	d001      	beq.n	8001d66 <HAL_RCC_ClockConfig+0xea>
      return HAL_ERROR;
 8001d62:	2001      	movs	r0, #1
 8001d64:	e7a1      	b.n	8001caa <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d66:	6823      	ldr	r3, [r4, #0]
 8001d68:	f013 0f04 	tst.w	r3, #4
 8001d6c:	d006      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x100>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d6e:	4a15      	ldr	r2, [pc, #84]	; (8001dc4 <HAL_RCC_ClockConfig+0x148>)
 8001d70:	6893      	ldr	r3, [r2, #8]
 8001d72:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d76:	68e1      	ldr	r1, [r4, #12]
 8001d78:	430b      	orrs	r3, r1
 8001d7a:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d7c:	6823      	ldr	r3, [r4, #0]
 8001d7e:	f013 0f08 	tst.w	r3, #8
 8001d82:	d007      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x118>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d84:	4a0f      	ldr	r2, [pc, #60]	; (8001dc4 <HAL_RCC_ClockConfig+0x148>)
 8001d86:	6893      	ldr	r3, [r2, #8]
 8001d88:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001d8c:	6921      	ldr	r1, [r4, #16]
 8001d8e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001d92:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d94:	f7ff fbd2 	bl	800153c <HAL_RCC_GetSysClockFreq>
 8001d98:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <HAL_RCC_ClockConfig+0x148>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001da0:	4a09      	ldr	r2, [pc, #36]	; (8001dc8 <HAL_RCC_ClockConfig+0x14c>)
 8001da2:	5cd3      	ldrb	r3, [r2, r3]
 8001da4:	f003 031f 	and.w	r3, r3, #31
 8001da8:	40d8      	lsrs	r0, r3
 8001daa:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <HAL_RCC_ClockConfig+0x150>)
 8001dac:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <HAL_RCC_ClockConfig+0x154>)
 8001db0:	6818      	ldr	r0, [r3, #0]
 8001db2:	f7ff f8db 	bl	8000f6c <HAL_InitTick>
  return status;
 8001db6:	e778      	b.n	8001caa <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001db8:	2001      	movs	r0, #1
}
 8001dba:	4770      	bx	lr
        return HAL_ERROR;
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	e774      	b.n	8001caa <HAL_RCC_ClockConfig+0x2e>
 8001dc0:	40022000 	.word	0x40022000
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	08003410 	.word	0x08003410
 8001dcc:	20000000 	.word	0x20000000
 8001dd0:	20000008 	.word	0x20000008

08001dd4 <HAL_RCC_GetHCLKFreq>:
}
 8001dd4:	4b01      	ldr	r3, [pc, #4]	; (8001ddc <HAL_RCC_GetHCLKFreq+0x8>)
 8001dd6:	6818      	ldr	r0, [r3, #0]
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	20000000 	.word	0x20000000

08001de0 <HAL_RCC_GetPCLK1Freq>:
{
 8001de0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001de2:	f7ff fff7 	bl	8001dd4 <HAL_RCC_GetHCLKFreq>
 8001de6:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001dee:	4a04      	ldr	r2, [pc, #16]	; (8001e00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001df0:	5cd3      	ldrb	r3, [r2, r3]
 8001df2:	f003 031f 	and.w	r3, r3, #31
}
 8001df6:	40d8      	lsrs	r0, r3
 8001df8:	bd08      	pop	{r3, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	08003420 	.word	0x08003420

08001e04 <HAL_RCC_GetPCLK2Freq>:
{
 8001e04:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e06:	f7ff ffe5 	bl	8001dd4 <HAL_RCC_GetHCLKFreq>
 8001e0a:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001e12:	4a04      	ldr	r2, [pc, #16]	; (8001e24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e14:	5cd3      	ldrb	r3, [r2, r3]
 8001e16:	f003 031f 	and.w	r3, r3, #31
}
 8001e1a:	40d8      	lsrs	r0, r3
 8001e1c:	bd08      	pop	{r3, pc}
 8001e1e:	bf00      	nop
 8001e20:	40021000 	.word	0x40021000
 8001e24:	08003420 	.word	0x08003420

08001e28 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001e2a:	4b59      	ldr	r3, [pc, #356]	; (8001f90 <RCCEx_PLLSAI1_Config+0x168>)
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	f013 0f03 	tst.w	r3, #3
 8001e32:	d018      	beq.n	8001e66 <RCCEx_PLLSAI1_Config+0x3e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001e34:	4b56      	ldr	r3, [pc, #344]	; (8001f90 <RCCEx_PLLSAI1_Config+0x168>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	6802      	ldr	r2, [r0, #0]
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d002      	beq.n	8001e48 <RCCEx_PLLSAI1_Config+0x20>
 8001e42:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 8001e44:	4628      	mov	r0, r5
 8001e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8001e48:	2a00      	cmp	r2, #0
 8001e4a:	f000 809f 	beq.w	8001f8c <RCCEx_PLLSAI1_Config+0x164>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001e4e:	4b50      	ldr	r3, [pc, #320]	; (8001f90 <RCCEx_PLLSAI1_Config+0x168>)
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001e56:	3301      	adds	r3, #1
 8001e58:	6842      	ldr	r2, [r0, #4]
       ||
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d001      	beq.n	8001e62 <RCCEx_PLLSAI1_Config+0x3a>
 8001e5e:	2501      	movs	r5, #1
 8001e60:	e7f0      	b.n	8001e44 <RCCEx_PLLSAI1_Config+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 8001e62:	2500      	movs	r5, #0
 8001e64:	e01a      	b.n	8001e9c <RCCEx_PLLSAI1_Config+0x74>
    switch(PllSai1->PLLSAI1Source)
 8001e66:	6803      	ldr	r3, [r0, #0]
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d058      	beq.n	8001f1e <RCCEx_PLLSAI1_Config+0xf6>
 8001e6c:	2b03      	cmp	r3, #3
 8001e6e:	d05d      	beq.n	8001f2c <RCCEx_PLLSAI1_Config+0x104>
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d001      	beq.n	8001e78 <RCCEx_PLLSAI1_Config+0x50>
      status = HAL_ERROR;
 8001e74:	2501      	movs	r5, #1
 8001e76:	e00f      	b.n	8001e98 <RCCEx_PLLSAI1_Config+0x70>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001e78:	4a45      	ldr	r2, [pc, #276]	; (8001f90 <RCCEx_PLLSAI1_Config+0x168>)
 8001e7a:	6812      	ldr	r2, [r2, #0]
 8001e7c:	f012 0f02 	tst.w	r2, #2
 8001e80:	d060      	beq.n	8001f44 <RCCEx_PLLSAI1_Config+0x11c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001e82:	4d43      	ldr	r5, [pc, #268]	; (8001f90 <RCCEx_PLLSAI1_Config+0x168>)
 8001e84:	68ea      	ldr	r2, [r5, #12]
 8001e86:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8001e8a:	6844      	ldr	r4, [r0, #4]
 8001e8c:	3c01      	subs	r4, #1
 8001e8e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8001e92:	4313      	orrs	r3, r2
 8001e94:	60eb      	str	r3, [r5, #12]
 8001e96:	2500      	movs	r5, #0
  if(status == HAL_OK)
 8001e98:	2d00      	cmp	r5, #0
 8001e9a:	d1d3      	bne.n	8001e44 <RCCEx_PLLSAI1_Config+0x1c>
 8001e9c:	460f      	mov	r7, r1
 8001e9e:	4604      	mov	r4, r0
    __HAL_RCC_PLLSAI1_DISABLE();
 8001ea0:	4a3b      	ldr	r2, [pc, #236]	; (8001f90 <RCCEx_PLLSAI1_Config+0x168>)
 8001ea2:	6813      	ldr	r3, [r2, #0]
 8001ea4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001ea8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001eaa:	f7ff f8a1 	bl	8000ff0 <HAL_GetTick>
 8001eae:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001eb0:	4b37      	ldr	r3, [pc, #220]	; (8001f90 <RCCEx_PLLSAI1_Config+0x168>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001eb8:	d005      	beq.n	8001ec6 <RCCEx_PLLSAI1_Config+0x9e>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001eba:	f7ff f899 	bl	8000ff0 <HAL_GetTick>
 8001ebe:	1b80      	subs	r0, r0, r6
 8001ec0:	2802      	cmp	r0, #2
 8001ec2:	d9f5      	bls.n	8001eb0 <RCCEx_PLLSAI1_Config+0x88>
        status = HAL_TIMEOUT;
 8001ec4:	2503      	movs	r5, #3
    if(status == HAL_OK)
 8001ec6:	2d00      	cmp	r5, #0
 8001ec8:	d1bc      	bne.n	8001e44 <RCCEx_PLLSAI1_Config+0x1c>
      if(Divider == DIVIDER_P_UPDATE)
 8001eca:	2f00      	cmp	r7, #0
 8001ecc:	d13c      	bne.n	8001f48 <RCCEx_PLLSAI1_Config+0x120>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001ece:	4930      	ldr	r1, [pc, #192]	; (8001f90 <RCCEx_PLLSAI1_Config+0x168>)
 8001ed0:	690b      	ldr	r3, [r1, #16]
 8001ed2:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8001ed6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001eda:	68a0      	ldr	r0, [r4, #8]
 8001edc:	68e2      	ldr	r2, [r4, #12]
 8001ede:	06d2      	lsls	r2, r2, #27
 8001ee0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8001ee8:	4a29      	ldr	r2, [pc, #164]	; (8001f90 <RCCEx_PLLSAI1_Config+0x168>)
 8001eea:	6813      	ldr	r3, [r2, #0]
 8001eec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ef0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001ef2:	f7ff f87d 	bl	8000ff0 <HAL_GetTick>
 8001ef6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001ef8:	4b25      	ldr	r3, [pc, #148]	; (8001f90 <RCCEx_PLLSAI1_Config+0x168>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001f00:	d105      	bne.n	8001f0e <RCCEx_PLLSAI1_Config+0xe6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001f02:	f7ff f875 	bl	8000ff0 <HAL_GetTick>
 8001f06:	1b80      	subs	r0, r0, r6
 8001f08:	2802      	cmp	r0, #2
 8001f0a:	d9f5      	bls.n	8001ef8 <RCCEx_PLLSAI1_Config+0xd0>
          status = HAL_TIMEOUT;
 8001f0c:	2503      	movs	r5, #3
      if(status == HAL_OK)
 8001f0e:	2d00      	cmp	r5, #0
 8001f10:	d198      	bne.n	8001e44 <RCCEx_PLLSAI1_Config+0x1c>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001f12:	4a1f      	ldr	r2, [pc, #124]	; (8001f90 <RCCEx_PLLSAI1_Config+0x168>)
 8001f14:	6913      	ldr	r3, [r2, #16]
 8001f16:	69a1      	ldr	r1, [r4, #24]
 8001f18:	430b      	orrs	r3, r1
 8001f1a:	6113      	str	r3, [r2, #16]
 8001f1c:	e792      	b.n	8001e44 <RCCEx_PLLSAI1_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001f1e:	4a1c      	ldr	r2, [pc, #112]	; (8001f90 <RCCEx_PLLSAI1_Config+0x168>)
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001f26:	d1ac      	bne.n	8001e82 <RCCEx_PLLSAI1_Config+0x5a>
        status = HAL_ERROR;
 8001f28:	2501      	movs	r5, #1
 8001f2a:	e7b5      	b.n	8001e98 <RCCEx_PLLSAI1_Config+0x70>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001f2c:	4a18      	ldr	r2, [pc, #96]	; (8001f90 <RCCEx_PLLSAI1_Config+0x168>)
 8001f2e:	6812      	ldr	r2, [r2, #0]
 8001f30:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001f34:	d1a5      	bne.n	8001e82 <RCCEx_PLLSAI1_Config+0x5a>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001f36:	4a16      	ldr	r2, [pc, #88]	; (8001f90 <RCCEx_PLLSAI1_Config+0x168>)
 8001f38:	6812      	ldr	r2, [r2, #0]
 8001f3a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001f3e:	d1a0      	bne.n	8001e82 <RCCEx_PLLSAI1_Config+0x5a>
          status = HAL_ERROR;
 8001f40:	2501      	movs	r5, #1
 8001f42:	e7a9      	b.n	8001e98 <RCCEx_PLLSAI1_Config+0x70>
        status = HAL_ERROR;
 8001f44:	2501      	movs	r5, #1
 8001f46:	e7a7      	b.n	8001e98 <RCCEx_PLLSAI1_Config+0x70>
      else if(Divider == DIVIDER_Q_UPDATE)
 8001f48:	2f01      	cmp	r7, #1
 8001f4a:	d00f      	beq.n	8001f6c <RCCEx_PLLSAI1_Config+0x144>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001f4c:	4810      	ldr	r0, [pc, #64]	; (8001f90 <RCCEx_PLLSAI1_Config+0x168>)
 8001f4e:	6902      	ldr	r2, [r0, #16]
 8001f50:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8001f54:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001f58:	68a1      	ldr	r1, [r4, #8]
 8001f5a:	6963      	ldr	r3, [r4, #20]
 8001f5c:	085b      	lsrs	r3, r3, #1
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	065b      	lsls	r3, r3, #25
 8001f62:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001f66:	4313      	orrs	r3, r2
 8001f68:	6103      	str	r3, [r0, #16]
 8001f6a:	e7bd      	b.n	8001ee8 <RCCEx_PLLSAI1_Config+0xc0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001f6c:	4808      	ldr	r0, [pc, #32]	; (8001f90 <RCCEx_PLLSAI1_Config+0x168>)
 8001f6e:	6902      	ldr	r2, [r0, #16]
 8001f70:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001f74:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001f78:	68a1      	ldr	r1, [r4, #8]
 8001f7a:	6923      	ldr	r3, [r4, #16]
 8001f7c:	085b      	lsrs	r3, r3, #1
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	055b      	lsls	r3, r3, #21
 8001f82:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001f86:	4313      	orrs	r3, r2
 8001f88:	6103      	str	r3, [r0, #16]
 8001f8a:	e7ad      	b.n	8001ee8 <RCCEx_PLLSAI1_Config+0xc0>
 8001f8c:	2501      	movs	r5, #1
 8001f8e:	e759      	b.n	8001e44 <RCCEx_PLLSAI1_Config+0x1c>
 8001f90:	40021000 	.word	0x40021000

08001f94 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f9c:	6803      	ldr	r3, [r0, #0]
 8001f9e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8001fa2:	d026      	beq.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001fa4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001fa6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001faa:	d006      	beq.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001fac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fb0:	d01d      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x5a>
 8001fb2:	b19b      	cbz	r3, 8001fdc <HAL_RCCEx_PeriphCLKConfig+0x48>
      ret = HAL_ERROR;
 8001fb4:	2601      	movs	r6, #1
 8001fb6:	4637      	mov	r7, r6
 8001fb8:	e01d      	b.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x62>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001fba:	4aae      	ldr	r2, [pc, #696]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001fbc:	68d3      	ldr	r3, [r2, #12]
 8001fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc2:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fc4:	2700      	movs	r7, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fc6:	4aab      	ldr	r2, [pc, #684]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001fc8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001fcc:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001fd0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001fd2:	430b      	orrs	r3, r1
 8001fd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fd8:	2600      	movs	r6, #0
 8001fda:	e00c      	b.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x62>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fdc:	2100      	movs	r1, #0
 8001fde:	3004      	adds	r0, #4
 8001fe0:	f7ff ff22 	bl	8001e28 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 8001fe4:	4607      	mov	r7, r0
 8001fe6:	2800      	cmp	r0, #0
 8001fe8:	d0ed      	beq.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x32>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fea:	4606      	mov	r6, r0
 8001fec:	e003      	b.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x62>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fee:	2700      	movs	r7, #0
 8001ff0:	e7e9      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x32>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ff2:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ff4:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ff6:	6823      	ldr	r3, [r4, #0]
 8001ff8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001ffc:	d06b      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x142>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ffe:	4b9d      	ldr	r3, [pc, #628]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002002:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002006:	d14c      	bne.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002008:	4b9a      	ldr	r3, [pc, #616]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800200a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800200c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002010:	659a      	str	r2, [r3, #88]	; 0x58
 8002012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002018:	9301      	str	r3, [sp, #4]
 800201a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800201c:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002020:	4a95      	ldr	r2, [pc, #596]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002022:	6813      	ldr	r3, [r2, #0]
 8002024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002028:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800202a:	f7fe ffe1 	bl	8000ff0 <HAL_GetTick>
 800202e:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002030:	4b91      	ldr	r3, [pc, #580]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002038:	d105      	bne.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800203a:	f7fe ffd9 	bl	8000ff0 <HAL_GetTick>
 800203e:	1b40      	subs	r0, r0, r5
 8002040:	2802      	cmp	r0, #2
 8002042:	d9f5      	bls.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x9c>
        ret = HAL_TIMEOUT;
 8002044:	2703      	movs	r7, #3
    if(ret == HAL_OK)
 8002046:	2f00      	cmp	r7, #0
 8002048:	d140      	bne.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x138>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800204a:	4b8a      	ldr	r3, [pc, #552]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800204c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002050:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002054:	d015      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8002056:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002058:	429a      	cmp	r2, r3
 800205a:	d012      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0xee>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800205c:	4a85      	ldr	r2, [pc, #532]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800205e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8002066:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 800206a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800206e:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002072:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8002076:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800207a:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800207e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002082:	f013 0f01 	tst.w	r3, #1
 8002086:	d10f      	bne.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      if(ret == HAL_OK)
 8002088:	2f00      	cmp	r7, #0
 800208a:	f040 80c9 	bne.w	8002220 <HAL_RCCEx_PeriphCLKConfig+0x28c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800208e:	4a79      	ldr	r2, [pc, #484]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002090:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002094:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002098:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800209a:	430b      	orrs	r3, r1
 800209c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020a0:	e015      	b.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x13a>
    FlagStatus       pwrclkchanged = RESET;
 80020a2:	f04f 0800 	mov.w	r8, #0
 80020a6:	e7bb      	b.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        tickstart = HAL_GetTick();
 80020a8:	f7fe ffa2 	bl	8000ff0 <HAL_GetTick>
 80020ac:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ae:	4b71      	ldr	r3, [pc, #452]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80020b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b4:	f013 0f02 	tst.w	r3, #2
 80020b8:	d1e6      	bne.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ba:	f7fe ff99 	bl	8000ff0 <HAL_GetTick>
 80020be:	1b40      	subs	r0, r0, r5
 80020c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80020c4:	4298      	cmp	r0, r3
 80020c6:	d9f2      	bls.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x11a>
            ret = HAL_TIMEOUT;
 80020c8:	2703      	movs	r7, #3
 80020ca:	e7dd      	b.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      status = ret;
 80020cc:	463e      	mov	r6, r7
    if(pwrclkchanged == SET)
 80020ce:	f1b8 0f00 	cmp.w	r8, #0
 80020d2:	f040 80a7 	bne.w	8002224 <HAL_RCCEx_PeriphCLKConfig+0x290>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020d6:	6823      	ldr	r3, [r4, #0]
 80020d8:	f013 0f01 	tst.w	r3, #1
 80020dc:	d008      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020de:	4a65      	ldr	r2, [pc, #404]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80020e0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80020e4:	f023 0303 	bic.w	r3, r3, #3
 80020e8:	6a21      	ldr	r1, [r4, #32]
 80020ea:	430b      	orrs	r3, r1
 80020ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020f0:	6823      	ldr	r3, [r4, #0]
 80020f2:	f013 0f02 	tst.w	r3, #2
 80020f6:	d008      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x176>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020f8:	4a5e      	ldr	r2, [pc, #376]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80020fa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80020fe:	f023 030c 	bic.w	r3, r3, #12
 8002102:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002104:	430b      	orrs	r3, r1
 8002106:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800210a:	6823      	ldr	r3, [r4, #0]
 800210c:	f013 0f20 	tst.w	r3, #32
 8002110:	d008      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x190>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002112:	4a58      	ldr	r2, [pc, #352]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002114:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002118:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800211c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800211e:	430b      	orrs	r3, r1
 8002120:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002124:	6823      	ldr	r3, [r4, #0]
 8002126:	f413 7f00 	tst.w	r3, #512	; 0x200
 800212a:	d008      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800212c:	4a51      	ldr	r2, [pc, #324]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800212e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002132:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002136:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002138:	430b      	orrs	r3, r1
 800213a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800213e:	6823      	ldr	r3, [r4, #0]
 8002140:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002144:	d008      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002146:	4a4b      	ldr	r2, [pc, #300]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002148:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800214c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002150:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002152:	430b      	orrs	r3, r1
 8002154:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002158:	6823      	ldr	r3, [r4, #0]
 800215a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800215e:	d008      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002160:	4a44      	ldr	r2, [pc, #272]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002162:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002166:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800216a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800216c:	430b      	orrs	r3, r1
 800216e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002172:	6823      	ldr	r3, [r4, #0]
 8002174:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002178:	d008      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800217a:	4a3e      	ldr	r2, [pc, #248]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800217c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002180:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002184:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002186:	430b      	orrs	r3, r1
 8002188:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800218c:	6823      	ldr	r3, [r4, #0]
 800218e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002192:	d00f      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002194:	4a37      	ldr	r2, [pc, #220]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002196:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800219a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800219e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80021a0:	430b      	orrs	r3, r1
 80021a2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021ac:	d040      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80021ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021b2:	d042      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021b4:	6823      	ldr	r3, [r4, #0]
 80021b6:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80021ba:	d00f      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x248>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021bc:	4a2d      	ldr	r2, [pc, #180]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80021be:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80021c2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80021c6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80021c8:	430b      	orrs	r3, r1
 80021ca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80021d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021d4:	d039      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80021d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021da:	d03b      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021dc:	6823      	ldr	r3, [r4, #0]
 80021de:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80021e2:	d00c      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x26a>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021e4:	4a23      	ldr	r2, [pc, #140]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80021e6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80021ea:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80021ee:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80021f0:	430b      	orrs	r3, r1
 80021f2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80021f6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80021f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021fc:	d032      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80021fe:	6823      	ldr	r3, [r4, #0]
 8002200:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002204:	d008      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002206:	4a1b      	ldr	r2, [pc, #108]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002208:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800220c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002210:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002212:	430b      	orrs	r3, r1
 8002214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002218:	4630      	mov	r0, r6
 800221a:	b002      	add	sp, #8
 800221c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 8002220:	463e      	mov	r6, r7
 8002222:	e754      	b.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x13a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002224:	4a13      	ldr	r2, [pc, #76]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002226:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800222c:	6593      	str	r3, [r2, #88]	; 0x58
 800222e:	e752      	b.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x142>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002230:	68d3      	ldr	r3, [r2, #12]
 8002232:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002236:	60d3      	str	r3, [r2, #12]
 8002238:	e7bc      	b.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x220>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800223a:	2101      	movs	r1, #1
 800223c:	1d20      	adds	r0, r4, #4
 800223e:	f7ff fdf3 	bl	8001e28 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002242:	2800      	cmp	r0, #0
 8002244:	d0b6      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x220>
          status = ret;
 8002246:	4606      	mov	r6, r0
 8002248:	e7b4      	b.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800224a:	68d3      	ldr	r3, [r2, #12]
 800224c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002250:	60d3      	str	r3, [r2, #12]
 8002252:	e7c3      	b.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x248>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002254:	2101      	movs	r1, #1
 8002256:	1d20      	adds	r0, r4, #4
 8002258:	f7ff fde6 	bl	8001e28 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800225c:	2800      	cmp	r0, #0
 800225e:	d0bd      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x248>
        status = ret;
 8002260:	4606      	mov	r6, r0
 8002262:	e7bb      	b.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x248>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002264:	2102      	movs	r1, #2
 8002266:	1d20      	adds	r0, r4, #4
 8002268:	f7ff fdde 	bl	8001e28 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800226c:	2800      	cmp	r0, #0
 800226e:	d0c6      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x26a>
        status = ret;
 8002270:	4606      	mov	r6, r0
 8002272:	e7c4      	b.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8002274:	40021000 	.word	0x40021000
 8002278:	40007000 	.word	0x40007000

0800227c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800227c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800227e:	6a03      	ldr	r3, [r0, #32]
 8002280:	f023 0301 	bic.w	r3, r3, #1
 8002284:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002286:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002288:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800228a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800228c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002290:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002294:	680d      	ldr	r5, [r1, #0]
 8002296:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002298:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800229c:	688d      	ldr	r5, [r1, #8]
 800229e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80022a0:	4d14      	ldr	r5, [pc, #80]	; (80022f4 <TIM_OC1_SetConfig+0x78>)
 80022a2:	42a8      	cmp	r0, r5
 80022a4:	d007      	beq.n	80022b6 <TIM_OC1_SetConfig+0x3a>
 80022a6:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80022aa:	42a8      	cmp	r0, r5
 80022ac:	d003      	beq.n	80022b6 <TIM_OC1_SetConfig+0x3a>
 80022ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80022b2:	42a8      	cmp	r0, r5
 80022b4:	d105      	bne.n	80022c2 <TIM_OC1_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80022b6:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80022ba:	68cd      	ldr	r5, [r1, #12]
 80022bc:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80022be:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022c2:	4d0c      	ldr	r5, [pc, #48]	; (80022f4 <TIM_OC1_SetConfig+0x78>)
 80022c4:	42a8      	cmp	r0, r5
 80022c6:	d007      	beq.n	80022d8 <TIM_OC1_SetConfig+0x5c>
 80022c8:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80022cc:	42a8      	cmp	r0, r5
 80022ce:	d003      	beq.n	80022d8 <TIM_OC1_SetConfig+0x5c>
 80022d0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80022d4:	42a8      	cmp	r0, r5
 80022d6:	d105      	bne.n	80022e4 <TIM_OC1_SetConfig+0x68>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80022d8:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80022dc:	694c      	ldr	r4, [r1, #20]
 80022de:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80022e0:	698d      	ldr	r5, [r1, #24]
 80022e2:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022e4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022e6:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80022e8:	684a      	ldr	r2, [r1, #4]
 80022ea:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022ec:	6203      	str	r3, [r0, #32]
}
 80022ee:	bc30      	pop	{r4, r5}
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	40012c00 	.word	0x40012c00

080022f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022f8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80022fa:	6a03      	ldr	r3, [r0, #32]
 80022fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002300:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002302:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002304:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002306:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002308:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800230c:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002310:	680d      	ldr	r5, [r1, #0]
 8002312:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002314:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002318:	688d      	ldr	r5, [r1, #8]
 800231a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800231e:	4d12      	ldr	r5, [pc, #72]	; (8002368 <TIM_OC3_SetConfig+0x70>)
 8002320:	42a8      	cmp	r0, r5
 8002322:	d019      	beq.n	8002358 <TIM_OC3_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002324:	4d10      	ldr	r5, [pc, #64]	; (8002368 <TIM_OC3_SetConfig+0x70>)
 8002326:	42a8      	cmp	r0, r5
 8002328:	d007      	beq.n	800233a <TIM_OC3_SetConfig+0x42>
 800232a:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800232e:	42a8      	cmp	r0, r5
 8002330:	d003      	beq.n	800233a <TIM_OC3_SetConfig+0x42>
 8002332:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002336:	42a8      	cmp	r0, r5
 8002338:	d107      	bne.n	800234a <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800233a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800233e:	694d      	ldr	r5, [r1, #20]
 8002340:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002344:	698d      	ldr	r5, [r1, #24]
 8002346:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800234a:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800234c:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800234e:	684a      	ldr	r2, [r1, #4]
 8002350:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002352:	6203      	str	r3, [r0, #32]
}
 8002354:	bc30      	pop	{r4, r5}
 8002356:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8002358:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800235c:	68cd      	ldr	r5, [r1, #12]
 800235e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8002362:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002366:	e7dd      	b.n	8002324 <TIM_OC3_SetConfig+0x2c>
 8002368:	40012c00 	.word	0x40012c00

0800236c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800236c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800236e:	6a03      	ldr	r3, [r0, #32]
 8002370:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002374:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002376:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002378:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800237a:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800237c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002380:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002384:	680d      	ldr	r5, [r1, #0]
 8002386:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800238a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800238e:	688d      	ldr	r5, [r1, #8]
 8002390:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002394:	4d0b      	ldr	r5, [pc, #44]	; (80023c4 <TIM_OC4_SetConfig+0x58>)
 8002396:	42a8      	cmp	r0, r5
 8002398:	d007      	beq.n	80023aa <TIM_OC4_SetConfig+0x3e>
 800239a:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800239e:	42a8      	cmp	r0, r5
 80023a0:	d003      	beq.n	80023aa <TIM_OC4_SetConfig+0x3e>
 80023a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80023a6:	42a8      	cmp	r0, r5
 80023a8:	d104      	bne.n	80023b4 <TIM_OC4_SetConfig+0x48>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80023aa:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80023ae:	694d      	ldr	r5, [r1, #20]
 80023b0:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023b4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023b6:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80023b8:	684b      	ldr	r3, [r1, #4]
 80023ba:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023bc:	6202      	str	r2, [r0, #32]
}
 80023be:	bc30      	pop	{r4, r5}
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40012c00 	.word	0x40012c00

080023c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80023c8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80023ca:	6a03      	ldr	r3, [r0, #32]
 80023cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023d2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023d4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80023d6:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80023d8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80023dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023e0:	680d      	ldr	r5, [r1, #0]
 80023e2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80023e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80023e8:	688d      	ldr	r5, [r1, #8]
 80023ea:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023ee:	4d0b      	ldr	r5, [pc, #44]	; (800241c <TIM_OC5_SetConfig+0x54>)
 80023f0:	42a8      	cmp	r0, r5
 80023f2:	d007      	beq.n	8002404 <TIM_OC5_SetConfig+0x3c>
 80023f4:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80023f8:	42a8      	cmp	r0, r5
 80023fa:	d003      	beq.n	8002404 <TIM_OC5_SetConfig+0x3c>
 80023fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002400:	42a8      	cmp	r0, r5
 8002402:	d104      	bne.n	800240e <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002404:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002408:	694d      	ldr	r5, [r1, #20]
 800240a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800240e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002410:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002412:	684a      	ldr	r2, [r1, #4]
 8002414:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002416:	6203      	str	r3, [r0, #32]
}
 8002418:	bc30      	pop	{r4, r5}
 800241a:	4770      	bx	lr
 800241c:	40012c00 	.word	0x40012c00

08002420 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002420:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002422:	6a03      	ldr	r3, [r0, #32]
 8002424:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002428:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800242a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800242c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800242e:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002430:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002438:	680d      	ldr	r5, [r1, #0]
 800243a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800243e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002442:	688d      	ldr	r5, [r1, #8]
 8002444:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002448:	4d0b      	ldr	r5, [pc, #44]	; (8002478 <TIM_OC6_SetConfig+0x58>)
 800244a:	42a8      	cmp	r0, r5
 800244c:	d007      	beq.n	800245e <TIM_OC6_SetConfig+0x3e>
 800244e:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8002452:	42a8      	cmp	r0, r5
 8002454:	d003      	beq.n	800245e <TIM_OC6_SetConfig+0x3e>
 8002456:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800245a:	42a8      	cmp	r0, r5
 800245c:	d104      	bne.n	8002468 <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800245e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002462:	694d      	ldr	r5, [r1, #20]
 8002464:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002468:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800246a:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800246c:	684b      	ldr	r3, [r1, #4]
 800246e:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002470:	6202      	str	r2, [r0, #32]
}
 8002472:	bc30      	pop	{r4, r5}
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	40012c00 	.word	0x40012c00

0800247c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800247c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800247e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002480:	6a04      	ldr	r4, [r0, #32]
 8002482:	f024 0401 	bic.w	r4, r4, #1
 8002486:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002488:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800248a:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800248e:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002492:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8002496:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002498:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800249a:	6203      	str	r3, [r0, #32]
}
 800249c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024a2:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024a4:	6a03      	ldr	r3, [r0, #32]
 80024a6:	f023 0310 	bic.w	r3, r3, #16
 80024aa:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024ac:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80024ae:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024b0:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024b4:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80024bc:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024c0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80024c2:	6203      	str	r3, [r0, #32]
}
 80024c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024ca:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024d0:	4319      	orrs	r1, r3
 80024d2:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024d6:	6081      	str	r1, [r0, #8]
}
 80024d8:	4770      	bx	lr

080024da <HAL_TIM_Base_Stop>:
  __HAL_TIM_DISABLE(htim);
 80024da:	6803      	ldr	r3, [r0, #0]
 80024dc:	6a19      	ldr	r1, [r3, #32]
 80024de:	f241 1211 	movw	r2, #4369	; 0x1111
 80024e2:	4211      	tst	r1, r2
 80024e4:	d108      	bne.n	80024f8 <HAL_TIM_Base_Stop+0x1e>
 80024e6:	6a19      	ldr	r1, [r3, #32]
 80024e8:	f240 4244 	movw	r2, #1092	; 0x444
 80024ec:	4211      	tst	r1, r2
 80024ee:	d103      	bne.n	80024f8 <HAL_TIM_Base_Stop+0x1e>
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	f022 0201 	bic.w	r2, r2, #1
 80024f6:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80024f8:	2301      	movs	r3, #1
 80024fa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80024fe:	2000      	movs	r0, #0
 8002500:	4770      	bx	lr

08002502 <HAL_TIM_PWM_MspInit>:
}
 8002502:	4770      	bx	lr

08002504 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002504:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002506:	4a1a      	ldr	r2, [pc, #104]	; (8002570 <TIM_Base_SetConfig+0x6c>)
 8002508:	4290      	cmp	r0, r2
 800250a:	d002      	beq.n	8002512 <TIM_Base_SetConfig+0xe>
 800250c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002510:	d103      	bne.n	800251a <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002516:	684a      	ldr	r2, [r1, #4]
 8002518:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800251a:	4a15      	ldr	r2, [pc, #84]	; (8002570 <TIM_Base_SetConfig+0x6c>)
 800251c:	4290      	cmp	r0, r2
 800251e:	d00a      	beq.n	8002536 <TIM_Base_SetConfig+0x32>
 8002520:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002524:	d007      	beq.n	8002536 <TIM_Base_SetConfig+0x32>
 8002526:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 800252a:	4290      	cmp	r0, r2
 800252c:	d003      	beq.n	8002536 <TIM_Base_SetConfig+0x32>
 800252e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002532:	4290      	cmp	r0, r2
 8002534:	d103      	bne.n	800253e <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800253a:	68ca      	ldr	r2, [r1, #12]
 800253c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800253e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002542:	694a      	ldr	r2, [r1, #20]
 8002544:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002546:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002548:	688b      	ldr	r3, [r1, #8]
 800254a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800254c:	680b      	ldr	r3, [r1, #0]
 800254e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002550:	4b07      	ldr	r3, [pc, #28]	; (8002570 <TIM_Base_SetConfig+0x6c>)
 8002552:	4298      	cmp	r0, r3
 8002554:	d007      	beq.n	8002566 <TIM_Base_SetConfig+0x62>
 8002556:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800255a:	4298      	cmp	r0, r3
 800255c:	d003      	beq.n	8002566 <TIM_Base_SetConfig+0x62>
 800255e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002562:	4298      	cmp	r0, r3
 8002564:	d101      	bne.n	800256a <TIM_Base_SetConfig+0x66>
    TIMx->RCR = Structure->RepetitionCounter;
 8002566:	690b      	ldr	r3, [r1, #16]
 8002568:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800256a:	2301      	movs	r3, #1
 800256c:	6143      	str	r3, [r0, #20]
}
 800256e:	4770      	bx	lr
 8002570:	40012c00 	.word	0x40012c00

08002574 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002574:	b358      	cbz	r0, 80025ce <HAL_TIM_Base_Init+0x5a>
{
 8002576:	b510      	push	{r4, lr}
 8002578:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800257a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800257e:	b30b      	cbz	r3, 80025c4 <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8002580:	2302      	movs	r3, #2
 8002582:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002586:	1d21      	adds	r1, r4, #4
 8002588:	6820      	ldr	r0, [r4, #0]
 800258a:	f7ff ffbb 	bl	8002504 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800258e:	2301      	movs	r3, #1
 8002590:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002594:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002598:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800259c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80025a0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80025a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80025a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ac:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80025b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80025b4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80025b8:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80025bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80025c0:	2000      	movs	r0, #0
}
 80025c2:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80025c4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80025c8:	f7fe f95e 	bl	8000888 <HAL_TIM_Base_MspInit>
 80025cc:	e7d8      	b.n	8002580 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80025ce:	2001      	movs	r0, #1
}
 80025d0:	4770      	bx	lr

080025d2 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 80025d2:	b358      	cbz	r0, 800262c <HAL_TIM_OC_Init+0x5a>
{
 80025d4:	b510      	push	{r4, lr}
 80025d6:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80025d8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80025dc:	b30b      	cbz	r3, 8002622 <HAL_TIM_OC_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 80025de:	2302      	movs	r3, #2
 80025e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80025e4:	1d21      	adds	r1, r4, #4
 80025e6:	6820      	ldr	r0, [r4, #0]
 80025e8:	f7ff ff8c 	bl	8002504 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025ec:	2301      	movs	r3, #1
 80025ee:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80025f6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80025fa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80025fe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8002602:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002606:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800260a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800260e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002612:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8002616:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800261a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800261e:	2000      	movs	r0, #0
}
 8002620:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002622:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8002626:	f7fe f919 	bl	800085c <HAL_TIM_OC_MspInit>
 800262a:	e7d8      	b.n	80025de <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 800262c:	2001      	movs	r0, #1
}
 800262e:	4770      	bx	lr

08002630 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8002630:	b358      	cbz	r0, 800268a <HAL_TIM_PWM_Init+0x5a>
{
 8002632:	b510      	push	{r4, lr}
 8002634:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002636:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800263a:	b30b      	cbz	r3, 8002680 <HAL_TIM_PWM_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 800263c:	2302      	movs	r3, #2
 800263e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002642:	1d21      	adds	r1, r4, #4
 8002644:	6820      	ldr	r0, [r4, #0]
 8002646:	f7ff ff5d 	bl	8002504 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800264a:	2301      	movs	r3, #1
 800264c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002650:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002654:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002658:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800265c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8002660:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002668:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800266c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002670:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8002674:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8002678:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800267c:	2000      	movs	r0, #0
}
 800267e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002680:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002684:	f7ff ff3d 	bl	8002502 <HAL_TIM_PWM_MspInit>
 8002688:	e7d8      	b.n	800263c <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800268a:	2001      	movs	r0, #1
}
 800268c:	4770      	bx	lr
	...

08002690 <TIM_OC2_SetConfig>:
{
 8002690:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002692:	6a03      	ldr	r3, [r0, #32]
 8002694:	f023 0310 	bic.w	r3, r3, #16
 8002698:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800269a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800269c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800269e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80026a0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80026a4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026a8:	680d      	ldr	r5, [r1, #0]
 80026aa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80026ae:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026b2:	688d      	ldr	r5, [r1, #8]
 80026b4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026b8:	4d12      	ldr	r5, [pc, #72]	; (8002704 <TIM_OC2_SetConfig+0x74>)
 80026ba:	42a8      	cmp	r0, r5
 80026bc:	d019      	beq.n	80026f2 <TIM_OC2_SetConfig+0x62>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026be:	4d11      	ldr	r5, [pc, #68]	; (8002704 <TIM_OC2_SetConfig+0x74>)
 80026c0:	42a8      	cmp	r0, r5
 80026c2:	d007      	beq.n	80026d4 <TIM_OC2_SetConfig+0x44>
 80026c4:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80026c8:	42a8      	cmp	r0, r5
 80026ca:	d003      	beq.n	80026d4 <TIM_OC2_SetConfig+0x44>
 80026cc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80026d0:	42a8      	cmp	r0, r5
 80026d2:	d107      	bne.n	80026e4 <TIM_OC2_SetConfig+0x54>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026d4:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026d8:	694d      	ldr	r5, [r1, #20]
 80026da:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026de:	698d      	ldr	r5, [r1, #24]
 80026e0:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80026e4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80026e6:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80026e8:	684a      	ldr	r2, [r1, #4]
 80026ea:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80026ec:	6203      	str	r3, [r0, #32]
}
 80026ee:	bc30      	pop	{r4, r5}
 80026f0:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80026f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026f6:	68cd      	ldr	r5, [r1, #12]
 80026f8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80026fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002700:	e7dd      	b.n	80026be <TIM_OC2_SetConfig+0x2e>
 8002702:	bf00      	nop
 8002704:	40012c00 	.word	0x40012c00

08002708 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8002708:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800270c:	2b01      	cmp	r3, #1
 800270e:	d02e      	beq.n	800276e <HAL_TIM_OC_ConfigChannel+0x66>
{
 8002710:	b510      	push	{r4, lr}
 8002712:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002714:	2301      	movs	r3, #1
 8002716:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800271a:	2a14      	cmp	r2, #20
 800271c:	d80f      	bhi.n	800273e <HAL_TIM_OC_ConfigChannel+0x36>
 800271e:	e8df f002 	tbb	[pc, r2]
 8002722:	0e0b      	.short	0x0e0b
 8002724:	0e120e0e 	.word	0x0e120e0e
 8002728:	0e160e0e 	.word	0x0e160e0e
 800272c:	0e1a0e0e 	.word	0x0e1a0e0e
 8002730:	0e1e0e0e 	.word	0x0e1e0e0e
 8002734:	0e0e      	.short	0x0e0e
 8002736:	22          	.byte	0x22
 8002737:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002738:	6800      	ldr	r0, [r0, #0]
 800273a:	f7ff fd9f 	bl	800227c <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 800273e:	2000      	movs	r0, #0
 8002740:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002744:	bd10      	pop	{r4, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002746:	6800      	ldr	r0, [r0, #0]
 8002748:	f7ff ffa2 	bl	8002690 <TIM_OC2_SetConfig>
      break;
 800274c:	e7f7      	b.n	800273e <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800274e:	6800      	ldr	r0, [r0, #0]
 8002750:	f7ff fdd2 	bl	80022f8 <TIM_OC3_SetConfig>
      break;
 8002754:	e7f3      	b.n	800273e <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002756:	6800      	ldr	r0, [r0, #0]
 8002758:	f7ff fe08 	bl	800236c <TIM_OC4_SetConfig>
      break;
 800275c:	e7ef      	b.n	800273e <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800275e:	6800      	ldr	r0, [r0, #0]
 8002760:	f7ff fe32 	bl	80023c8 <TIM_OC5_SetConfig>
      break;
 8002764:	e7eb      	b.n	800273e <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002766:	6800      	ldr	r0, [r0, #0]
 8002768:	f7ff fe5a 	bl	8002420 <TIM_OC6_SetConfig>
      break;
 800276c:	e7e7      	b.n	800273e <HAL_TIM_OC_ConfigChannel+0x36>
  __HAL_LOCK(htim);
 800276e:	2002      	movs	r0, #2
}
 8002770:	4770      	bx	lr

08002772 <HAL_TIM_PWM_ConfigChannel>:
{
 8002772:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002774:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002778:	2b01      	cmp	r3, #1
 800277a:	f000 808c 	beq.w	8002896 <HAL_TIM_PWM_ConfigChannel+0x124>
 800277e:	460d      	mov	r5, r1
 8002780:	4604      	mov	r4, r0
 8002782:	2301      	movs	r3, #1
 8002784:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8002788:	2a14      	cmp	r2, #20
 800278a:	d81e      	bhi.n	80027ca <HAL_TIM_PWM_ConfigChannel+0x58>
 800278c:	e8df f002 	tbb	[pc, r2]
 8002790:	1d1d1d0b 	.word	0x1d1d1d0b
 8002794:	1d1d1d21 	.word	0x1d1d1d21
 8002798:	1d1d1d35 	.word	0x1d1d1d35
 800279c:	1d1d1d48 	.word	0x1d1d1d48
 80027a0:	1d1d1d5c 	.word	0x1d1d1d5c
 80027a4:	6f          	.byte	0x6f
 80027a5:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027a6:	6800      	ldr	r0, [r0, #0]
 80027a8:	f7ff fd68 	bl	800227c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027ac:	6822      	ldr	r2, [r4, #0]
 80027ae:	6993      	ldr	r3, [r2, #24]
 80027b0:	f043 0308 	orr.w	r3, r3, #8
 80027b4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80027b6:	6822      	ldr	r2, [r4, #0]
 80027b8:	6993      	ldr	r3, [r2, #24]
 80027ba:	f023 0304 	bic.w	r3, r3, #4
 80027be:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027c0:	6822      	ldr	r2, [r4, #0]
 80027c2:	6993      	ldr	r3, [r2, #24]
 80027c4:	6929      	ldr	r1, [r5, #16]
 80027c6:	430b      	orrs	r3, r1
 80027c8:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 80027ca:	2000      	movs	r0, #0
 80027cc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80027d0:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027d2:	6800      	ldr	r0, [r0, #0]
 80027d4:	f7ff ff5c 	bl	8002690 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027d8:	6822      	ldr	r2, [r4, #0]
 80027da:	6993      	ldr	r3, [r2, #24]
 80027dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027e0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027e2:	6822      	ldr	r2, [r4, #0]
 80027e4:	6993      	ldr	r3, [r2, #24]
 80027e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027ea:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027ec:	6822      	ldr	r2, [r4, #0]
 80027ee:	6993      	ldr	r3, [r2, #24]
 80027f0:	6929      	ldr	r1, [r5, #16]
 80027f2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80027f6:	6193      	str	r3, [r2, #24]
      break;
 80027f8:	e7e7      	b.n	80027ca <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027fa:	6800      	ldr	r0, [r0, #0]
 80027fc:	f7ff fd7c 	bl	80022f8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002800:	6822      	ldr	r2, [r4, #0]
 8002802:	69d3      	ldr	r3, [r2, #28]
 8002804:	f043 0308 	orr.w	r3, r3, #8
 8002808:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800280a:	6822      	ldr	r2, [r4, #0]
 800280c:	69d3      	ldr	r3, [r2, #28]
 800280e:	f023 0304 	bic.w	r3, r3, #4
 8002812:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002814:	6822      	ldr	r2, [r4, #0]
 8002816:	69d3      	ldr	r3, [r2, #28]
 8002818:	6929      	ldr	r1, [r5, #16]
 800281a:	430b      	orrs	r3, r1
 800281c:	61d3      	str	r3, [r2, #28]
      break;
 800281e:	e7d4      	b.n	80027ca <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002820:	6800      	ldr	r0, [r0, #0]
 8002822:	f7ff fda3 	bl	800236c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002826:	6822      	ldr	r2, [r4, #0]
 8002828:	69d3      	ldr	r3, [r2, #28]
 800282a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800282e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002830:	6822      	ldr	r2, [r4, #0]
 8002832:	69d3      	ldr	r3, [r2, #28]
 8002834:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002838:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800283a:	6822      	ldr	r2, [r4, #0]
 800283c:	69d3      	ldr	r3, [r2, #28]
 800283e:	6929      	ldr	r1, [r5, #16]
 8002840:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002844:	61d3      	str	r3, [r2, #28]
      break;
 8002846:	e7c0      	b.n	80027ca <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002848:	6800      	ldr	r0, [r0, #0]
 800284a:	f7ff fdbd 	bl	80023c8 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800284e:	6822      	ldr	r2, [r4, #0]
 8002850:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002852:	f043 0308 	orr.w	r3, r3, #8
 8002856:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002858:	6822      	ldr	r2, [r4, #0]
 800285a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800285c:	f023 0304 	bic.w	r3, r3, #4
 8002860:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002862:	6822      	ldr	r2, [r4, #0]
 8002864:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002866:	6929      	ldr	r1, [r5, #16]
 8002868:	430b      	orrs	r3, r1
 800286a:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 800286c:	e7ad      	b.n	80027ca <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800286e:	6800      	ldr	r0, [r0, #0]
 8002870:	f7ff fdd6 	bl	8002420 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002874:	6822      	ldr	r2, [r4, #0]
 8002876:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002878:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800287c:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800287e:	6822      	ldr	r2, [r4, #0]
 8002880:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002882:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002886:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002888:	6822      	ldr	r2, [r4, #0]
 800288a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800288c:	6929      	ldr	r1, [r5, #16]
 800288e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002892:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 8002894:	e799      	b.n	80027ca <HAL_TIM_PWM_ConfigChannel+0x58>
  __HAL_LOCK(htim);
 8002896:	2002      	movs	r0, #2
 8002898:	e79a      	b.n	80027d0 <HAL_TIM_PWM_ConfigChannel+0x5e>

0800289a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800289a:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800289c:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800289e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028a2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80028a6:	430b      	orrs	r3, r1
 80028a8:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028aa:	6083      	str	r3, [r0, #8]
}
 80028ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028b0:	4770      	bx	lr
	...

080028b4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80028b4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d064      	beq.n	8002986 <HAL_TIM_ConfigClockSource+0xd2>
{
 80028bc:	b510      	push	{r4, lr}
 80028be:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80028c0:	2301      	movs	r3, #1
 80028c2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80028c6:	2302      	movs	r3, #2
 80028c8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80028cc:	6802      	ldr	r2, [r0, #0]
 80028ce:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028d0:	4b2e      	ldr	r3, [pc, #184]	; (800298c <HAL_TIM_ConfigClockSource+0xd8>)
 80028d2:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 80028d4:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80028d6:	680b      	ldr	r3, [r1, #0]
 80028d8:	2b40      	cmp	r3, #64	; 0x40
 80028da:	d04a      	beq.n	8002972 <HAL_TIM_ConfigClockSource+0xbe>
 80028dc:	d913      	bls.n	8002906 <HAL_TIM_ConfigClockSource+0x52>
 80028de:	2b60      	cmp	r3, #96	; 0x60
 80028e0:	d03d      	beq.n	800295e <HAL_TIM_ConfigClockSource+0xaa>
 80028e2:	d91e      	bls.n	8002922 <HAL_TIM_ConfigClockSource+0x6e>
 80028e4:	2b70      	cmp	r3, #112	; 0x70
 80028e6:	d028      	beq.n	800293a <HAL_TIM_ConfigClockSource+0x86>
 80028e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ec:	d130      	bne.n	8002950 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 80028ee:	68cb      	ldr	r3, [r1, #12]
 80028f0:	684a      	ldr	r2, [r1, #4]
 80028f2:	6889      	ldr	r1, [r1, #8]
 80028f4:	6820      	ldr	r0, [r4, #0]
 80028f6:	f7ff ffd0 	bl	800289a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028fa:	6822      	ldr	r2, [r4, #0]
 80028fc:	6893      	ldr	r3, [r2, #8]
 80028fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002902:	6093      	str	r3, [r2, #8]
      break;
 8002904:	e024      	b.n	8002950 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 8002906:	2b10      	cmp	r3, #16
 8002908:	d006      	beq.n	8002918 <HAL_TIM_ConfigClockSource+0x64>
 800290a:	d904      	bls.n	8002916 <HAL_TIM_ConfigClockSource+0x62>
 800290c:	2b20      	cmp	r3, #32
 800290e:	d003      	beq.n	8002918 <HAL_TIM_ConfigClockSource+0x64>
 8002910:	2b30      	cmp	r3, #48	; 0x30
 8002912:	d001      	beq.n	8002918 <HAL_TIM_ConfigClockSource+0x64>
 8002914:	e01c      	b.n	8002950 <HAL_TIM_ConfigClockSource+0x9c>
 8002916:	b9db      	cbnz	r3, 8002950 <HAL_TIM_ConfigClockSource+0x9c>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002918:	4619      	mov	r1, r3
 800291a:	6820      	ldr	r0, [r4, #0]
 800291c:	f7ff fdd5 	bl	80024ca <TIM_ITRx_SetConfig>
        break;
 8002920:	e016      	b.n	8002950 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 8002922:	2b50      	cmp	r3, #80	; 0x50
 8002924:	d114      	bne.n	8002950 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002926:	68ca      	ldr	r2, [r1, #12]
 8002928:	6849      	ldr	r1, [r1, #4]
 800292a:	6820      	ldr	r0, [r4, #0]
 800292c:	f7ff fda6 	bl	800247c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002930:	2150      	movs	r1, #80	; 0x50
 8002932:	6820      	ldr	r0, [r4, #0]
 8002934:	f7ff fdc9 	bl	80024ca <TIM_ITRx_SetConfig>
      break;
 8002938:	e00a      	b.n	8002950 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 800293a:	68cb      	ldr	r3, [r1, #12]
 800293c:	684a      	ldr	r2, [r1, #4]
 800293e:	6889      	ldr	r1, [r1, #8]
 8002940:	6820      	ldr	r0, [r4, #0]
 8002942:	f7ff ffaa 	bl	800289a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002946:	6822      	ldr	r2, [r4, #0]
 8002948:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800294a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800294e:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002950:	2301      	movs	r3, #1
 8002952:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002956:	2000      	movs	r0, #0
 8002958:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800295c:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 800295e:	68ca      	ldr	r2, [r1, #12]
 8002960:	6849      	ldr	r1, [r1, #4]
 8002962:	6820      	ldr	r0, [r4, #0]
 8002964:	f7ff fd9d 	bl	80024a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002968:	2160      	movs	r1, #96	; 0x60
 800296a:	6820      	ldr	r0, [r4, #0]
 800296c:	f7ff fdad 	bl	80024ca <TIM_ITRx_SetConfig>
      break;
 8002970:	e7ee      	b.n	8002950 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002972:	68ca      	ldr	r2, [r1, #12]
 8002974:	6849      	ldr	r1, [r1, #4]
 8002976:	6820      	ldr	r0, [r4, #0]
 8002978:	f7ff fd80 	bl	800247c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800297c:	2140      	movs	r1, #64	; 0x40
 800297e:	6820      	ldr	r0, [r4, #0]
 8002980:	f7ff fda3 	bl	80024ca <TIM_ITRx_SetConfig>
      break;
 8002984:	e7e4      	b.n	8002950 <HAL_TIM_ConfigClockSource+0x9c>
  __HAL_LOCK(htim);
 8002986:	2002      	movs	r0, #2
}
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	fffe0088 	.word	0xfffe0088

08002990 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002990:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002992:	f001 011f 	and.w	r1, r1, #31
 8002996:	2301      	movs	r3, #1
 8002998:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800299c:	6a03      	ldr	r3, [r0, #32]
 800299e:	ea23 0304 	bic.w	r3, r3, r4
 80029a2:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80029a4:	6a03      	ldr	r3, [r0, #32]
 80029a6:	408a      	lsls	r2, r1
 80029a8:	4313      	orrs	r3, r2
 80029aa:	6203      	str	r3, [r0, #32]
}
 80029ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80029b0:	4770      	bx	lr
	...

080029b4 <HAL_TIM_OC_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029b4:	460a      	mov	r2, r1
 80029b6:	2900      	cmp	r1, #0
 80029b8:	d136      	bne.n	8002a28 <HAL_TIM_OC_Start+0x74>
 80029ba:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	f113 33ff 	adds.w	r3, r3, #4294967295
 80029c4:	bf18      	it	ne
 80029c6:	2301      	movne	r3, #1
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f040 8087 	bne.w	8002adc <HAL_TIM_OC_Start+0x128>
{
 80029ce:	b510      	push	{r4, lr}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029d0:	2a00      	cmp	r2, #0
 80029d2:	d159      	bne.n	8002a88 <HAL_TIM_OC_Start+0xd4>
 80029d4:	2302      	movs	r3, #2
 80029d6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 80029da:	4611      	mov	r1, r2
 80029dc:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029de:	2201      	movs	r2, #1
 80029e0:	6800      	ldr	r0, [r0, #0]
 80029e2:	f7ff ffd5 	bl	8002990 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029e6:	6823      	ldr	r3, [r4, #0]
 80029e8:	4a3f      	ldr	r2, [pc, #252]	; (8002ae8 <HAL_TIM_OC_Start+0x134>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d007      	beq.n	80029fe <HAL_TIM_OC_Start+0x4a>
 80029ee:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d003      	beq.n	80029fe <HAL_TIM_OC_Start+0x4a>
 80029f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d103      	bne.n	8002a06 <HAL_TIM_OC_Start+0x52>
    __HAL_TIM_MOE_ENABLE(htim);
 80029fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a04:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a06:	6823      	ldr	r3, [r4, #0]
 8002a08:	4a37      	ldr	r2, [pc, #220]	; (8002ae8 <HAL_TIM_OC_Start+0x134>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d058      	beq.n	8002ac0 <HAL_TIM_OC_Start+0x10c>
 8002a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a12:	d055      	beq.n	8002ac0 <HAL_TIM_OC_Start+0x10c>
 8002a14:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d051      	beq.n	8002ac0 <HAL_TIM_OC_Start+0x10c>
    __HAL_TIM_ENABLE(htim);
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	f042 0201 	orr.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002a24:	2000      	movs	r0, #0
}
 8002a26:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a28:	2904      	cmp	r1, #4
 8002a2a:	d00d      	beq.n	8002a48 <HAL_TIM_OC_Start+0x94>
 8002a2c:	2908      	cmp	r1, #8
 8002a2e:	d013      	beq.n	8002a58 <HAL_TIM_OC_Start+0xa4>
 8002a30:	290c      	cmp	r1, #12
 8002a32:	d019      	beq.n	8002a68 <HAL_TIM_OC_Start+0xb4>
 8002a34:	2910      	cmp	r1, #16
 8002a36:	d01f      	beq.n	8002a78 <HAL_TIM_OC_Start+0xc4>
 8002a38:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002a42:	bf18      	it	ne
 8002a44:	2301      	movne	r3, #1
 8002a46:	e7bf      	b.n	80029c8 <HAL_TIM_OC_Start+0x14>
 8002a48:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002a52:	bf18      	it	ne
 8002a54:	2301      	movne	r3, #1
 8002a56:	e7b7      	b.n	80029c8 <HAL_TIM_OC_Start+0x14>
 8002a58:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002a62:	bf18      	it	ne
 8002a64:	2301      	movne	r3, #1
 8002a66:	e7af      	b.n	80029c8 <HAL_TIM_OC_Start+0x14>
 8002a68:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002a72:	bf18      	it	ne
 8002a74:	2301      	movne	r3, #1
 8002a76:	e7a7      	b.n	80029c8 <HAL_TIM_OC_Start+0x14>
 8002a78:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002a82:	bf18      	it	ne
 8002a84:	2301      	movne	r3, #1
 8002a86:	e79f      	b.n	80029c8 <HAL_TIM_OC_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a88:	2a04      	cmp	r2, #4
 8002a8a:	d009      	beq.n	8002aa0 <HAL_TIM_OC_Start+0xec>
 8002a8c:	2a08      	cmp	r2, #8
 8002a8e:	d00b      	beq.n	8002aa8 <HAL_TIM_OC_Start+0xf4>
 8002a90:	2a0c      	cmp	r2, #12
 8002a92:	d00d      	beq.n	8002ab0 <HAL_TIM_OC_Start+0xfc>
 8002a94:	2a10      	cmp	r2, #16
 8002a96:	d00f      	beq.n	8002ab8 <HAL_TIM_OC_Start+0x104>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8002a9e:	e79c      	b.n	80029da <HAL_TIM_OC_Start+0x26>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8002aa6:	e798      	b.n	80029da <HAL_TIM_OC_Start+0x26>
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8002aae:	e794      	b.n	80029da <HAL_TIM_OC_Start+0x26>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8002ab6:	e790      	b.n	80029da <HAL_TIM_OC_Start+0x26>
 8002ab8:	2302      	movs	r3, #2
 8002aba:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8002abe:	e78c      	b.n	80029da <HAL_TIM_OC_Start+0x26>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ac0:	6899      	ldr	r1, [r3, #8]
 8002ac2:	4a0a      	ldr	r2, [pc, #40]	; (8002aec <HAL_TIM_OC_Start+0x138>)
 8002ac4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac6:	2a06      	cmp	r2, #6
 8002ac8:	d00a      	beq.n	8002ae0 <HAL_TIM_OC_Start+0x12c>
 8002aca:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002ace:	d009      	beq.n	8002ae4 <HAL_TIM_OC_Start+0x130>
      __HAL_TIM_ENABLE(htim);
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	f042 0201 	orr.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002ad8:	2000      	movs	r0, #0
 8002ada:	e7a4      	b.n	8002a26 <HAL_TIM_OC_Start+0x72>
    return HAL_ERROR;
 8002adc:	2001      	movs	r0, #1
}
 8002ade:	4770      	bx	lr
  return HAL_OK;
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	e7a0      	b.n	8002a26 <HAL_TIM_OC_Start+0x72>
 8002ae4:	2000      	movs	r0, #0
 8002ae6:	e79e      	b.n	8002a26 <HAL_TIM_OC_Start+0x72>
 8002ae8:	40012c00 	.word	0x40012c00
 8002aec:	00010007 	.word	0x00010007

08002af0 <HAL_TIM_PWM_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002af0:	460a      	mov	r2, r1
 8002af2:	2900      	cmp	r1, #0
 8002af4:	d136      	bne.n	8002b64 <HAL_TIM_PWM_Start+0x74>
 8002af6:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002b00:	bf18      	it	ne
 8002b02:	2301      	movne	r3, #1
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f040 8087 	bne.w	8002c18 <HAL_TIM_PWM_Start+0x128>
{
 8002b0a:	b510      	push	{r4, lr}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b0c:	2a00      	cmp	r2, #0
 8002b0e:	d159      	bne.n	8002bc4 <HAL_TIM_PWM_Start+0xd4>
 8002b10:	2302      	movs	r3, #2
 8002b12:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8002b16:	4611      	mov	r1, r2
 8002b18:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	6800      	ldr	r0, [r0, #0]
 8002b1e:	f7ff ff37 	bl	8002990 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b22:	6823      	ldr	r3, [r4, #0]
 8002b24:	4a3f      	ldr	r2, [pc, #252]	; (8002c24 <HAL_TIM_PWM_Start+0x134>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d007      	beq.n	8002b3a <HAL_TIM_PWM_Start+0x4a>
 8002b2a:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d003      	beq.n	8002b3a <HAL_TIM_PWM_Start+0x4a>
 8002b32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d103      	bne.n	8002b42 <HAL_TIM_PWM_Start+0x52>
    __HAL_TIM_MOE_ENABLE(htim);
 8002b3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b40:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b42:	6823      	ldr	r3, [r4, #0]
 8002b44:	4a37      	ldr	r2, [pc, #220]	; (8002c24 <HAL_TIM_PWM_Start+0x134>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d058      	beq.n	8002bfc <HAL_TIM_PWM_Start+0x10c>
 8002b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b4e:	d055      	beq.n	8002bfc <HAL_TIM_PWM_Start+0x10c>
 8002b50:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d051      	beq.n	8002bfc <HAL_TIM_PWM_Start+0x10c>
    __HAL_TIM_ENABLE(htim);
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	f042 0201 	orr.w	r2, r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002b60:	2000      	movs	r0, #0
}
 8002b62:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b64:	2904      	cmp	r1, #4
 8002b66:	d00d      	beq.n	8002b84 <HAL_TIM_PWM_Start+0x94>
 8002b68:	2908      	cmp	r1, #8
 8002b6a:	d013      	beq.n	8002b94 <HAL_TIM_PWM_Start+0xa4>
 8002b6c:	290c      	cmp	r1, #12
 8002b6e:	d019      	beq.n	8002ba4 <HAL_TIM_PWM_Start+0xb4>
 8002b70:	2910      	cmp	r1, #16
 8002b72:	d01f      	beq.n	8002bb4 <HAL_TIM_PWM_Start+0xc4>
 8002b74:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002b7e:	bf18      	it	ne
 8002b80:	2301      	movne	r3, #1
 8002b82:	e7bf      	b.n	8002b04 <HAL_TIM_PWM_Start+0x14>
 8002b84:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002b8e:	bf18      	it	ne
 8002b90:	2301      	movne	r3, #1
 8002b92:	e7b7      	b.n	8002b04 <HAL_TIM_PWM_Start+0x14>
 8002b94:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002b9e:	bf18      	it	ne
 8002ba0:	2301      	movne	r3, #1
 8002ba2:	e7af      	b.n	8002b04 <HAL_TIM_PWM_Start+0x14>
 8002ba4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002bae:	bf18      	it	ne
 8002bb0:	2301      	movne	r3, #1
 8002bb2:	e7a7      	b.n	8002b04 <HAL_TIM_PWM_Start+0x14>
 8002bb4:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002bbe:	bf18      	it	ne
 8002bc0:	2301      	movne	r3, #1
 8002bc2:	e79f      	b.n	8002b04 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bc4:	2a04      	cmp	r2, #4
 8002bc6:	d009      	beq.n	8002bdc <HAL_TIM_PWM_Start+0xec>
 8002bc8:	2a08      	cmp	r2, #8
 8002bca:	d00b      	beq.n	8002be4 <HAL_TIM_PWM_Start+0xf4>
 8002bcc:	2a0c      	cmp	r2, #12
 8002bce:	d00d      	beq.n	8002bec <HAL_TIM_PWM_Start+0xfc>
 8002bd0:	2a10      	cmp	r2, #16
 8002bd2:	d00f      	beq.n	8002bf4 <HAL_TIM_PWM_Start+0x104>
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8002bda:	e79c      	b.n	8002b16 <HAL_TIM_PWM_Start+0x26>
 8002bdc:	2302      	movs	r3, #2
 8002bde:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8002be2:	e798      	b.n	8002b16 <HAL_TIM_PWM_Start+0x26>
 8002be4:	2302      	movs	r3, #2
 8002be6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8002bea:	e794      	b.n	8002b16 <HAL_TIM_PWM_Start+0x26>
 8002bec:	2302      	movs	r3, #2
 8002bee:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8002bf2:	e790      	b.n	8002b16 <HAL_TIM_PWM_Start+0x26>
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8002bfa:	e78c      	b.n	8002b16 <HAL_TIM_PWM_Start+0x26>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bfc:	6899      	ldr	r1, [r3, #8]
 8002bfe:	4a0a      	ldr	r2, [pc, #40]	; (8002c28 <HAL_TIM_PWM_Start+0x138>)
 8002c00:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c02:	2a06      	cmp	r2, #6
 8002c04:	d00a      	beq.n	8002c1c <HAL_TIM_PWM_Start+0x12c>
 8002c06:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002c0a:	d009      	beq.n	8002c20 <HAL_TIM_PWM_Start+0x130>
      __HAL_TIM_ENABLE(htim);
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	f042 0201 	orr.w	r2, r2, #1
 8002c12:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002c14:	2000      	movs	r0, #0
 8002c16:	e7a4      	b.n	8002b62 <HAL_TIM_PWM_Start+0x72>
    return HAL_ERROR;
 8002c18:	2001      	movs	r0, #1
}
 8002c1a:	4770      	bx	lr
  return HAL_OK;
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	e7a0      	b.n	8002b62 <HAL_TIM_PWM_Start+0x72>
 8002c20:	2000      	movs	r0, #0
 8002c22:	e79e      	b.n	8002b62 <HAL_TIM_PWM_Start+0x72>
 8002c24:	40012c00 	.word	0x40012c00
 8002c28:	00010007 	.word	0x00010007

08002c2c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c2c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d02f      	beq.n	8002c94 <HAL_TIMEx_MasterConfigSynchronization+0x68>
{
 8002c34:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8002c36:	2301      	movs	r3, #1
 8002c38:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c42:	6802      	ldr	r2, [r0, #0]
 8002c44:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c46:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c48:	4c13      	ldr	r4, [pc, #76]	; (8002c98 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8002c4a:	42a2      	cmp	r2, r4
 8002c4c:	d01d      	beq.n	8002c8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c52:	680c      	ldr	r4, [r1, #0]
 8002c54:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c56:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c58:	6803      	ldr	r3, [r0, #0]
 8002c5a:	4a0f      	ldr	r2, [pc, #60]	; (8002c98 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d006      	beq.n	8002c6e <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8002c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c64:	d003      	beq.n	8002c6e <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8002c66:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d104      	bne.n	8002c78 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c6e:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c72:	688a      	ldr	r2, [r1, #8]
 8002c74:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c76:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c7e:	2300      	movs	r3, #0
 8002c80:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002c84:	4618      	mov	r0, r3
}
 8002c86:	bc30      	pop	{r4, r5}
 8002c88:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c8a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c8e:	684c      	ldr	r4, [r1, #4]
 8002c90:	4323      	orrs	r3, r4
 8002c92:	e7dc      	b.n	8002c4e <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 8002c94:	2002      	movs	r0, #2
}
 8002c96:	4770      	bx	lr
 8002c98:	40012c00 	.word	0x40012c00

08002c9c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c9c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d03b      	beq.n	8002d1c <HAL_TIMEx_ConfigBreakDeadTime+0x80>
{
 8002ca4:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002cac:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002cae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cb2:	688a      	ldr	r2, [r1, #8]
 8002cb4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002cb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cba:	684a      	ldr	r2, [r1, #4]
 8002cbc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002cbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cc2:	680a      	ldr	r2, [r1, #0]
 8002cc4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002cc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cca:	690a      	ldr	r2, [r1, #16]
 8002ccc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002cce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cd2:	694a      	ldr	r2, [r1, #20]
 8002cd4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002cd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cda:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8002cdc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002cde:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002ce2:	698a      	ldr	r2, [r1, #24]
 8002ce4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002ce8:	6802      	ldr	r2, [r0, #0]
 8002cea:	4c0d      	ldr	r4, [pc, #52]	; (8002d20 <HAL_TIMEx_ConfigBreakDeadTime+0x84>)
 8002cec:	42a2      	cmp	r2, r4
 8002cee:	d007      	beq.n	8002d00 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002cf0:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002cf8:	4618      	mov	r0, r3
}
 8002cfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002cfe:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002d00:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002d04:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8002d06:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002d0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d0e:	69cc      	ldr	r4, [r1, #28]
 8002d10:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002d12:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002d16:	6a09      	ldr	r1, [r1, #32]
 8002d18:	430b      	orrs	r3, r1
 8002d1a:	e7e9      	b.n	8002cf0 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
  __HAL_LOCK(htim);
 8002d1c:	2002      	movs	r0, #2
}
 8002d1e:	4770      	bx	lr
 8002d20:	40012c00 	.word	0x40012c00

08002d24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d24:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 8002d28:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d2a:	6801      	ldr	r1, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d2c:	6883      	ldr	r3, [r0, #8]
 8002d2e:	6902      	ldr	r2, [r0, #16]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	6942      	ldr	r2, [r0, #20]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	69c2      	ldr	r2, [r0, #28]
 8002d38:	4313      	orrs	r3, r2
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d3a:	6808      	ldr	r0, [r1, #0]
 8002d3c:	4a8c      	ldr	r2, [pc, #560]	; (8002f70 <UART_SetConfig+0x24c>)
 8002d3e:	4002      	ands	r2, r0
 8002d40:	4313      	orrs	r3, r2
 8002d42:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d44:	6822      	ldr	r2, [r4, #0]
 8002d46:	6853      	ldr	r3, [r2, #4]
 8002d48:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d4c:	68e1      	ldr	r1, [r4, #12]
 8002d4e:	430b      	orrs	r3, r1
 8002d50:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d52:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d54:	6822      	ldr	r2, [r4, #0]
 8002d56:	4b87      	ldr	r3, [pc, #540]	; (8002f74 <UART_SetConfig+0x250>)
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d001      	beq.n	8002d60 <UART_SetConfig+0x3c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d5c:	6a23      	ldr	r3, [r4, #32]
 8002d5e:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d60:	6893      	ldr	r3, [r2, #8]
 8002d62:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002d66:	430b      	orrs	r3, r1
 8002d68:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d6a:	6823      	ldr	r3, [r4, #0]
 8002d6c:	4a82      	ldr	r2, [pc, #520]	; (8002f78 <UART_SetConfig+0x254>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d01c      	beq.n	8002dac <UART_SetConfig+0x88>
 8002d72:	4a82      	ldr	r2, [pc, #520]	; (8002f7c <UART_SetConfig+0x258>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d02d      	beq.n	8002dd4 <UART_SetConfig+0xb0>
 8002d78:	4a7e      	ldr	r2, [pc, #504]	; (8002f74 <UART_SetConfig+0x250>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d043      	beq.n	8002e06 <UART_SetConfig+0xe2>
 8002d7e:	2210      	movs	r2, #16

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d80:	497c      	ldr	r1, [pc, #496]	; (8002f74 <UART_SetConfig+0x250>)
 8002d82:	428b      	cmp	r3, r1
 8002d84:	d05e      	beq.n	8002e44 <UART_SetConfig+0x120>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d86:	69e3      	ldr	r3, [r4, #28]
 8002d88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d8c:	f000 808c 	beq.w	8002ea8 <UART_SetConfig+0x184>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d90:	2a08      	cmp	r2, #8
 8002d92:	f200 80e7 	bhi.w	8002f64 <UART_SetConfig+0x240>
 8002d96:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002d9a:	00b7      	.short	0x00b7
 8002d9c:	00b500ce 	.word	0x00b500ce
 8002da0:	00d100e5 	.word	0x00d100e5
 8002da4:	00e500e5 	.word	0x00e500e5
 8002da8:	00d400e5 	.word	0x00d400e5
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dac:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8002db0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002db4:	f002 0203 	and.w	r2, r2, #3
 8002db8:	2a03      	cmp	r2, #3
 8002dba:	d809      	bhi.n	8002dd0 <UART_SetConfig+0xac>
 8002dbc:	e8df f002 	tbb	[pc, r2]
 8002dc0:	063c0402 	.word	0x063c0402
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	e7db      	b.n	8002d80 <UART_SetConfig+0x5c>
 8002dc8:	2204      	movs	r2, #4
 8002dca:	e7d9      	b.n	8002d80 <UART_SetConfig+0x5c>
 8002dcc:	2208      	movs	r2, #8
 8002dce:	e7d7      	b.n	8002d80 <UART_SetConfig+0x5c>
 8002dd0:	2210      	movs	r2, #16
 8002dd2:	e7d5      	b.n	8002d80 <UART_SetConfig+0x5c>
 8002dd4:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8002dd8:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002ddc:	f002 020c 	and.w	r2, r2, #12
 8002de0:	2a0c      	cmp	r2, #12
 8002de2:	d80e      	bhi.n	8002e02 <UART_SetConfig+0xde>
 8002de4:	e8df f002 	tbb	[pc, r2]
 8002de8:	0d0d0d07 	.word	0x0d0d0d07
 8002dec:	0d0d0d09 	.word	0x0d0d0d09
 8002df0:	0d0d0d2a 	.word	0x0d0d0d2a
 8002df4:	0b          	.byte	0x0b
 8002df5:	00          	.byte	0x00
 8002df6:	2200      	movs	r2, #0
 8002df8:	e7c2      	b.n	8002d80 <UART_SetConfig+0x5c>
 8002dfa:	2204      	movs	r2, #4
 8002dfc:	e7c0      	b.n	8002d80 <UART_SetConfig+0x5c>
 8002dfe:	2208      	movs	r2, #8
 8002e00:	e7be      	b.n	8002d80 <UART_SetConfig+0x5c>
 8002e02:	2210      	movs	r2, #16
 8002e04:	e7bc      	b.n	8002d80 <UART_SetConfig+0x5c>
 8002e06:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 8002e0a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002e0e:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8002e12:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002e16:	d00b      	beq.n	8002e30 <UART_SetConfig+0x10c>
 8002e18:	d907      	bls.n	8002e2a <UART_SetConfig+0x106>
 8002e1a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002e1e:	d00f      	beq.n	8002e40 <UART_SetConfig+0x11c>
 8002e20:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8002e24:	d106      	bne.n	8002e34 <UART_SetConfig+0x110>
 8002e26:	2208      	movs	r2, #8
 8002e28:	e7aa      	b.n	8002d80 <UART_SetConfig+0x5c>
 8002e2a:	b91a      	cbnz	r2, 8002e34 <UART_SetConfig+0x110>
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	e7a7      	b.n	8002d80 <UART_SetConfig+0x5c>
 8002e30:	2204      	movs	r2, #4
 8002e32:	e7a5      	b.n	8002d80 <UART_SetConfig+0x5c>
 8002e34:	2210      	movs	r2, #16
 8002e36:	e7a3      	b.n	8002d80 <UART_SetConfig+0x5c>
 8002e38:	2202      	movs	r2, #2
 8002e3a:	e7a1      	b.n	8002d80 <UART_SetConfig+0x5c>
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	e79f      	b.n	8002d80 <UART_SetConfig+0x5c>
 8002e40:	2202      	movs	r2, #2
 8002e42:	e79d      	b.n	8002d80 <UART_SetConfig+0x5c>
    switch (clocksource)
 8002e44:	2a08      	cmp	r2, #8
 8002e46:	d87f      	bhi.n	8002f48 <UART_SetConfig+0x224>
 8002e48:	e8df f002 	tbb	[pc, r2]
 8002e4c:	7e107e08 	.word	0x7e107e08
 8002e50:	7e7e7e0d 	.word	0x7e7e7e0d
 8002e54:	05          	.byte	0x05
 8002e55:	00          	.byte	0x00
        pclk = (uint32_t) LSE_VALUE;
 8002e56:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002e5a:	e008      	b.n	8002e6e <UART_SetConfig+0x14a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e5c:	f7fe ffc0 	bl	8001de0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002e60:	b928      	cbnz	r0, 8002e6e <UART_SetConfig+0x14a>
 8002e62:	2000      	movs	r0, #0
 8002e64:	e062      	b.n	8002f2c <UART_SetConfig+0x208>
        pclk = HAL_RCC_GetSysClockFreq();
 8002e66:	f7fe fb69 	bl	800153c <HAL_RCC_GetSysClockFreq>
        break;
 8002e6a:	e7f9      	b.n	8002e60 <UART_SetConfig+0x13c>
        pclk = (uint32_t) HSI_VALUE;
 8002e6c:	4844      	ldr	r0, [pc, #272]	; (8002f80 <UART_SetConfig+0x25c>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e6e:	6862      	ldr	r2, [r4, #4]
 8002e70:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002e74:	4283      	cmp	r3, r0
 8002e76:	d869      	bhi.n	8002f4c <UART_SetConfig+0x228>
 8002e78:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002e7c:	d868      	bhi.n	8002f50 <UART_SetConfig+0x22c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8002e7e:	2300      	movs	r3, #0
 8002e80:	0e07      	lsrs	r7, r0, #24
 8002e82:	0206      	lsls	r6, r0, #8
 8002e84:	0850      	lsrs	r0, r2, #1
 8002e86:	eb16 0b00 	adds.w	fp, r6, r0
 8002e8a:	f147 0c00 	adc.w	ip, r7, #0
 8002e8e:	4658      	mov	r0, fp
 8002e90:	4661      	mov	r1, ip
 8002e92:	f7fd f99d 	bl	80001d0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e96:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8002e9a:	4b3a      	ldr	r3, [pc, #232]	; (8002f84 <UART_SetConfig+0x260>)
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d859      	bhi.n	8002f54 <UART_SetConfig+0x230>
          huart->Instance->BRR = usartdiv;
 8002ea0:	6823      	ldr	r3, [r4, #0]
 8002ea2:	60d8      	str	r0, [r3, #12]
 8002ea4:	2000      	movs	r0, #0
 8002ea6:	e041      	b.n	8002f2c <UART_SetConfig+0x208>
    switch (clocksource)
 8002ea8:	2a08      	cmp	r2, #8
 8002eaa:	d855      	bhi.n	8002f58 <UART_SetConfig+0x234>
 8002eac:	e8df f002 	tbb	[pc, r2]
 8002eb0:	54052107 	.word	0x54052107
 8002eb4:	54545424 	.word	0x54545424
 8002eb8:	27          	.byte	0x27
 8002eb9:	00          	.byte	0x00
        pclk = (uint32_t) HSI_VALUE;
 8002eba:	4831      	ldr	r0, [pc, #196]	; (8002f80 <UART_SetConfig+0x25c>)
 8002ebc:	e003      	b.n	8002ec6 <UART_SetConfig+0x1a2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ebe:	f7fe ff8f 	bl	8001de0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002ec2:	2800      	cmp	r0, #0
 8002ec4:	d04a      	beq.n	8002f5c <UART_SetConfig+0x238>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ec6:	6862      	ldr	r2, [r4, #4]
 8002ec8:	0853      	lsrs	r3, r2, #1
 8002eca:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002ece:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ed2:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ed4:	f1a3 0110 	sub.w	r1, r3, #16
 8002ed8:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002edc:	4291      	cmp	r1, r2
 8002ede:	d83f      	bhi.n	8002f60 <UART_SetConfig+0x23c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ee0:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ee4:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8002ee8:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8002eea:	6822      	ldr	r2, [r4, #0]
 8002eec:	60d3      	str	r3, [r2, #12]
 8002eee:	2000      	movs	r0, #0
 8002ef0:	e01c      	b.n	8002f2c <UART_SetConfig+0x208>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ef2:	f7fe ff87 	bl	8001e04 <HAL_RCC_GetPCLK2Freq>
        break;
 8002ef6:	e7e4      	b.n	8002ec2 <UART_SetConfig+0x19e>
        pclk = HAL_RCC_GetSysClockFreq();
 8002ef8:	f7fe fb20 	bl	800153c <HAL_RCC_GetSysClockFreq>
        break;
 8002efc:	e7e1      	b.n	8002ec2 <UART_SetConfig+0x19e>
        pclk = (uint32_t) LSE_VALUE;
 8002efe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002f02:	e7e0      	b.n	8002ec6 <UART_SetConfig+0x1a2>
        break;
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
        break;
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f04:	481e      	ldr	r0, [pc, #120]	; (8002f80 <UART_SetConfig+0x25c>)
 8002f06:	e002      	b.n	8002f0e <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f08:	f7fe ff6a 	bl	8001de0 <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 8002f0c:	b360      	cbz	r0, 8002f68 <UART_SetConfig+0x244>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f0e:	6863      	ldr	r3, [r4, #4]
 8002f10:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002f14:	fbb0 f0f3 	udiv	r0, r0, r3
 8002f18:	b280      	uxth	r0, r0
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f1a:	f1a0 0210 	sub.w	r2, r0, #16
 8002f1e:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d822      	bhi.n	8002f6c <UART_SetConfig+0x248>
      {
        huart->Instance->BRR = usartdiv;
 8002f26:	6823      	ldr	r3, [r4, #0]
 8002f28:	60d8      	str	r0, [r3, #12]
 8002f2a:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002f30:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8002f32:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f36:	f7fe ff65 	bl	8001e04 <HAL_RCC_GetPCLK2Freq>
        break;
 8002f3a:	e7e7      	b.n	8002f0c <UART_SetConfig+0x1e8>
        pclk = HAL_RCC_GetSysClockFreq();
 8002f3c:	f7fe fafe 	bl	800153c <HAL_RCC_GetSysClockFreq>
        break;
 8002f40:	e7e4      	b.n	8002f0c <UART_SetConfig+0x1e8>
        pclk = (uint32_t) LSE_VALUE;
 8002f42:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002f46:	e7e2      	b.n	8002f0e <UART_SetConfig+0x1ea>
        ret = HAL_ERROR;
 8002f48:	2001      	movs	r0, #1
 8002f4a:	e7ef      	b.n	8002f2c <UART_SetConfig+0x208>
        ret = HAL_ERROR;
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	e7ed      	b.n	8002f2c <UART_SetConfig+0x208>
 8002f50:	2001      	movs	r0, #1
 8002f52:	e7eb      	b.n	8002f2c <UART_SetConfig+0x208>
          ret = HAL_ERROR;
 8002f54:	2001      	movs	r0, #1
 8002f56:	e7e9      	b.n	8002f2c <UART_SetConfig+0x208>
        ret = HAL_ERROR;
 8002f58:	2001      	movs	r0, #1
 8002f5a:	e7e7      	b.n	8002f2c <UART_SetConfig+0x208>
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	e7e5      	b.n	8002f2c <UART_SetConfig+0x208>
        ret = HAL_ERROR;
 8002f60:	2001      	movs	r0, #1
 8002f62:	e7e3      	b.n	8002f2c <UART_SetConfig+0x208>
        ret = HAL_ERROR;
 8002f64:	2001      	movs	r0, #1
 8002f66:	e7e1      	b.n	8002f2c <UART_SetConfig+0x208>
 8002f68:	2000      	movs	r0, #0
 8002f6a:	e7df      	b.n	8002f2c <UART_SetConfig+0x208>
        ret = HAL_ERROR;
 8002f6c:	2001      	movs	r0, #1
 8002f6e:	e7dd      	b.n	8002f2c <UART_SetConfig+0x208>
 8002f70:	efff69f3 	.word	0xefff69f3
 8002f74:	40008000 	.word	0x40008000
 8002f78:	40013800 	.word	0x40013800
 8002f7c:	40004400 	.word	0x40004400
 8002f80:	00f42400 	.word	0x00f42400
 8002f84:	000ffcff 	.word	0x000ffcff

08002f88 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f88:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002f8a:	f013 0f01 	tst.w	r3, #1
 8002f8e:	d006      	beq.n	8002f9e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f90:	6802      	ldr	r2, [r0, #0]
 8002f92:	6853      	ldr	r3, [r2, #4]
 8002f94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002f98:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002f9a:	430b      	orrs	r3, r1
 8002f9c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f9e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002fa0:	f013 0f02 	tst.w	r3, #2
 8002fa4:	d006      	beq.n	8002fb4 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002fa6:	6802      	ldr	r2, [r0, #0]
 8002fa8:	6853      	ldr	r3, [r2, #4]
 8002faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fae:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002fb0:	430b      	orrs	r3, r1
 8002fb2:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002fb4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002fb6:	f013 0f04 	tst.w	r3, #4
 8002fba:	d006      	beq.n	8002fca <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fbc:	6802      	ldr	r2, [r0, #0]
 8002fbe:	6853      	ldr	r3, [r2, #4]
 8002fc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fc4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8002fc6:	430b      	orrs	r3, r1
 8002fc8:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002fcc:	f013 0f08 	tst.w	r3, #8
 8002fd0:	d006      	beq.n	8002fe0 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fd2:	6802      	ldr	r2, [r0, #0]
 8002fd4:	6853      	ldr	r3, [r2, #4]
 8002fd6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002fda:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002fdc:	430b      	orrs	r3, r1
 8002fde:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fe0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002fe2:	f013 0f10 	tst.w	r3, #16
 8002fe6:	d006      	beq.n	8002ff6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002fe8:	6802      	ldr	r2, [r0, #0]
 8002fea:	6893      	ldr	r3, [r2, #8]
 8002fec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ff0:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002ff2:	430b      	orrs	r3, r1
 8002ff4:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ff6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002ff8:	f013 0f20 	tst.w	r3, #32
 8002ffc:	d006      	beq.n	800300c <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ffe:	6802      	ldr	r2, [r0, #0]
 8003000:	6893      	ldr	r3, [r2, #8]
 8003002:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003006:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8003008:	430b      	orrs	r3, r1
 800300a:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800300c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800300e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003012:	d00a      	beq.n	800302a <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003014:	6802      	ldr	r2, [r0, #0]
 8003016:	6853      	ldr	r3, [r2, #4]
 8003018:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800301c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800301e:	430b      	orrs	r3, r1
 8003020:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003022:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003024:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003028:	d00b      	beq.n	8003042 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800302a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800302c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003030:	d006      	beq.n	8003040 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003032:	6802      	ldr	r2, [r0, #0]
 8003034:	6853      	ldr	r3, [r2, #4]
 8003036:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800303a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800303c:	430b      	orrs	r3, r1
 800303e:	6053      	str	r3, [r2, #4]
  }
}
 8003040:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003042:	6802      	ldr	r2, [r0, #0]
 8003044:	6853      	ldr	r3, [r2, #4]
 8003046:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800304a:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800304c:	430b      	orrs	r3, r1
 800304e:	6053      	str	r3, [r2, #4]
 8003050:	e7eb      	b.n	800302a <UART_AdvFeatureConfig+0xa2>

08003052 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003056:	4604      	mov	r4, r0
 8003058:	460f      	mov	r7, r1
 800305a:	4616      	mov	r6, r2
 800305c:	4698      	mov	r8, r3
 800305e:	9d06      	ldr	r5, [sp, #24]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003060:	6823      	ldr	r3, [r4, #0]
 8003062:	69db      	ldr	r3, [r3, #28]
 8003064:	ea37 0303 	bics.w	r3, r7, r3
 8003068:	bf0c      	ite	eq
 800306a:	2301      	moveq	r3, #1
 800306c:	2300      	movne	r3, #0
 800306e:	42b3      	cmp	r3, r6
 8003070:	d13a      	bne.n	80030e8 <UART_WaitOnFlagUntilTimeout+0x96>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003072:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003076:	d0f3      	beq.n	8003060 <UART_WaitOnFlagUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003078:	f7fd ffba 	bl	8000ff0 <HAL_GetTick>
 800307c:	eba0 0008 	sub.w	r0, r0, r8
 8003080:	42a8      	cmp	r0, r5
 8003082:	d81f      	bhi.n	80030c4 <UART_WaitOnFlagUntilTimeout+0x72>
 8003084:	b1f5      	cbz	r5, 80030c4 <UART_WaitOnFlagUntilTimeout+0x72>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003086:	6823      	ldr	r3, [r4, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	f012 0f04 	tst.w	r2, #4
 800308e:	d0e7      	beq.n	8003060 <UART_WaitOnFlagUntilTimeout+0xe>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003090:	69da      	ldr	r2, [r3, #28]
 8003092:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8003096:	d0e3      	beq.n	8003060 <UART_WaitOnFlagUntilTimeout+0xe>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003098:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800309c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800309e:	6822      	ldr	r2, [r4, #0]
 80030a0:	6813      	ldr	r3, [r2, #0]
 80030a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030a6:	6013      	str	r3, [r2, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a8:	6822      	ldr	r2, [r4, #0]
 80030aa:	6893      	ldr	r3, [r2, #8]
 80030ac:	f023 0301 	bic.w	r3, r3, #1
 80030b0:	6093      	str	r3, [r2, #8]

          huart->gState = HAL_UART_STATE_READY;
 80030b2:	2320      	movs	r3, #32
 80030b4:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80030b6:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030b8:	67e3      	str	r3, [r4, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030ba:	2300      	movs	r3, #0
 80030bc:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70

          return HAL_TIMEOUT;
 80030c0:	2003      	movs	r0, #3
 80030c2:	e012      	b.n	80030ea <UART_WaitOnFlagUntilTimeout+0x98>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030c4:	6822      	ldr	r2, [r4, #0]
 80030c6:	6813      	ldr	r3, [r2, #0]
 80030c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030cc:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ce:	6822      	ldr	r2, [r4, #0]
 80030d0:	6893      	ldr	r3, [r2, #8]
 80030d2:	f023 0301 	bic.w	r3, r3, #1
 80030d6:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 80030d8:	2320      	movs	r3, #32
 80030da:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80030dc:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 80030de:	2300      	movs	r3, #0
 80030e0:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        return HAL_TIMEOUT;
 80030e4:	2003      	movs	r0, #3
 80030e6:	e000      	b.n	80030ea <UART_WaitOnFlagUntilTimeout+0x98>
        }
      }
    }
  }
  return HAL_OK;
 80030e8:	2000      	movs	r0, #0
}
 80030ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080030ee <UART_CheckIdleState>:
{
 80030ee:	b530      	push	{r4, r5, lr}
 80030f0:	b083      	sub	sp, #12
 80030f2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030f4:	2300      	movs	r3, #0
 80030f6:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80030f8:	f7fd ff7a 	bl	8000ff0 <HAL_GetTick>
 80030fc:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030fe:	6823      	ldr	r3, [r4, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f013 0f08 	tst.w	r3, #8
 8003106:	d10c      	bne.n	8003122 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003108:	6823      	ldr	r3, [r4, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f013 0f04 	tst.w	r3, #4
 8003110:	d115      	bne.n	800313e <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 8003112:	2320      	movs	r3, #32
 8003114:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003116:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8003118:	2000      	movs	r0, #0
 800311a:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 800311e:	b003      	add	sp, #12
 8003120:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003122:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	4603      	mov	r3, r0
 800312a:	2200      	movs	r2, #0
 800312c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003130:	4620      	mov	r0, r4
 8003132:	f7ff ff8e 	bl	8003052 <UART_WaitOnFlagUntilTimeout>
 8003136:	2800      	cmp	r0, #0
 8003138:	d0e6      	beq.n	8003108 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 800313a:	2003      	movs	r0, #3
 800313c:	e7ef      	b.n	800311e <UART_CheckIdleState+0x30>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800313e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	462b      	mov	r3, r5
 8003146:	2200      	movs	r2, #0
 8003148:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800314c:	4620      	mov	r0, r4
 800314e:	f7ff ff80 	bl	8003052 <UART_WaitOnFlagUntilTimeout>
 8003152:	2800      	cmp	r0, #0
 8003154:	d0dd      	beq.n	8003112 <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8003156:	2003      	movs	r0, #3
 8003158:	e7e1      	b.n	800311e <UART_CheckIdleState+0x30>

0800315a <HAL_UART_Init>:
  if (huart == NULL)
 800315a:	b368      	cbz	r0, 80031b8 <HAL_UART_Init+0x5e>
{
 800315c:	b510      	push	{r4, lr}
 800315e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003160:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8003162:	b303      	cbz	r3, 80031a6 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8003164:	2324      	movs	r3, #36	; 0x24
 8003166:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8003168:	6822      	ldr	r2, [r4, #0]
 800316a:	6813      	ldr	r3, [r2, #0]
 800316c:	f023 0301 	bic.w	r3, r3, #1
 8003170:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003172:	4620      	mov	r0, r4
 8003174:	f7ff fdd6 	bl	8002d24 <UART_SetConfig>
 8003178:	2801      	cmp	r0, #1
 800317a:	d013      	beq.n	80031a4 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800317c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800317e:	b9bb      	cbnz	r3, 80031b0 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003180:	6822      	ldr	r2, [r4, #0]
 8003182:	6853      	ldr	r3, [r2, #4]
 8003184:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003188:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800318a:	6822      	ldr	r2, [r4, #0]
 800318c:	6893      	ldr	r3, [r2, #8]
 800318e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003192:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8003194:	6822      	ldr	r2, [r4, #0]
 8003196:	6813      	ldr	r3, [r2, #0]
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800319e:	4620      	mov	r0, r4
 80031a0:	f7ff ffa5 	bl	80030ee <UART_CheckIdleState>
}
 80031a4:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80031a6:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80031aa:	f7fd fbef 	bl	800098c <HAL_UART_MspInit>
 80031ae:	e7d9      	b.n	8003164 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 80031b0:	4620      	mov	r0, r4
 80031b2:	f7ff fee9 	bl	8002f88 <UART_AdvFeatureConfig>
 80031b6:	e7e3      	b.n	8003180 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 80031b8:	2001      	movs	r0, #1
}
 80031ba:	4770      	bx	lr

080031bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80031bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80031c0:	f7fd fc4a 	bl	8000a58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80031c4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80031c6:	e003      	b.n	80031d0 <LoopCopyDataInit>

080031c8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80031c8:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80031ca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80031cc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80031ce:	3104      	adds	r1, #4

080031d0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80031d0:	480a      	ldr	r0, [pc, #40]	; (80031fc <LoopForever+0xa>)
	ldr	r3, =_edata
 80031d2:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <LoopForever+0xe>)
	adds	r2, r0, r1
 80031d4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80031d6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80031d8:	d3f6      	bcc.n	80031c8 <CopyDataInit>
	ldr	r2, =_sbss
 80031da:	4a0a      	ldr	r2, [pc, #40]	; (8003204 <LoopForever+0x12>)
	b	LoopFillZerobss
 80031dc:	e002      	b.n	80031e4 <LoopFillZerobss>

080031de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80031de:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80031e0:	f842 3b04 	str.w	r3, [r2], #4

080031e4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80031e4:	4b08      	ldr	r3, [pc, #32]	; (8003208 <LoopForever+0x16>)
	cmp	r2, r3
 80031e6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80031e8:	d3f9      	bcc.n	80031de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031ea:	f000 f817 	bl	800321c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80031ee:	f7fd fb09 	bl	8000804 <main>

080031f2 <LoopForever>:

LoopForever:
    b LoopForever
 80031f2:	e7fe      	b.n	80031f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80031f4:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80031f8:	08003540 	.word	0x08003540
	ldr	r0, =_sdata
 80031fc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003200:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8003204:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8003208:	20000414 	.word	0x20000414

0800320c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800320c:	e7fe      	b.n	800320c <ADC1_IRQHandler>
	...

08003210 <__errno>:
 8003210:	4b01      	ldr	r3, [pc, #4]	; (8003218 <__errno+0x8>)
 8003212:	6818      	ldr	r0, [r3, #0]
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	2000000c 	.word	0x2000000c

0800321c <__libc_init_array>:
 800321c:	b570      	push	{r4, r5, r6, lr}
 800321e:	4e0d      	ldr	r6, [pc, #52]	; (8003254 <__libc_init_array+0x38>)
 8003220:	4c0d      	ldr	r4, [pc, #52]	; (8003258 <__libc_init_array+0x3c>)
 8003222:	1ba4      	subs	r4, r4, r6
 8003224:	10a4      	asrs	r4, r4, #2
 8003226:	2500      	movs	r5, #0
 8003228:	42a5      	cmp	r5, r4
 800322a:	d109      	bne.n	8003240 <__libc_init_array+0x24>
 800322c:	4e0b      	ldr	r6, [pc, #44]	; (800325c <__libc_init_array+0x40>)
 800322e:	4c0c      	ldr	r4, [pc, #48]	; (8003260 <__libc_init_array+0x44>)
 8003230:	f000 f8c8 	bl	80033c4 <_init>
 8003234:	1ba4      	subs	r4, r4, r6
 8003236:	10a4      	asrs	r4, r4, #2
 8003238:	2500      	movs	r5, #0
 800323a:	42a5      	cmp	r5, r4
 800323c:	d105      	bne.n	800324a <__libc_init_array+0x2e>
 800323e:	bd70      	pop	{r4, r5, r6, pc}
 8003240:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003244:	4798      	blx	r3
 8003246:	3501      	adds	r5, #1
 8003248:	e7ee      	b.n	8003228 <__libc_init_array+0xc>
 800324a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800324e:	4798      	blx	r3
 8003250:	3501      	adds	r5, #1
 8003252:	e7f2      	b.n	800323a <__libc_init_array+0x1e>
 8003254:	08003530 	.word	0x08003530
 8003258:	08003530 	.word	0x08003530
 800325c:	08003530 	.word	0x08003530
 8003260:	08003534 	.word	0x08003534

08003264 <memset>:
 8003264:	4402      	add	r2, r0
 8003266:	4603      	mov	r3, r0
 8003268:	4293      	cmp	r3, r2
 800326a:	d100      	bne.n	800326e <memset+0xa>
 800326c:	4770      	bx	lr
 800326e:	f803 1b01 	strb.w	r1, [r3], #1
 8003272:	e7f9      	b.n	8003268 <memset+0x4>

08003274 <rand>:
 8003274:	b538      	push	{r3, r4, r5, lr}
 8003276:	4b13      	ldr	r3, [pc, #76]	; (80032c4 <rand+0x50>)
 8003278:	681c      	ldr	r4, [r3, #0]
 800327a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800327c:	b97b      	cbnz	r3, 800329e <rand+0x2a>
 800327e:	2018      	movs	r0, #24
 8003280:	f000 f82c 	bl	80032dc <malloc>
 8003284:	4a10      	ldr	r2, [pc, #64]	; (80032c8 <rand+0x54>)
 8003286:	4b11      	ldr	r3, [pc, #68]	; (80032cc <rand+0x58>)
 8003288:	63a0      	str	r0, [r4, #56]	; 0x38
 800328a:	e9c0 2300 	strd	r2, r3, [r0]
 800328e:	4b10      	ldr	r3, [pc, #64]	; (80032d0 <rand+0x5c>)
 8003290:	6083      	str	r3, [r0, #8]
 8003292:	230b      	movs	r3, #11
 8003294:	8183      	strh	r3, [r0, #12]
 8003296:	2201      	movs	r2, #1
 8003298:	2300      	movs	r3, #0
 800329a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800329e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80032a0:	480c      	ldr	r0, [pc, #48]	; (80032d4 <rand+0x60>)
 80032a2:	690a      	ldr	r2, [r1, #16]
 80032a4:	694b      	ldr	r3, [r1, #20]
 80032a6:	4c0c      	ldr	r4, [pc, #48]	; (80032d8 <rand+0x64>)
 80032a8:	4350      	muls	r0, r2
 80032aa:	fb04 0003 	mla	r0, r4, r3, r0
 80032ae:	fba2 2304 	umull	r2, r3, r2, r4
 80032b2:	4403      	add	r3, r0
 80032b4:	1c54      	adds	r4, r2, #1
 80032b6:	f143 0500 	adc.w	r5, r3, #0
 80032ba:	e9c1 4504 	strd	r4, r5, [r1, #16]
 80032be:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 80032c2:	bd38      	pop	{r3, r4, r5, pc}
 80032c4:	2000000c 	.word	0x2000000c
 80032c8:	abcd330e 	.word	0xabcd330e
 80032cc:	e66d1234 	.word	0xe66d1234
 80032d0:	0005deec 	.word	0x0005deec
 80032d4:	5851f42d 	.word	0x5851f42d
 80032d8:	4c957f2d 	.word	0x4c957f2d

080032dc <malloc>:
 80032dc:	4b02      	ldr	r3, [pc, #8]	; (80032e8 <malloc+0xc>)
 80032de:	4601      	mov	r1, r0
 80032e0:	6818      	ldr	r0, [r3, #0]
 80032e2:	f000 b803 	b.w	80032ec <_malloc_r>
 80032e6:	bf00      	nop
 80032e8:	2000000c 	.word	0x2000000c

080032ec <_malloc_r>:
 80032ec:	b570      	push	{r4, r5, r6, lr}
 80032ee:	1ccd      	adds	r5, r1, #3
 80032f0:	f025 0503 	bic.w	r5, r5, #3
 80032f4:	3508      	adds	r5, #8
 80032f6:	2d0c      	cmp	r5, #12
 80032f8:	bf38      	it	cc
 80032fa:	250c      	movcc	r5, #12
 80032fc:	2d00      	cmp	r5, #0
 80032fe:	4606      	mov	r6, r0
 8003300:	db01      	blt.n	8003306 <_malloc_r+0x1a>
 8003302:	42a9      	cmp	r1, r5
 8003304:	d903      	bls.n	800330e <_malloc_r+0x22>
 8003306:	230c      	movs	r3, #12
 8003308:	6033      	str	r3, [r6, #0]
 800330a:	2000      	movs	r0, #0
 800330c:	bd70      	pop	{r4, r5, r6, pc}
 800330e:	f000 f857 	bl	80033c0 <__malloc_lock>
 8003312:	4a21      	ldr	r2, [pc, #132]	; (8003398 <_malloc_r+0xac>)
 8003314:	6814      	ldr	r4, [r2, #0]
 8003316:	4621      	mov	r1, r4
 8003318:	b991      	cbnz	r1, 8003340 <_malloc_r+0x54>
 800331a:	4c20      	ldr	r4, [pc, #128]	; (800339c <_malloc_r+0xb0>)
 800331c:	6823      	ldr	r3, [r4, #0]
 800331e:	b91b      	cbnz	r3, 8003328 <_malloc_r+0x3c>
 8003320:	4630      	mov	r0, r6
 8003322:	f000 f83d 	bl	80033a0 <_sbrk_r>
 8003326:	6020      	str	r0, [r4, #0]
 8003328:	4629      	mov	r1, r5
 800332a:	4630      	mov	r0, r6
 800332c:	f000 f838 	bl	80033a0 <_sbrk_r>
 8003330:	1c43      	adds	r3, r0, #1
 8003332:	d124      	bne.n	800337e <_malloc_r+0x92>
 8003334:	230c      	movs	r3, #12
 8003336:	6033      	str	r3, [r6, #0]
 8003338:	4630      	mov	r0, r6
 800333a:	f000 f842 	bl	80033c2 <__malloc_unlock>
 800333e:	e7e4      	b.n	800330a <_malloc_r+0x1e>
 8003340:	680b      	ldr	r3, [r1, #0]
 8003342:	1b5b      	subs	r3, r3, r5
 8003344:	d418      	bmi.n	8003378 <_malloc_r+0x8c>
 8003346:	2b0b      	cmp	r3, #11
 8003348:	d90f      	bls.n	800336a <_malloc_r+0x7e>
 800334a:	600b      	str	r3, [r1, #0]
 800334c:	50cd      	str	r5, [r1, r3]
 800334e:	18cc      	adds	r4, r1, r3
 8003350:	4630      	mov	r0, r6
 8003352:	f000 f836 	bl	80033c2 <__malloc_unlock>
 8003356:	f104 000b 	add.w	r0, r4, #11
 800335a:	1d23      	adds	r3, r4, #4
 800335c:	f020 0007 	bic.w	r0, r0, #7
 8003360:	1ac3      	subs	r3, r0, r3
 8003362:	d0d3      	beq.n	800330c <_malloc_r+0x20>
 8003364:	425a      	negs	r2, r3
 8003366:	50e2      	str	r2, [r4, r3]
 8003368:	e7d0      	b.n	800330c <_malloc_r+0x20>
 800336a:	428c      	cmp	r4, r1
 800336c:	684b      	ldr	r3, [r1, #4]
 800336e:	bf16      	itet	ne
 8003370:	6063      	strne	r3, [r4, #4]
 8003372:	6013      	streq	r3, [r2, #0]
 8003374:	460c      	movne	r4, r1
 8003376:	e7eb      	b.n	8003350 <_malloc_r+0x64>
 8003378:	460c      	mov	r4, r1
 800337a:	6849      	ldr	r1, [r1, #4]
 800337c:	e7cc      	b.n	8003318 <_malloc_r+0x2c>
 800337e:	1cc4      	adds	r4, r0, #3
 8003380:	f024 0403 	bic.w	r4, r4, #3
 8003384:	42a0      	cmp	r0, r4
 8003386:	d005      	beq.n	8003394 <_malloc_r+0xa8>
 8003388:	1a21      	subs	r1, r4, r0
 800338a:	4630      	mov	r0, r6
 800338c:	f000 f808 	bl	80033a0 <_sbrk_r>
 8003390:	3001      	adds	r0, #1
 8003392:	d0cf      	beq.n	8003334 <_malloc_r+0x48>
 8003394:	6025      	str	r5, [r4, #0]
 8003396:	e7db      	b.n	8003350 <_malloc_r+0x64>
 8003398:	2000009c 	.word	0x2000009c
 800339c:	200000a0 	.word	0x200000a0

080033a0 <_sbrk_r>:
 80033a0:	b538      	push	{r3, r4, r5, lr}
 80033a2:	4c06      	ldr	r4, [pc, #24]	; (80033bc <_sbrk_r+0x1c>)
 80033a4:	2300      	movs	r3, #0
 80033a6:	4605      	mov	r5, r0
 80033a8:	4608      	mov	r0, r1
 80033aa:	6023      	str	r3, [r4, #0]
 80033ac:	f7fd fb36 	bl	8000a1c <_sbrk>
 80033b0:	1c43      	adds	r3, r0, #1
 80033b2:	d102      	bne.n	80033ba <_sbrk_r+0x1a>
 80033b4:	6823      	ldr	r3, [r4, #0]
 80033b6:	b103      	cbz	r3, 80033ba <_sbrk_r+0x1a>
 80033b8:	602b      	str	r3, [r5, #0]
 80033ba:	bd38      	pop	{r3, r4, r5, pc}
 80033bc:	20000410 	.word	0x20000410

080033c0 <__malloc_lock>:
 80033c0:	4770      	bx	lr

080033c2 <__malloc_unlock>:
 80033c2:	4770      	bx	lr

080033c4 <_init>:
 80033c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033c6:	bf00      	nop
 80033c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ca:	bc08      	pop	{r3}
 80033cc:	469e      	mov	lr, r3
 80033ce:	4770      	bx	lr

080033d0 <_fini>:
 80033d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d2:	bf00      	nop
 80033d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033d6:	bc08      	pop	{r3}
 80033d8:	469e      	mov	lr, r3
 80033da:	4770      	bx	lr
 80033dc:	0000      	movs	r0, r0
	...
